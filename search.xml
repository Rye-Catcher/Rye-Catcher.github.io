<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一道remedial-2中的力学题</title>
      <link href="/2020/02/02/%E8%AE%B0%E4%B8%80%E9%81%93remedial-2%E4%B8%AD%E7%9A%84%E5%8A%9B%E5%AD%A6%E9%A2%98/"/>
      <url>/2020/02/02/%E8%AE%B0%E4%B8%80%E9%81%93remedial-2%E4%B8%AD%E7%9A%84%E5%8A%9B%E5%AD%A6%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>Physics Remedial 2的最后一题，一开始我用变换参考系的方法做，结果憨憨地考虑错了。今天听泡芙泰讲没怎么懂，路上突然就明白了，其实也很简单。。。觉得很有意思，就记下吧</p><p><img src="https://1kxahq.ch.files.1drv.com/y4mn6guXGL5KZNVEgAzRsiCE8RR8WuIF1yNlQX4M79aMVy4sjE94YirvlJqQu-ahoT7ILUwTPMohK8pmNyyxivYRC7cmfffLzbRohb-O0lD8Cd57uqTVTraraivcxcJ81Ql_EQpjxKqZroVzjDFrBem_C4EUJM_X3gNARiyrbN6MRQK6eZwyMwipCXKfV-o0Jz0A7ZpO-owdMa2BjvZP6CKUw?width=802&amp;height=239&amp;cropmode=none" alt="remedial-2"></p><p>首先，普通物理学告诉我们:</p><blockquote><p>相对于惯性系以加速度$a$运动的非惯性系中，牛顿运动定律不再适用…这时，我们要引入<b>惯性力</b> (inertial force) 的概念，以便在形式上利用牛顿运动定律去分析问题…惯性力的大小等于物体的质量 $m$ 和非惯性系加速度 $a$ 的乘积， 但方向和 $a$ <b>相反</b>    (pp 47)</p><p>在非惯性系中，如物体受的真实力为 $F$, 另外加上惯性力 $F_{Inertial}$，则物体对于此非惯性系的加速度 $a’$就可在形式上和牛顿定律一样，求得如下:</p><script type="math/tex; mode=display">F+F_{Inertial}=ma'</script><p>(pp 48)</p></blockquote><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>好了，我们将斜坡作为参考系，接下来分析受力来得出方程：</p><p>首先对于斜坡这个参考系, 我们设参考系加速度为 $a$:</p><script type="math/tex; mode=display"> F-n \sin \theta = Ma</script><p>其中 $n$ 是物块施加给斜坡的normal force, 方向垂直于接触面向下，最开始我就是 $n$ 的大小搞错了</p><p>在对物块进行分析, 设它相对于斜坡这个非惯性系的加速度为 $a’$, 我们从水平于斜面和垂直于斜面两个方向来分析</p><p>所以参考系的加速度 $a$ 也要这么分解</p><p>默认平行于斜面向下和垂直于斜面向上是正方向</p><ul><li><p>水平于斜面:</p><script type="math/tex; mode=display">mg \sin \theta - ma \cos \theta = ma'</script><p>真实力是 $mg \sin \theta$, 惯性力是 $-ma \cos \theta$ ( 非惯性力的方向与参考系加速度的方向相反)</p></li><li><p>垂直于斜面:</p><script type="math/tex; mode=display">n-mg\cos \theta -ma \sin \theta = m\cdot 0</script><p>真实力是 $n-mg\cos\theta$, 惯性力是 $-ma\sin\theta$, 垂直斜面方向上相对加速度为$0$</p></li></ul><p>三个方程联立可解得 (Prof Tay:”This is all about algebra lah!”)</p><script type="math/tex; mode=display">\begin{aligned}& a= \frac{F-mg\sin\theta\cos\theta}{M+m\sin^2\theta} \\& a'= g\sin\theta-(\frac{F-mg\sin\theta\cos\theta}{M+m\sin^2\theta})cos\theta\end{aligned}</script><p>最后再在Cartesian coordinate system上对小物块进行分析，运用伽利略变换可得:</p><script type="math/tex; mode=display">\begin{aligned}& a_x= a'\cos\theta+a \\& a_y=-a'\sin\theta+0\\\end{aligned}</script><h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><ul><li><p>遇到非惯性系中运动相关得题，逐个受力分析列出方程，最后使用伽利略变换</p></li><li><p>注意惯性力与非惯性系的加速度方向<strong>相反</strong></p></li><li><script type="math/tex; mode=display">F+F_{Inertial}= ma'</script></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>普通物理学（第七版）上册，高等教育出版社</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当我们在谈论理性时，我们在谈论什么</title>
      <link href="/2020/02/01/%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E8%B0%88%E8%AE%BA%E7%90%86%E6%80%A7%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E8%B0%88%E8%AE%BA%E4%BB%80%E4%B9%88/"/>
      <url>/2020/02/01/%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E8%B0%88%E8%AE%BA%E7%90%86%E6%80%A7%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E8%B0%88%E8%AE%BA%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="当我们在谈论理性时，我们在谈论什么"><a href="#当我们在谈论理性时，我们在谈论什么" class="headerlink" title="当我们在谈论理性时，我们在谈论什么"></a>当我们在谈论理性时，我们在谈论什么</h1><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>今天上英语课，有这样两个情景:</p><p>Context 1: 同学小F上台做一个 self-learning report. 她介绍了一本行为经济学家的书。书中称人们总是做一些非理性 (irrational) 的行为: 比如，相对于向一个遭受旱灾的地区捐款，人们更愿意将援手伸向一个挨饿的小孩。</p><p>Context 2: 同学L说他不会相信杂志中那些误导性的“科学”内容，因为他可以通过科学知识推理出它们是错误的。Tutor夸赞他是一个理性 (rational) 的人</p><p>两则语境中都出现了同一个词: <b>rational (理性的)</b>。前一段时间正好读到关于英国哲学家大卫·休谟 (David Hume) 的相关内容，其中也出现了不少关于理性的内容。于是对此我产生了不少困惑，上网一查发现原来是语言的问题 !!! 休谟所谈的理性是 <b>reason</b>, 而这里的理性是 <b>rationality</b>. 两者的中文翻译在很多处都同为理性，但是英文中的意思却不相同！</p><p>于是就写下此文，权当对误区的一个辨识，以及对休谟观点的一些笔记。此文标题是 “当我们在谈论理性时，我们在谈论什么”, 但大部分内容都是基于休谟经验主义的思想，请不要将它误认为一篇从各个哲学角度介绍理性的文章。</p><h3 id="“Reason”-amp-“Rationality”"><a href="#“Reason”-amp-“Rationality”" class="headerlink" title="“Reason” &amp; “Rationality”"></a>“Reason” &amp; “Rationality”</h3><p>我认为理性(reason)是人们依据<strong>先验 (priori) 知识</strong>的推理而做出判断的能力</p><p>在哲学中，一般是将理性(reason)与经验对立而言的。</p><p>而理性(rationality)则是与感性对立而言的，是指人们运用逻辑推理来思考或做决定的一种品质</p><p>但是这时我不禁想到休谟对于因果论的看法：我们真的在用理性进行推理吗？</p><h3 id="我们真的在用理性-reason-进行推理吗"><a href="#我们真的在用理性-reason-进行推理吗" class="headerlink" title="我们真的在用理性(reason)进行推理吗"></a>我们真的在用理性(reason)进行推理吗</h3><blockquote><p><strong>接下来的理性均为 “reason”</strong></p></blockquote><p>休谟将理性的研究对象分为两类: “<strong>观念之间的关系(relationship of ideas)和事实(matters of facts)”</strong>。</p><p>若我们按照罗素在 _Principle of Mathematics_ 的观点将数学与逻辑看成等同的话，在我的理解下观念之间的关系即逻辑 (或数学)， 它包含的是抽象的命题，是可以完全使用理性判断它的真假。</p><p>第二个对象则是关于实际之物的命题，只能通过经验来判断命题的真假；比如：LXT至少单身了十七年零七个月六天四小时。你可以通过经验观察（比如亲自去问LXT）得到命题的真假。</p><p>这时，休谟说”一切关于事实的推理，似乎都建立在因果关系上面“。他继续说道:””an expectation that a particular event (a ‘cause’) will be followed by another event (an ‘effect’) previously and constantly associated with it.”, 也就是这种因果关系是<strong>习惯</strong>而非理性的结果。</p><p>这什么意思呢？也就是你在生活中的大部分知识，包括自然科学，都是基于经验的习惯而非理性。</p><p>一个很经典的例子：一个黑球撞击一个白球后会发生什么。你肯定会轻松地答出来：白球也会被撞动。也就是说黑球撞白球这个因，导致了白球也被撞动了的这个果。</p><p>看上去你是在用理性推理而得的因果关系，但事实上这种关系并不同数学定理一样有<strong>必然性</strong>，而只是你的<strong>“习惯性联想”</strong>.</p><p>我们再对刚刚的例子解构一下：</p><p>因:</p><ol><li>黑球撞击了白球</li><li>每一次白球也被撞动</li></ol><p>果：</p><ol><li>这次白球也会被撞动</li></ol><p>这两个因能推出这一个果吗？逻辑上显然不行！只是因为经验告诉我们这些因与果是<strong>恒常组合</strong>(“constantly associated”)的，我们才这么推理出了这样的一个因果关系。</p><p>当然你肯定会对我进行反驳：我可以根据经典力学推理出这个因果关系是对的啊。但是你仔细想想，牛顿三定律难道不也是根据”习惯性联想”得到的因果关系吗?</p><p>如此看来，我们的生活大几乎是没有在用理性(reason)进行推理的，而自然科学的正确性也打上了一个问号：我们常常将自然科学视为真理，但是在这里休谟告诉我们自然科学也只是我们使用习惯性联想出的因果关系得到一套体系而已，我们认为它正确是因为它符合我们的习惯，或者说，因为我们的经验，而非因为理性上的推理。</p><p>我们有人在批判中医时常说这只是经验罢了，并不能用科学解释。但是按照休谟的理论，难道我们的自然科学不也是经验吗？我们将自然科学视为真理，难道也不是一种迷信呢？为什么我们要坚信科学，而非“伪科学”？既然习惯是无法保证必然性的，凭什么我们说符合习惯的经验就是正确的，不符合习惯的经验就是错误的？对于中医而言，很多药方在习惯上确实可以达到功效，我们为什么不选择相信它？这在我看来实在是一个很大的挑战。</p><h3 id="理性战胜激情"><a href="#理性战胜激情" class="headerlink" title="理性战胜激情?"></a>理性战胜激情?</h3><p>休谟在因果论方面提出了一个棘手的问题之后并不罢休，在道德方面，他说了一句名言:”理性是激情的奴隶”(“Reason is, and ought only to be the slave of the passions, and can never pretend to any other office than to serve and obey them.”).</p><p>许多传统的观点都认为用理性去克制自己的激情才是正确的。但是休谟提出了一些看法：</p><ol><li><p>没有情感那么道德无法被判断：理性只能判断事实的真或假，但是道德的正确与否由我们的情感判断。例如：有一天小I从厨房冰箱偷吃了别人的西瓜。我们的理性只能告诉我们这个事实是否是真的，而关于这个偷吃行为的价值判断，却只能由我们的情感决定；假如我们失去了所有的情感, 那么偷吃这件事对我们而言和”我是男生”这样的事实没有任何价值上的区别。</p><p>这里我还有一些想法，我们的这些情感也都是一种事实上的因果关系。譬如，我可能会对小I同情，因为他是忍受不了强制餐而饿的发慌；也可能因为他的不正义行为感到 resentment。但是这些因果关系也并非理性的，而是前文所提到的习惯性联想。</p></li><li><p>情感决定了我们的最终目的。如果失去了情感偏好，我们将不知如何做选择。</p></li><li><p>道德判断往往是凭借直觉在瞬间做出来的，而非推理</p></li></ol><p>周濂在这之后说因此我们在尝试说服别人相信违背他们直觉的东西时，不仅应该动之以理，也要晓之以情。从目前我在Twitter，知乎等处的经验来看，确实是这样的。</p><h3 id="一些杂想"><a href="#一些杂想" class="headerlink" title="一些杂想"></a>一些杂想</h3><p>再回到”rationality”上来, 它与感性的区别可能就在于感性是凭借情感的直觉思考和做出决定，而 rationality 则会在事实的因果关系上思考和做出决定。但它们两者都不是建立在 reason 之上的。</p><p>值得一提是，常读 _The Economist_ 的S博学告诉我经济学下的理性是指利益最大化。</p><p>最后一点感想，很多词语在语义上都是模糊的，想要讨论问题又往往不得不直面它们的定义，实在有点难受。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>说说休谟, Jia Yiliu, <a href="https://medium.com/@jiayiliu_14421/说说休谟-b682e5385f40" target="_blank" rel="noopener">https://medium.com/@jiayiliu_14421/%E8%AF%B4%E8%AF%B4%E4%BC%91%E8%B0%9F-b682e5385f40</a></li><li>《打开|周濂的100堂西方哲学课》，周濂，上海三联书店</li><li>Wikipedia-David Hume, <a href="https://en.wikipedia.org/wiki/David_Hume" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/David_Hume</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ2411-铺地砖计数题解-状压DP教学</title>
      <link href="/2019/12/20/POJ2411-%E9%93%BA%E5%9C%B0%E7%A0%96%E8%AE%A1%E6%95%B0%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/"/>
      <url>/2019/12/20/POJ2411-%E9%93%BA%E5%9C%B0%E7%A0%96%E8%AE%A1%E6%95%B0%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接-Links"><a href="#题目链接-Links" class="headerlink" title="题目链接 Links"></a>题目链接 Links</h3><p><a href="http://poj.org/problem?id=2411" target="_blank" rel="noopener">http://poj.org/problem?id=2411</a></p><h3 id="题解-Solution"><a href="#题解-Solution" class="headerlink" title="题解 Solution"></a>题解 Solution</h3><p>好久不写题了，昨晚学长突然问我这个问题做出来还花了不少时间</p><p>看到这题第一个想法是搞出一个计数公式，发现毫无头绪。再仔细想想感觉这种问题有一点印象，也许可以通过递推之类的得到结果。这时就想到了使用动态规划，我们可以逐行逐行地进行状态转移来计算总的方案数，也就是说如果我们知道了填满前 $n-1$ 行的方案数，我们可以递推出填满前 $n$ 行的答案。 </p><p>那么怎么进行状态转移呢？</p><p>假设现在我们要从第 $n-1$ 行递推到第 $n$ 行，我们不妨用$1$表示在这里竖放了一枚砖块(且$1$表示是竖放砖块的上端)，那么第$n-1$行砖块的状态可以用一个$01$数组表示，比如一个列数为$5$的例子:</p><script type="math/tex; mode=display">01100</script><p>第一个$0$说明它是一个竖放砖块的下端，第$2$和第$3$个$1$表示它们两个分别都是一个竖放砖块的上端，而后面两个$0$有两种情况，它们既可能表示一枚横放的砖块，也有可能是两个竖放砖块的下端</p><p>继续拿这个例子说话，我们既然已经知道了第$n-1$行砖块放置的情况，那么我们就知道了哪些状态是它能够<strong>状态转移到第$n$行</strong>的, 也就是说哪些第$n$行的砖块放置状态是它能够合法地转移过来的。</p><p>以下是$01100$所有能够合法转移的状态:</p><script type="math/tex; mode=display">01100->10011 \\01100->10000 \\</script><p>这里是解释，对于第 $n-1$ 行的第一个$0$，由于下一行无法从第一列开始横着放（因为第二列必须是竖着放的下端），所以第 $n$ 行的第一列一定是$1$；对于第二列和第三列，由于在第 $n-1$ 行它们是两块竖放砖块的上端，所以第 $n$ 行的第二列和第三列必须是 $0$；而对于第$n-1$行第四列和第五列的$0$, 第 $n$ 行既可以是两块竖放砖块的上端，也可以是一块横着放的砖块。</p><p>如果你看懂了这些，不难归纳出状态转移的合法标准: </p><ul><li>$1$ 的对应状态是 $0$</li><li>$0$ 的对应状态是 $1$; 但是 $0 0$ 的对应状态可以是 $00$</li></ul><p>在动态规划的状态转移中，如果我们枚举每一个状态都用 $01$ 数组表示也太麻烦了，所以干脆就用一个数的二进制形式来表示这个 $01$ 数组 ，也就是状态压缩的技巧。所以称之为状态压缩动态规划 (abbr. 状压DP)</p><p>既然是二进制表示，就需要了解基本的位运算符号和一些基本的位操作技巧，这里不赘述。但是讲一些状压DP中最最基本的技巧: 我们要枚举 $m$ 列的所有 $01$ 状态，相当于枚举 $[0, 2^m)$ 中的所有数，所以循环就是从 $0$ 循环到 $1&lt;&lt;m-1$。 </p><p>最后说一下其实我这个判断状态转移是否合法的办法并不高明，其实可以直接预处理出哪些状态是可以从某个状态转移而来的，但我太懒了就不想写了。。。还有一件事，这题的 $n,m$ 小的可怜，就算你写的复杂度巨大打表也是可以的 -_-</p><h3 id="代码-Codes"><a href="#代码-Codes" class="headerlink" title="代码 Codes"></a>代码 Codes</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">12</span>;<br><span class="hljs-keyword">int</span> n,m,size;<br><span class="hljs-keyword">bool</span> is_ok[maxn][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">11</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">11</span>];<br>ll f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">11</span>][maxn]; <span class="hljs-comment">//把大的放前面减小数组寻址的常数消耗</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">12</span>],b[<span class="hljs-number">12</span>];<br><span class="hljs-keyword">if</span>(x&amp;y)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<span class="hljs-comment">//把数字拆分成二进制位</span><br>a[i]=x&amp;<span class="hljs-number">1</span>;<br>b[i]=y&amp;<span class="hljs-number">1</span>;<br>x=x&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">//二进制位向右移一位，也就是第一位消失了</span><br>y=y&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123; <br>    <span class="hljs-comment">//上下两行都为0且连续的0的个数必须是偶数，因为只有00(两个0)能够转移到00</span><br>    <span class="hljs-comment">//比如 010001  -&gt; 100000 是不合法的</span><br><span class="hljs-keyword">if</span>(a[i]||b[i])&#123;<br><span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>num=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> num++;<br>&#125;<br><span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//预处理哪些情况是不合法的</span><br><span class="hljs-keyword">int</span> fac[maxn];<br>fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">11</span>;i++)fac[i]=fac[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">11</span>;i++)&#123;<br>m=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;fac[i];j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;fac[i];k++)&#123;<br><span class="hljs-keyword">if</span>(!ok(j,k))is_ok[i][j][k]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> is_ok[i][j][k]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>pre();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;(n||m))&#123;<br>size=<span class="hljs-number">1</span>&lt;&lt;m; <span class="hljs-comment">//相当于 2^m</span><br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;size;j++)&#123; <span class="hljs-comment">//枚举第 i-1 行的状态</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;size;k++)&#123; <span class="hljs-comment">//枚举第 i 行的状态</span><br><span class="hljs-keyword">if</span>(!is_ok[m][j][k])<span class="hljs-keyword">continue</span>;<br>f[j][i]+=f[k][i<span class="hljs-number">-1</span>];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[<span class="hljs-number">0</span>][n]); <span class="hljs-comment">//为什么答案是这个自己去想</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压DP </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodeppt 入坑指南</title>
      <link href="/2019/10/21/Nodeppt-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2019/10/21/Nodeppt-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Nodeppt-入坑指南"><a href="#Nodeppt-入坑指南" class="headerlink" title="Nodeppt 入坑指南"></a>Nodeppt 入坑指南</h1><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><ul><li><p>阅读官方文档:</p><p><a href="https://github.com/ksky521/nodeppt" target="_blank" rel="noopener">https://github.com/ksky521/nodeppt</a></p><p>观看官方 <strong>demo</strong></p><p><a href="https://nodeppt.js.org/#slide=1" target="_blank" rel="noopener">https://nodeppt.js.org/#slide=1</a></p></li><li><p>安装 <code>node.js</code></p><p>下载地址: <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></p></li><li><p>安装 <code>nodeppt</code></p><p><code>npm install -g nodeppt</code></p><p>如果一直显示 <code>still install loadCurrentTree</code></p><p>你需要换一个 <strong>nodejs</strong> 的安装源，这个自行搜索</p></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>三条指令</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">nodeppt new slides.md<br>nodeppt serve slides.md<br>nodeppt build slides.md<br></code></pre></td></tr></table></figure><p>指令有什么用参见<a href="https://github.com/ksky521/nodeppt" target="_blank" rel="noopener">官方文档</a></p><p>但是注意，第三条指令不只会生成 <code>html</code>文件，还会生成三个文件夹</p><p><code>js</code> <code>css</code> 文件夹中都放了为了该 <code>html</code> 文件正常渲染的文件，但<code>img</code>文件夹我还不知道怎么用(我猜应该是可以在 <strong>nodeppt</strong> 本地引用里面的图片)</p><p>所以转移文件的时候别忘了那三个文件夹</p><p><strong>nodeppt</strong> 的语法可以参考官方 demo，或直接在<a href="https://github.com/ksky521/nodeppt/tree/master/site" target="_blank" rel="noopener">这里</a>看一看具体的写法(请使用 <strong>raw</strong> 或者编辑模式阅读)</p><h3 id="使用通过-Github-Pages-部署的-Hexo-博客在线查看-nodeppt"><a href="#使用通过-Github-Pages-部署的-Hexo-博客在线查看-nodeppt" class="headerlink" title="使用通过 Github Pages 部署的 Hexo 博客在线查看 nodeppt"></a>使用通过 Github Pages 部署的 Hexo 博客在线查看 nodeppt</h3><p>如果我们本地观看 <strong>nodeppt</strong> 的 <code>html</code> 文件的话，会发现 <code>FontAwesome</code> 图标无法显示和背景的 <strong>Youtube</strong> 视频无法播放</p><p>但是我们如果把 <code>html</code> 文件部署到网页上就不会出现这个问题</p><p>现在很多人都使用 <strong>Github Pages</strong> 部署的 <strong>Hexo</strong> 博客，于是我们可以将 <code>html</code> 文件作为 博客的一部分部署到网页上</p><p>注意我现在使用的主题是 <strong>Aria</strong>, 可能与您的主题不太一样，但是操作都是大同小异的</p><ul><li><p>创建一个新页面，这里的新页面指的是与 <code>tags</code> <code>categories</code> <code>about</code> 同级别的页面</p><ul><li><p>在你的主题的文件中的 <strong>config.yml</strong> 文件夹中的对应位置添加新页面</p><p>以 <strong>Aria</strong> 主题为例，添加</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">- page: slides<br>  url: slides/<br>  logo:<br></code></pre></td></tr></table></figure></li><li><p>输入 <code>Git</code> 指令（在你的<code>blog</code>文件夹也就是主文件夹中）</p><p><code>hexo new page slides</code></p></li></ul><p>一般来说这两个操作后会生成 <code>source\slides\index.md</code></p></li><li><p>将已经<code>build</code> 的<code>css</code> <code>js</code> <code>img</code> 和 <code>html</code>文件全部复制进 <code>source\slides</code> 文件夹中  </p><p>然后将那个 <code>html</code> 文件改名成 <code>index.html</code> 并删除 <code>index.md</code></p></li><li><p>接下来我们需要让 <strong>hexo</strong> 跳过渲染 <code>index.html</code></p><p>在主文件夹的 <code>config.yml</code> 中找到<code>skip_render:</code> 这一项，加入<code>source\slides</code> 这个文件夹</p><p>具体操作:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">skip_render:<br>   - slides\*<br></code></pre></td></tr></table></figure></li><li><p>常规的<code>hexo clean</code> <code>hexo g-d</code> 操作过后就好了</p><p>在你的博客中点击 <code>slides</code> 就好了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodeppt </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法中递归函数的时间复杂度浅析</title>
      <link href="/2019/09/23/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95%E4%B8%AD%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B5%85%E6%9E%90/"/>
      <url>/2019/09/23/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95%E4%B8%AD%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="分治问题中递归函数时间复杂度浅析"><a href="#分治问题中递归函数时间复杂度浅析" class="headerlink" title="分治问题中递归函数时间复杂度浅析"></a>分治问题中递归函数时间复杂度浅析</h2><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>在各类<strong>分治</strong> (Divide-and-Conquer) 问题中, 我们经常使用递归函数来方便地进行子问题的处理和结果的合并. 典型的例子有归并排序 (merge sort) 和离散快速傅里叶变换 (Fast Fourier Transform)。对于这种递归函数算法的时间复杂度分析我们可以使用三种方法:<strong>代入法</strong> (The substitution method) , <strong>递归树法</strong> (The recursion-tree method) 和使用大名鼎鼎的主定理 (The Master Theorem) 的<strong>主定理法</strong> (The Master Method) .</p><p>在这里, 我们使用这样的方法表示一个递归函数, 例如:$T(n) = 2T(\lceil \frac{n}{2} \rceil) + n$</p><h3 id="代入法-The-substitution-method"><a href="#代入法-The-substitution-method" class="headerlink" title="代入法(The substitution method)"></a>代入法(The substitution method)</h3><p>所谓代入法其实就是猜一个答案，然后将这个答案代入递归函数的表达式中来验证我们的猜测是正确的，其实是用到了数学归纳的方法.</p><p>_e.g._ 求$T(n) = 2T(\lfloor \frac{n}{2} \rfloor) + n$的时间复杂度上界(upper bound).</p><p>我们首先猜想答案是$O(nlog_2 n)$, 所以我们需要证明$T(n) &lt;= c n log_2 n$. 不妨假设这个结论已经对所有小于$n$的数成立,于是代入$T(\lfloor \frac{n}{2} \rfloor)$</p><p>得</p><script type="math/tex; mode=display">\begin{aligned}&T(n) = 2T(\lfloor \frac{n}{2} \rfloor) + n \\\\&<=2c\lfloor \frac{n}{2} \rfloor log_2 {\lfloor \frac{n}{2} \rfloor} +n \\\\&<=2c\frac{n}{2} log_2 \frac{n}{2} +n \\\\&=cn(log_2 {n} - 1) +n \\\\&=cnlog_2 n -cn+n \\\\\end{aligned}</script><p>显然当$c&gt;=1$时可以说明我们的假设是正确的</p><p>为了严格证明我们当然还需要注意两个方面:第一个是达到边界时的情况(也就是递归树的叶节点);还有一个就是归纳的起始条件,也就是说，为了归纳证明，我们需要另外证明$n$在小于某一个数时我们的假设是成立的。但是为了方便起见，我们可以不用处理上述因素。</p><p>我们需要猜测一个答案来开始我们的代入法， 但是很多时候我们可能并不能第一下就猜出正解，我们可以先猜一个比较松的界，然后逐步收敛得到我们想要的答案。</p><p>同时算法导论上还讲述了一个比较精巧的方法, 当我们猜测出来的答案并不足够强以证明不等式，我们可以在猜测的不等式中减去低阶项(lower-order term)后再代入。</p><p>例如算法导论中给出的例子$T(n) = T(\lfloor \frac{n}{2} \rfloor)+T(\lceil \frac{n}{2} \rceil)+1$</p><p>如果我们猜测$T(n)&lt;=cn$,发现带入结果是$T(n)&lt;=cn+1$，不足以证明我们的猜想</p><p>这时我们减去一个低阶项$T(n)&lt;= cn-d$再次代入,得$T(n)&lt;=cn-2d+1$, 只要$d&gt;=1$,$T(n)&lt;=cn-d$就成立</p><h3 id="递归树法-The-recursion-tree-method"><a href="#递归树法-The-recursion-tree-method" class="headerlink" title="递归树法(The recursion-tree method)"></a>递归树法(The recursion-tree method)</h3><p>咕</p><h3 id="主定理法-The-master-method"><a href="#主定理法-The-master-method" class="headerlink" title="主定理法(The master method)"></a>主定理法(The master method)</h3><p>主定理法是为了求出下述通式的递归式的时间复杂度的</p><script type="math/tex; mode=display">T(n) = aT(\frac{n}{b}) +f(n)</script><p>$a,b$均为大于等于$1$的常数，$f(n)$是一个渐进正函数(asymptotically positive function)</p><p>这里的$\frac{n}{b}$既可以指上取整也可以指下取整</p><p>主定理法当然是依据下面这个主定理来的:</p><blockquote><ol><li><p>If $f(n)=O(n^{\log_ba-\epsilon})$ for some constant $\epsilon&gt;0$,then $T(n)=\Theta(n^{\log_ba})$.</p></li><li><p>If $f(n)=\Theta(n^{\log_ba})$,then $T(n)=\Theta(n^{\log_ba}\lg n)$.</p></li><li><p>If $f(n)=\Omega(n^{\log_ba+\epsilon})$ for some constant $\epsilon&gt;0$, and if $af(n/b)\le cf(n)$ for some constant $c&lt;1$ and all sufficiently large $n$,then $T(n)=\Theta(f(n))$.</p></li></ol><p><a href="http://thuvien.thanglong.edu.vn:8081/dspace/bitstream/DHTL_123456789/3760/2/introduction-to-algorithms-3rd-edition.pdf" target="_blank" rel="noopener">Introduction To Algorithms,Page 94, 3rd edition</a></p></blockquote><p>举几个例子:</p><h4 id="递归建堆-T-n-T-2n-3-1"><a href="#递归建堆-T-n-T-2n-3-1" class="headerlink" title="递归建堆  T(n) = T(2n/3) + 1"></a>递归建堆  <script type="math/tex">T(n) = T(2n/3) + 1</script></h4><p>$a=1, b=\frac{3}{2}, log_b^a = 0, n^{log_b^a} = 1 = f(n)$</p><p>所以 $T(n) = \Theta(logn)$</p><h4 id="归并排序-T-n-2T-n-2-Theta-n"><a href="#归并排序-T-n-2T-n-2-Theta-n" class="headerlink" title="归并排序 $T(n)=2T(n/2)+ \Theta(n)$"></a>归并排序 $T(n)=2T(n/2)+ \Theta(n)$</h4><p> $a=2, b=2, n^{log_b^a} = n$</p><p>所以 $T(n)= \Theta(nlogn)$</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>Cormen, T. H., Leiserson, C. E., Rivest, R. L., &amp; Stein, C. (2009). Introduction to algorithms. MIT press., <a href="http://thuvien.thanglong.edu.vn:8081/dspace/bitstream/DHTL_123456789/3760/2/introduction-to-algorithms-3rd-edition.pdf" target="_blank" rel="noopener">http://thuvien.thanglong.edu.vn:8081/dspace/bitstream/DHTL_123456789/3760/2/introduction-to-algorithms-3rd-edition.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 时间复杂度 </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建SM2 Wiki之路</title>
      <link href="/2019/09/20/%E6%90%AD%E5%BB%BASM2-Wiki%E4%B9%8B%E8%B7%AF/"/>
      <url>/2019/09/20/%E6%90%AD%E5%BB%BASM2-Wiki%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建SM2-Wiki之路"><a href="#搭建SM2-Wiki之路" class="headerlink" title="搭建SM2 Wiki之路"></a>搭建SM2 Wiki之路</h2><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>想不到什么好标题就用这个了。这篇文章记录了我搭建<a href="https://rye-catcher.github.io/SM2-wiki/">SM2 Wiki</a>的大致经历，在这个过程中遇到的许多问题以及最后的解决方式。希望能给大家，尤其是也想通过<a href="https://www.mkdocs.org" target="_blank" rel="noopener">Mkdocs</a>搭建的人一些参考。但是本文也是个人理解，无法保证没有错误，恳请谅解。</p><p>在这里先致谢<a href="https://github.com/mkdocs/mkdocs/" target="_blank" rel="noopener">mkdocs</a>和所有网络上参考资料的编辑者</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先我使用了阿里云学生优惠的服务器，100+RMB 每年，选择安装的是<strong>Ubuntu 16.04</strong>系统</p><p>开机后升级一下源。但是我发现这个云主机的默认软件源是阿里云的，不知道怎么才能换成NUS的</p><h3 id="安装Mkdocs"><a href="#安装Mkdocs" class="headerlink" title="安装Mkdocs"></a>安装Mkdocs</h3><p>中文文档:<a href="https://markdown-docs-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://markdown-docs-zh.readthedocs.io/zh_CN/latest/</a></p><p>英文文档:<a href="https://www.mkdocs.org/" target="_blank" rel="noopener">https://www.mkdocs.org/</a></p><p>按照上面步骤来先看一下<strong>python</strong>版本,结果是<strong>2.7.12</strong>的…似乎有点低，不过文档说资瓷的话就不管了</p><p>按照文档<code>pip install mkdocs</code>后，查看<strong>mkdocs</strong>时神奇的报错了就发生了，而且似乎是因为<strong>python</strong>版本太低不兼容造成的 :(</p><p>安装<strong>python3</strong>后发现版本还是没有变，于是上网找到了这篇博客:<a href="https://blog.csdn.net/CYM_LMY/article/details/78315139" target="_blank" rel="noopener">Ubuntu16.04下完美切换Python版本</a>，完美解决问题</p><p>结果再次<strong>pip</strong>时又报错了，搜索错误信息找到了<a href="https://www.cnblogs.com/chax/p/9409353.html" target="_blank" rel="noopener">Stackoverflow上的这个问题</a></p><p>按照其中一个方法重装<strong>pip</strong>就好了</p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>还是按照官方文档中的步骤</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">mkdocs new SM2-wiki<br>cd SM2-wiki<br></code></pre></td></tr></table></figure><p>此时文件夹里的<code>mkdocs.yml</code>是配置信息，关于更多配置信息的编辑可以参考<a href="https://s0www0mkdocs0org.icopy.site/user-guide/configuration/" target="_blank" rel="noopener">这里</a></p><p>当然这里只是你服务器本地的文件，我们这里使用<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>托管</p><p>怎么做呢？</p><p>先在<strong>Github</strong>中创建一个新<strong>repo</strong>，例如创了一个叫<strong>SM2-wiki</strong>的<strong>repo</strong></p><p>然后我们将它<strong>clone</strong>到本地</p><p><code>git clone https://github.com/&lt;user-name&gt;/SM2-wiki &lt;本地目录名&gt;</code></p><p>如果你不熟悉<strong>Git</strong>指令强烈推荐阅读这篇文章:<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p><p>接下来把<strong>mkdocs</strong>创立的<strong>SM2-wiki</strong>里的文件比如<strong>mkdocs.yml</strong>,<strong>/docs</strong>全都复制到<strong>clone</strong>到的那个<strong>repo</strong>里</p><p>完成后同时<strong>cd</strong>到<strong>clone</strong>到的<strong>repo</strong>中，接下来所有的本地文件操作都在那里进行</p><p>此时文件夹应该用这几样东西:<code>/docs</code>,<code>mkdocs.yml</code>,<code>LICENSE</code>（如果你在创建<strong>repo</strong>时有选的话）,<code>README.md</code></p><p>然后输入指令<code>mkdocs gh-deploy</code>,开始部署</p><p>它会要求输入你的<strong>Github</strong>上的用户名和密码.</p><p>如果成功后就可以在<code>https://&lt;user-name&gt;.github.io/SM2-wiki</code>这里看到你的网页了</p><p>但是这时候有一个很不方便的是我们这时只能在本地修改<code>/docs</code>和<code>mkdocs.yml</code>,怎么把它们与<strong>repo</strong>中的<strong>master</strong>分支关联使得我们可以在<strong>Github</strong>上编辑呢？</p><p>其实几行<strong>Git</strong>指令就好了,但是首先我们先保证不把部署后生成的<code>/site</code>也给送到<strong>master</strong>分支</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">echo &quot;site/&quot; &gt;&gt; .gitignore<br>git add /docs mkdocs.yml .gitignore<br>git commit -m &quot;add /docs mkdocs.yml .gitignore&quot;<br>git push origin master<br></code></pre></td></tr></table></figure><p>这样的话就建立起关联了，我们假如在<strong>Github</strong>上修改了<strong>master</strong>分支里的文件，只需要</p><p><code>git pull origin</code></p><p>就把远程分支的更新与我们本地的合并了，然后再次<code>mkdocs gh-deploy</code>部署后就完成了更新这个过程</p><h3 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h3><p>官方<strong>mkdocs</strong>的主题我觉得太丑了,于是才用和<strong>OI-wiki</strong>一样的<code>mkdocs-material</code>主题</p><p>官方文档: <a href="https://squidfunk.github.io/mkdocs-material/" target="_blank" rel="noopener">https://squidfunk.github.io/mkdocs-material/</a></p><p>但是安装时出了个大坑</p><p>修改主题后部署时报错，原因是本地<strong>markdown</strong>版本太低了</p><p>结果用<strong>pip</strong>更新<strong>markdown</strong>时又给我报错了,错误信息</p><p><code>ERROR: Cannot uninstall &#39;Markdown&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code></p><p>谷歌了一下发现这个相关<strong>issues</strong>:<a href="https://github.com/pypa/pip/issues/5247" target="_blank" rel="noopener">https://github.com/pypa/pip/issues/5247</a></p><p>发现了一个非常好的方法，完美解决了问题:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#Reduced version,<br>pip install --upgrade --force-reinstall pip==9.0.3<br>#Tried to re-install package<br>pip upgrade markdown --disable-pip-version-check<br>#At last, recover the latest version for pip<br>pip install --upgrade pip<br></code></pre></td></tr></table></figure><p>关于更多配置，这里推荐几个地方:</p><ul><li><p><code>mkdocs.yml</code>配置信息:</p><ul><li>中文: <a href="https://s0www0mkdocs0org.icopy.site/user-guide/configuration/" target="_blank" rel="noopener">https://s0www0mkdocs0org.icopy.site/user-guide/configuration/</a></li><li>English: <a href="https://www.mkdocs.org/user-guide/configuration/" target="_blank" rel="noopener">https://www.mkdocs.org/user-guide/configuration/</a></li></ul></li><li><p>自定义主题: </p><ul><li><p>中文: <a href="https://s0www0mkdocs0org.icopy.site/user-guide/custom-themes/" target="_blank" rel="noopener">https://s0www0mkdocs0org.icopy.site/user-guide/custom-themes/</a></p></li><li><p>English: <a href="https://squidfunk.github.io/mkdocs-material/customization/#extending-the-theme" target="_blank" rel="noopener">https://squidfunk.github.io/mkdocs-material/customization/#extending-the-theme</a></p></li></ul></li><li><p><strong>Markdown</strong>相关扩展(可以在<code>mkdocs.yml</code>中配置使用)</p><ul><li>中文: <a href="http://s0squidfunk0github0io.icopy.site/mkdocs-material/extensions/pymdown/" target="_blank" rel="noopener">http://s0squidfunk0github0io.icopy.site/mkdocs-material/extensions/pymdown/</a></li></ul></li><li><p>一个含有许多相关信息尤其是<strong>markdown</strong>方面的网站: <a href="https://cyent.github.io/markdown-with-mkdocs-material/" target="_blank" rel="noopener">https://cyent.github.io/markdown-with-mkdocs-material/</a></p></li><li><p>OI-wiki@github: <a href="https://github.com/OI-wiki/OI-wiki/" target="_blank" rel="noopener">https://github.com/OI-wiki/OI-wiki/</a></p></li></ul><p>…</p>]]></content>
      
      
      <categories>
          
          <category> SM2 Wiki </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 项目 </tag>
            
            <tag> SM2 Wiki </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFT--快速傅里叶变换入门</title>
      <link href="/2019/09/11/FFT-%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%85%A5%E9%97%A8/"/>
      <url>/2019/09/11/FFT-%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="FFT—快速傅里叶变换入门"><a href="#FFT—快速傅里叶变换入门" class="headerlink" title="FFT—快速傅里叶变换入门"></a>FFT—快速傅里叶变换入门</h2><blockquote><p><strong>快速傅里叶变换</strong>（英语：<strong>Fast Fourier Transform, FFT</strong>），是快速计算序列的<a href="https://zh.wikipedia.org/wiki/离散傅里叶变换" target="_blank" rel="noopener">离散傅里叶变换</a>（DFT）或其逆变换的方法<a href="https://zh.wikipedia.org/wiki/快速傅里叶变换#cite_note-1" target="_blank" rel="noopener">[1]</a>。<a href="https://zh.wikipedia.org/wiki/傅里叶分析" target="_blank" rel="noopener">傅里叶分析</a>将信号从原始域（通常是时间或空间）转换到<a href="https://zh.wikipedia.org/wiki/頻域" target="_blank" rel="noopener">频域</a>的表示或者逆过来转换。FFT会通过把<a href="https://zh.wikipedia.org/wiki/離散傅里葉變換矩陣" target="_blank" rel="noopener">DFT矩阵</a><a href="https://zh.wikipedia.org/wiki/矩阵分解" target="_blank" rel="noopener">分解</a>为<a href="https://zh.wikipedia.org/wiki/稀疏矩阵" target="_blank" rel="noopener">稀疏</a>（大多为零）因子之积来快速计算此类变换。<a href="https://zh.wikipedia.org/wiki/快速傅里叶变换#cite_note-2" target="_blank" rel="noopener">[2]</a>  因此，它能够将计算DFT的<a href="https://zh.wikipedia.org/wiki/計算複雜性理論" target="_blank" rel="noopener">复杂度</a>从只用DFT定义计算需要的 $O(n^2)$降低到$O(n \log n)$,其中$n$为数据大小            </p><pre><code>---[维基百科-快速傅里叶变换](https://zh.wikipedia.org/wiki/快速傅里叶变换)</code></pre></blockquote><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>如何计算两个多项式$\sum_{i=0}^n a_i x^i$,$\sum_{i=0}^n b_i x^i$相乘后新的多项式?</p><p>非常自然的,我们可以将一个多项式中的每个系数与另一个多项式的各个系数逐个相乘后相加后得到新的多项式。这样做时间复杂度为$O(n^2)$</p><p>但是如果我们会多项式插值的话还有另一种方法，我们先用$n+1$个不同的点表示出一个多项式(根据高斯消元法$n+1$个点可以确定一个唯一的$n$次多项式)。假设这里的两个多项式分别过$(x_i,{y_1}_i)$和$(x_i,{y_2}_i)$,那么它们相乘后的多项式就过$(x_i,{y_1}_i \times {y_2}_i)$这个点。但是如果我们想使用插值将点值转化为系数的话，由于相乘最高次数已经达到了$2 \times n$,所以在一开始也得求出更多的点值后相乘并插值。求出这么多个点值的时间复杂度是$O(n^2)$,同样的插值的话我们使用拉格朗日插值法的话依旧需要$O(n^2)$的时间复杂度</p><p>所以这种方法的时间复杂度依旧为$O(n^2)$。但是我们可以通过选择一些特定的点和精妙的算法，将求点值过程和插值过程的时间复杂度降为$O(n\log n)$，总的时间复杂度也降为$O(n \log n)$.</p><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p>太懒了不想再码一遍长长的前置知识和算法过程,就列出我学习FFT时认为非常有用的资料:</p><ol><li><p>Cormen, T. H., Leiserson, C. E., Rivest, R. L., &amp; Stein, C. (2009). <em>Introduction to algorithms</em>. MIT press.</p></li><li><p>rvalue(2017), <a href="https://www.cnblogs.com/rvalue/p/7351400.html" target="_blank" rel="noopener">[学习笔记] 多项式与快速傅里叶变换(FFT)基础</a>, retrieved from 2017/08/13, <a href="https://www.cnblogs.com/rvalue/p/7351400.html" target="_blank" rel="noopener">https://www.cnblogs.com/rvalue/p/7351400.html</a></p></li><li><p><strong>复数学习部分</strong>: </p><p> rvalue(2018),<a href="https://www.cnblogs.com/rvalue/p/10120174.html" target="_blank" rel="noopener">[学习笔记&amp;教程] 信号, 集合, 多项式, 及各种卷积性变换 (FFT,NTT,FWT,FMT)</a>, retrieved from 2018/12/14, <a href="https://www.cnblogs.com/rvalue/p/10120174.html" target="_blank" rel="noopener">https://www.cnblogs.com/rvalue/p/10120174.html</a>, </p></li><li><p>维基百科-快速傅里叶变换, <a href="https://zh.wikipedia.org/wiki/快速傅里叶变换" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/快速傅里叶变换</a></p></li></ol><h3 id="一些重点"><a href="#一些重点" class="headerlink" title="一些重点"></a>一些重点</h3><p>这里列出一些我在自学时一开始有困惑以及认为比较重要的知识点</p><ul><li><p>复数部分</p><p>  我们用坐标系表示复数$w=a+bi$,横坐标表示<strong>实部</strong>,纵坐标表示<strong>虚部</strong>。使用这种表示后我们又有了关于一个复数的另外两个参数:</p><ul><li><p>辐角:</p><p>  原点出发连接到一个复数$w$所在的点形成的射线与$x$轴的<strong>正半轴</strong>形成的夹角$\phi$</p></li><li><p>模长:</p><p>  原点出发连接到一个复数$w$所在的点形成的有向线段的长度,等于$\sqrt{a^2+b^2}$</p><p>两个复数相乘的法则是:<strong>辐角相加，模长相乘</strong></p><p>至于这个法则的证明见学习资料中第三篇中的复数讲解部分,不想码了。。。</p><p>根据这个法则后我们可以构造一个具有神奇性质的圆，这个圆以原点为圆心，单位长度$1$为半径(其实就是一个单位圆lah)</p><p>这个圆上的点所表示出的复数，根据上文的相乘法则,它们的幂次总是也是这个单位圆上.</p><p>由此我们引入另一个概念:$n$次单位复数根。$w^n = 1$,这个方程的复数根$w$称为$n$次单位复数根。</p><p>显然这样的根有$n$个，它们均匀分布在单位圆上，辐角为$k \frac{2 \pi}{n}$</p><p>再根据复数的指数表示法(欧拉公式), n次单位根$w^k_n = e^{\frac{k \times 2 \pi}{n} i}$</p><p>根据单位圆上的几何定义和指数定义，我们可以得出一下几个性质:</p></li><li><p>$w^0_n = w^n_n =1, w^{\frac{2}{n}}_n =-1$(点在$(-1,0)$)</p></li><li>$w^{k+\frac{2}{n}}_n = e^{(k+\frac{2}{n})\frac{2 \pi}{n}i}  = e^{k \frac{2 \pi}{n} i} \times e^{\frac{2}{n} \frac{2 \pi}{n} i}$ = $w^k_n w^{\frac{2}{n}}_n = -w^k_n$</li></ul><ul><li><p>消去定理&amp;折半定理</p><ul><li><p>消去定理</p><p>  根据指数定义,$w^{dk}_{dn} = w^k_n $</p></li><li><p>折半定理</p><p>  $(w^{k+\frac{2}{n}}_{n})^2 = w^{2k+n}_n = w^{2k}_n w^n_n = (w^k_n)^2$</p></li></ul><p>我觉得看得懂复数部分的话这些证明都不是问题</p></li><li><p><strong>库利-图基算法</strong></p><p>重头戏，分治的关键</p><p>我们将多项式次数补至$2$的次幂,对于多项式$A(x)$</p><p>$A_{even} = a_0 + a_2 x +… +a_{n-2}x^{\frac{n}{2}-1}$</p><p>$A_{odd}  = a_1 + a_3 x +… +a_{n-1}x^{\frac{n}{2}-1}$</p><p>显然$A(x) = A_{even}(x^2) +xA_{odd}(x^2)$</p><p>我们这样进行分治来进行多项式求值</p><p>$A(w^k_n) = A_{even}(w^{2k}_n) + w^k_n A_{odd} (w^{2k}_n) = A_{even}(w^{k}_{n/2}) + w^k_n A_{odd} (w^{k}_{n/2})$ </p><p>于是我们可以将$n$缩小一半分治处理,但是这样$k$是要小于$n/2$的,对于大于$n/2$的$k$我们这样处理</p><p>$A(w^{k+n/2}_{n}) = A_{even}(w^{2k+n}_{n}) + w^{k+n/2}_n A_{odd}(w^{2k+n}_{n})=A_{even} (w^{2k}_n) - w^k_n A_{odd} (w^{2k}_n) =  A_{even}(w^{k}_{n/2}) - w^k_n A_{odd} (w^{k}_{n/2})$</p></li></ul></li><li><p>插值</p><p>  其实公式推导我也不太懂。。。</p><ul><li><p>迭代版本</p><p>算法导论上讲得很清楚，我就根据它的伪代码写的，这里不多讲了</p><p>但是求位逆序置换时将每个数二进制展开的话太慢了，可以使用rvalue博客中的这种方法，并不难理解</p><p>$rev[i] = (rev[i&gt;&gt;1]&gt;&gt;1)|((i \&amp; 1)&lt;&lt;(bits-1))$</p><p>bits是总的二进制位</p></li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>递归版本:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">4e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-9</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Complex</span>&#123;</span><br><span class="hljs-keyword">double</span> real,imag;<br>Complex () &#123;real=imag=<span class="hljs-number">0</span>;&#125;<br>Complex (<span class="hljs-keyword">double</span> x,<span class="hljs-keyword">double</span> y) &#123;real=x,imag=y;&#125;<br>&#125;a[MAXN],b[MAXN],c[MAXN];<br>Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Complex &amp; x,<span class="hljs-keyword">const</span> Complex &amp; y)&#123;<br><span class="hljs-keyword">return</span> Complex(x.real+y.real, x.imag+y.imag);<br>&#125;<br>Complex <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> Complex &amp; x,<span class="hljs-keyword">const</span> Complex &amp; y)&#123;<br><span class="hljs-keyword">return</span> Complex(x.real-y.real, x.imag-y.imag);<br>&#125;<br>Complex <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> Complex &amp; x,<span class="hljs-keyword">const</span> Complex &amp; y)&#123;<br><span class="hljs-keyword">return</span> Complex(x.real*y.real-x.imag*y.imag, x.real*y.imag+x.imag*y.real);<br>&#125;<br><span class="hljs-keyword">int</span> N,M,n,nn=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">double</span> chart_sin[MAXN],chart_cos[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFT</span><span class="hljs-params">(Complex* now,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-keyword">if</span>(len==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">int</span> nlen=len/<span class="hljs-number">2</span>;<br>Complex* now0=<span class="hljs-keyword">new</span> Complex[nlen];<span class="hljs-comment">//now0[nlen],now1[nlen];</span><br>    Complex* now1=<span class="hljs-keyword">new</span> Complex[nlen];<br>Complex unit = Complex(chart_cos[len],chart_sin[len]);<br>Complex t,w = Complex(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i+=<span class="hljs-number">2</span>)&#123;<br>now0[i/<span class="hljs-number">2</span>]=now[i];<br>now1[i/<span class="hljs-number">2</span>]=now[i+<span class="hljs-number">1</span>];<br>&#125;<br>DFT(now0,nlen);<br>DFT(now1,nlen);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nlen;i++)&#123;<br>t=w*now1[i];<br>now[i]=now0[i]+t;<br>now[i+nlen]=now0[i]-t;<br>w=w*unit;<br>&#125;<br><span class="hljs-keyword">delete</span>[] now0;<br><span class="hljs-keyword">delete</span>[] now1;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IDFT</span><span class="hljs-params">(Complex* now,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-keyword">if</span>(len==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">int</span> nlen=len/<span class="hljs-number">2</span>;<br>Complex* now0=<span class="hljs-keyword">new</span> Complex[nlen];<span class="hljs-comment">//now0[nlen],now1[nlen];</span><br>    Complex* now1=<span class="hljs-keyword">new</span> Complex[nlen];<br>Complex unit = Complex(chart_cos[len],-chart_sin[len]);<br>Complex t,w = Complex(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i+=<span class="hljs-number">2</span>)&#123;<br>now0[i/<span class="hljs-number">2</span>]=now[i];<br>now1[i/<span class="hljs-number">2</span>]=now[i+<span class="hljs-number">1</span>];<br>&#125;<br>IDFT(now0,nlen);<br>IDFT(now1,nlen);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nlen;i++)&#123;<br>t=w*now1[i];<br>now[i]=now0[i]+t;<br>now[i+nlen]=now0[i]-t;<br>w=w*unit;<br>&#125;<br><span class="hljs-keyword">delete</span>[] now0;<br><span class="hljs-keyword">delete</span>[] now1;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;N,&amp;M);<br>n=N+M;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;a[i].real);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=M;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;b[i].real);<br><span class="hljs-keyword">while</span>(nn&lt;=n)&#123;<br>nn=nn&lt;&lt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=nn;i=i&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>chart_sin[i]=<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*PI/i);<br>chart_cos[i]=<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*PI/i);<br>&#125;<br>DFT(a,nn);<br>DFT(b,nn);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=nn;i++)&#123;<br>c[i]=a[i]*b[i];<br>&#125;<br>IDFT(c,nn);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,<span class="hljs-keyword">int</span>(c[i].real/nn+<span class="hljs-number">0.5</span>));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 迭代版本</p> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">4e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-9</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Complex</span>&#123;</span><br><span class="hljs-keyword">double</span> real,imag;<br>Complex () &#123;real=imag=<span class="hljs-number">0</span>;&#125;<br>Complex (<span class="hljs-keyword">double</span> x,<span class="hljs-keyword">double</span> y) &#123;real=x,imag=y;&#125;<br>&#125;a[MAXN],b[MAXN],c[MAXN];<br>Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Complex &amp; x,<span class="hljs-keyword">const</span> Complex &amp; y)&#123;<br><span class="hljs-keyword">return</span> Complex(x.real+y.real, x.imag+y.imag);<br>&#125;<br>Complex <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> Complex &amp; x,<span class="hljs-keyword">const</span> Complex &amp; y)&#123;<br><span class="hljs-keyword">return</span> Complex(x.real-y.real, x.imag-y.imag);<br>&#125;<br>Complex <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> Complex &amp; x,<span class="hljs-keyword">const</span> Complex &amp; y)&#123;<br><span class="hljs-keyword">return</span> Complex(x.real*y.real-x.imag*y.imag, x.real*y.imag+x.imag*y.real);<br>&#125;<br><span class="hljs-keyword">int</span> N,M,n,nn=<span class="hljs-number">1</span>,bin=<span class="hljs-number">0</span>,rev[MAXN];<br><span class="hljs-keyword">double</span> chart_sin[MAXN],chart_cos[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(Complex* now,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-keyword">int</span> gap=<span class="hljs-number">1</span>,ngap;<br>Complex u,t;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nn;i++)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(now[i],now[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> s=<span class="hljs-number">1</span>;s&lt;=bin;s++)&#123;<span class="hljs-comment">//length of the DFT sequence</span><br>ngap=gap,gap=gap&lt;&lt;<span class="hljs-number">1</span>;<br>Complex unit = Complex(chart_cos[gap],chart_sin[gap]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;nn;k+=gap)&#123;<span class="hljs-comment">//where to start DFT</span><br>Complex w = Complex(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;ngap;j++)&#123;<span class="hljs-comment">//iterate interval</span><br>t = w*now[k+j+ngap];<br>u=now[k+j];<br>now[k+j]=u+t;<br>now[k+j+ngap]=u-t;<br>w = w*unit;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IDFT</span><span class="hljs-params">(Complex* now,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-keyword">int</span> gap=<span class="hljs-number">1</span>,ngap;<br>Complex u,t;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nn;i++)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(now[i],now[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> s=<span class="hljs-number">1</span>;s&lt;=bin;s++)&#123;<span class="hljs-comment">//length of the IDFT sequence</span><br>ngap=gap,gap=gap&lt;&lt;<span class="hljs-number">1</span>;<br>Complex unit = Complex(chart_cos[gap],-chart_sin[gap]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;nn;k+=gap)&#123;<span class="hljs-comment">//where to start IDFT</span><br>Complex w = Complex(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;ngap;j++)&#123;<span class="hljs-comment">//iterate interval</span><br>t = w*now[k+j+ngap];<br>u=now[k+j];<br>now[k+j]=u+t;<br>now[k+j+ngap]=u-t;<br>w = w*unit;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_rev</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>&#123;<br><span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=bin;i++)&#123;<br>x=(x+(num&amp;<span class="hljs-number">1</span>))&lt;&lt;<span class="hljs-number">1</span>;<br>num=num&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> x&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(nn&lt;=n)&#123;<br>nn=nn&lt;&lt;<span class="hljs-number">1</span>;<br>bin++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nn;i++)&#123;<br>rev[i]=(rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;(bin<span class="hljs-number">-1</span>));<br><span class="hljs-comment">//rev[i]=get_rev(i);</span><br><span class="hljs-comment">//printf("%d %d %d\n",i,rev[i],bin);</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=nn;i=i&lt;&lt;<span class="hljs-number">1</span>)&#123;<br>chart_sin[i]=<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*PI/i);<br>chart_cos[i]=<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*PI/i);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;N,&amp;M);<br>n=N+M;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;a[i].real);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=M;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;b[i].real);<br>pre();<br>FFT(a,nn);<br>FFT(b,nn);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=nn;i++)&#123;<br>c[i]=a[i]*b[i];<br>&#125;<br>IDFT(c,nn);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,<span class="hljs-keyword">int</span>(c[i].real/nn+<span class="hljs-number">0.5</span>));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 快速傅里叶变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--均差及差分</title>
      <link href="/2019/08/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9D%87%E5%B7%AE%E5%8F%8A%E5%B7%AE%E5%88%86/"/>
      <url>/2019/08/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9D%87%E5%B7%AE%E5%8F%8A%E5%B7%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="均差"><a href="#均差" class="headerlink" title="均差"></a>均差</h2><blockquote><p><strong>均差</strong>（Divided differences）是<a href="https://zh.wikipedia.org/wiki/递归" target="_blank" rel="noopener">递归</a><a href="https://zh.wikipedia.org/wiki/除法" target="_blank" rel="noopener">除法</a>过程。在<a href="https://zh.wikipedia.org/wiki/数值分析" target="_blank" rel="noopener">数值分析</a>中，可用于计算<a href="https://zh.wikipedia.org/wiki/牛顿多项式" target="_blank" rel="noopener">牛顿多项式</a>形式的<a href="https://zh.wikipedia.org/wiki/多项式插值" target="_blank" rel="noopener">多项式插值</a>的系数。在<a href="https://zh.wikipedia.org/wiki/微积分" target="_blank" rel="noopener">微积分</a>中，均差与<a href="https://zh.wikipedia.org/wiki/导数" target="_blank" rel="noopener">导数</a>一起合称<a href="https://zh.wikipedia.org/wiki/差商" target="_blank" rel="noopener">差商</a>，是对<a href="https://zh.wikipedia.org/wiki/函数" target="_blank" rel="noopener">函数</a>在一个<a href="https://zh.wikipedia.org/wiki/区间" target="_blank" rel="noopener">区间</a>内的<a href="https://zh.wikipedia.org/wiki/平均" target="_blank" rel="noopener">平均</a>变化率的测量<a href="https://zh.wikipedia.org/wiki/均差#cite_note-WilsonAdamson2008-1" target="_blank" rel="noopener">[1]</a><a href="https://zh.wikipedia.org/wiki/均差#cite_note-RubySellers2014-2" target="_blank" rel="noopener">[2]</a><a href="https://zh.wikipedia.org/wiki/均差#cite_note-HungerfordShaw2008-3" target="_blank" rel="noopener">[3]</a>.                                                                                                                                                                       (维基百科)</p></blockquote><p>说实话我不知道为什么除维基百科外其他地方都是直接称为差商,在这里我还是采用维基百科的说法”均差”</p><p>给出经过若干个数据点$(xi,f(x_i))$的函数$f(x)$，对于两个数据点$x_i,x_j$，其一阶均差$f[x_i,x_j]=\frac{f(x_i)-f(x_j)}{x_i-x_j}$；对于三个数据点，其二阶均差$f[x_0,x_1,x_2]=\frac{f[x_0,x_1]-f[x_1,x_2]}{x_0-x_2}$…对于$(n+1)$个数据点,其$n$阶均差$f[x_0,x_1…x_{n-1},x_{n}]=\frac{f[x_0,x_1…x_{n-1}]-f[x_1,x_2…x_n]}{x_0-x_n}$(Chang, 2014).</p><p>在这里我们默认均差都为<strong>前向均差</strong>，所以我们需要注意减法的方向</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="性质1"><a href="#性质1" class="headerlink" title="性质1:"></a>性质1:</h4><p>$f[x_0,x_1…x_k]= \sum_{i=0}^k \frac{f(x_i)}{(x_i-x_0)(x_i-x_1)…(x_i-x_{i-1})(x_i-x_{x+1})…(x-x_k)}$      $(*)$</p><p>这个性质可以对高阶均差进行更方便的计算，在牛顿插值法中就可以运用这种计算</p><ul><li><p>证明</p><p>  首先我们需要记住定义式$f[x_0,x_1…x_{k-1},x_{k}]=\frac{f[x_0,x_1…x_{k-1}]-f[x_1,x_2…x_k]}{x_0-x_k}$，接着我们使用数学归纳法验证这条性质的正确性:</p><p>  <1>当$n=1$时,即一阶均差,根据定义$f[x_0,x_1]=\frac{f(x_0)-f(x_1)}{x_0-x_1}$</1></p><p>  此时根据性质$1$,$f[x_0,x_1]=\frac{f(x_0)}{(x_0-x_1)}+\frac{f(x_1)}{(x_1-x_0)}=\frac{f(x_0)-f(x_1)}{x_0-x_1}$,等式成立</p><p>  <2>设$n=k$阶均差时 (*)式成立</2></p><p>  则当$n=k+1$时</p><ul><li><p>等式左边记为(1)式$f[x_0…x_{k+1}]=\frac{f[x_0…x_k]-f[x_1..x_{k+1}]}{x_0-x_{k+1}}=\frac{\sum_{i=0}^{k}\frac{f(x_i)}{(x_i-x_0)…(x_i-x_{i-1})(x_i-x_{i+1})…(x_i-x_{k})}-\sum_{i=1}^{k+1}\frac{f(x_i)}{(x_i-x_1)…(x_i-x_{i-1})(x_i-x_{i+1})…(x_i-x_{k+1})}}{x_0-x_{k+1}}$</p></li><li><p>等式右边记为(2)式 </p><p>$f[x_0…x_{k+1}]=\sum_{i=0}^{k+1} \frac{f(x_i)}{(x_i-x_0)…(x_i-x_{i-1})(x_i-x_{i+1})…(x_i-x_k)}$</p><p>观察<strong>(1)式</strong>中的的两个和式,分成三个部分解决证明其与(2)式相等</p></li><li><p>对于$i=0$时, 此时只有左边的和式有$\frac{f(x_0)}{(x_0-x_1)…(x_0-x_k)(x_0-x_{k+1})}$(已经把大分母$x_0-x_{k+1}$除下来)。显然等于(2)式 $i=0$时的式子</p></li><li><p>对于$i=k+1$时，此时只有右边的和式中有$-\frac{f(x_{k+1})}{(x_0-x_{k+1})(x_{k+1}-x_{1})…(x_{k+1}-x_{k})}=\frac{f(x_{k+1})}{(x_{k+1}-x_0)(x_{k+1}-x_{1})…(x_{k+1}-x_{k})}$</p><p>(也是已经把大分母除下来了)。显然等于(2)式$i=k+1$时的式子</p></li><li><p>对于$1&lt;=i&lt;=k$时，我们对于其中的<strong>任意一项</strong>进行考虑，</p><p>左边和式$(\frac{f(x_i)}{(x_i-x_0)(x_i-x_1)…(x_i-x_{i-1})(x_i-x_{i+1})…(x_i-x_k)}-\frac{f(x_i)}{(x_i-x_1)…(x_i-x_{i-1})(x_i-x_{i+1})..(x_i-x_k)(x_i-x_{k+1})})(\frac{1}{x_0-x_{k+1}})$</p><p>$=(\frac{f(x_i)((x_i-x_{k+1})-(x_i-x_0))}{(x_i-x_0)(x_i-x_1)…(x_i-x_{i-1})(x_i-x_{i+1})…(x_i-x_k)(x_i-x_{k+1})})(\frac{1}{x_0-x_{k+1}})$</p><p>$=\frac{f(x_i)}{(x_i-x_0)(x_i-x_1)…(x_i-x_{i-1})(x_i-x_{i+1})…(x_i-x_k)(x_i-x_{k+1})}$ </p><p>显然对于(2)式中和式任意的第$i$项($1&lt;=i&lt;=k$)</p><p>因此$k+1$阶均差依旧满足此性质</p><p>由<1><2>知该性质成立</2></1></p></li></ul></li></ul><h4 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h4><p>调整点的顺序,均差不会改变。称其具有轮换对称性 (Chang, 2014)</p><p>$e.g.$  $f[x_0,x_1,x_2]=f[x_1,f_2,x_0]$</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><p>维基百科, <em>均差</em> , from 维基百科 on website,</p><p> ​                retrieved from April/04/2019, <a href="https://zh.wikipedia.org/wiki/%E5%9D%87%E5%B7%AE" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%9D%87%E5%B7%AE</a></p></li><li><p>Leon Chang (2014) , <em>Newton插值法</em> , from Leon’s Blog on website, </p><p>​                retrieved from Dec/06/2014, <a href="http://leonfocus.github.io/newton-interpolation/" target="_blank" rel="noopener">http://leonfocus.github.io/newton-interpolation/</a> </p></li></ol><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>咕</p>]]></content>
      
      
      <categories>
          
          <category> calculus </category>
          
          <category> maths </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 插值 </tag>
            
            <tag> calculus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paper rings , Onion rings</title>
      <link href="/2019/08/25/Paper-rings-Onion-rings/"/>
      <url>/2019/08/25/Paper-rings-Onion-rings/</url>
      
        <content type="html"><![CDATA[<p>标题只是乱起的 , 我这天马行空的脑袋不知怎么同时蹦出Taylor超好听的新歌Paper rings和Super Snacks里的洋葱圈.</p><p>“七月二十二日我坐着飞机，飞过了故乡，跨过了汪洋来到了这座陌生的城市——新加坡</p><p>数着日历上的数字，我才发现已经在这里生活了一个多月，闭上眼睛回想，坐上。。。”</p><p>打住！这不是你的上一篇博客吗？？？</p><p>Anyway,我已经在这里生活了一个多月，所谓cultural shock并没有在我身上有明显的体现，除了想念我妈做的米粉肉，红烧肉和我爸亲手做的馒头，花卷——-也许舌尖的味道是最难以忘怀的，就像很早之前不知在哪看过的情节:一对情侣亲吻时女生总是含上一颗草莓，她解释说这样他就能记住和她的草莓味的吻。</p><p>味蕾的充实也许可以一时冲淡乡愁，却无法消除心中的空荡。幸运地是，我在这里交到了不少朋友，从最开始和我一同从南昌来的xpz , 慢慢到来自河北，湖北，浙江。。。等祖国各省来的伙伴，他们操着不同的口音，有时拿着自个的家乡话开着玩笑，吹着家乡的美食，骨子里已经被烙上了故乡的痕迹。和他们在一起，心里的愁绪也便突然消失了，也是和他们，我走过了这在狮城的第一月。</p><p>还记得最早的Orientation Weeks中，和我的蓝组伙伴们一起探索，一起游玩，一起努力。有着许多心事，也被日常的活动占据。</p><p>正式开学之后，发现数学并没有那么难，C programming更是划水，英文的lecture作好预习其实一点也不难懂，唯独在英语上发现了自己深深的不足和性格上的腼腆</p><p>除了收获新知识之外，我也和这里的许多人一样，也许摆脱了各种各样的束缚，开始改变自己，突破心中的高墙：</p><p>在英语课上勇敢地举起了手当上了Group的monitor；战胜心中的胆怯去追求自己的想法；开始戒掉电脑游戏转为日常学习。。。</p><p>总而言之，这一个月我活着体面，充实，欢乐甚至甜蜜。低落的时刻不要忘记你要变得tough , 膨胀的时候不要忘记be simple &amp; humble ，这是我这一个月来的体验。期待新的一月！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂感 </tag>
            
            <tag> 狮城生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homesick or Heartsick</title>
      <link href="/2019/08/10/Homesick-or-Heartsick/"/>
      <url>/2019/08/10/Homesick-or-Heartsick/</url>
      
        <content type="html"><![CDATA[<p>七月二十二日我坐着飞机，飞过了故乡，跨过了汪洋来到了这座陌生的城市——新加坡</p><p>数着日历上的数字，我才发现已经在这里生活了19天，闭上眼睛回想，当时坐上MOE大巴时的懵懂，好奇的感受还萦绕在脑海</p><p>新加坡的气候与离乡时江西的气候相比除了更潮，并无多大差异，我也很快地适应了；而这里的每日饮食(多半是强制餐)也并没有想象中那么难以接受，实际上我也是是一位对饮食不那么挑剔的人；交际上呢，周围都是说着普通话的SM2同届学生，虽然自认性格奇怪，也认识了一些朋友。总而言之吧，已经开始习惯在这里安心的生活，不至于难受地活着</p><p>尽管如此，我的心中空荡荡的，异常的匮乏，只有和少数人待在一起时才不会有这种感觉。离开了生于斯，长于斯的故土，来到一处与之没有一点连接的异乡，与亲人，好友之间的羁绊横跨了大海与高山，我想有这种孤身一人的感觉也很正常吧。不久前和挚友在QQ上畅聊了许久，如同往日在寝室里那样，向他倾述了我的愁绪与心情，与他挂断时突然有一种想哭的冲动。也许我就是这么感性，或者说是内心柔弱的一个人吧，这也是我特别喜欢海边的卡夫卡的一个原因:”从今开始，无论如何你得成为世界上最坚强的十五岁少年。”那个叫乌鸦的男孩说道。</p><p>那个叫乌鸦的男孩不仅对着田村卡夫卡说话,也对我这么说道。我得变得坚强(tough)，这是我内部容器对抗这个外部世界的盔甲。</p><p>当时内心形而上的坚强不足以解决形而下的困顿，我决定开始读书。尝试几次电子书发现效果极差，于是干脆破费买了几本纸质书来读，当然，不能少了Kafka On the Shore。还包括一本已有耳闻，但在大陆被禁的书大江大海一九四九。</p><p>不管怎样，希望我能在这里交到更多朋友，包括结识更多大佬。有五六个性格相似，趣味相投的人那就再好不过了</p><p>(现在感觉已经找到一两个了)</p><p>Looking forward to every new tomorrow and save every second!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂感 </tag>
            
            <tag> 狮城生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Farewell,Fare thee well</title>
      <link href="/2019/07/21/Farewell-Fare-thee-well/"/>
      <url>/2019/07/21/Farewell-Fare-thee-well/</url>
      
        <content type="html"><![CDATA[<p>明天就要踏上通往异国的班机，迎接一个新的开始，也同时意味着我高中生涯的结束，或者更广泛地，在这片我热爱的土地上生活的告一段落。每每想到这，总是忍不住鼻子一酸，想落下眼泪(也许我就是这么感性)，回想过往，有那么多的欢声笑语，同样多的泪水，同样多的遗憾，同样多的无聊。这些都无法延续，只是化成往事，徒留感叹。</p><p>我总是想起很早很早以前在读者上看到的一篇文章，标题大概是那些擅于告别和不擅于告别的人，而我就属于不擅于告别的人，想的太多却做的太少，想表达真挚的留恋与感谢却不自觉地表现得风清云淡，最后黯然离去，在未来某个夜晚，又在被窝里独自留下回忆的泪</p><p>真的爱你们，江科的同学和老师，我的家人，还有许许多多带给我感动的人</p><p>Farewell</p>]]></content>
      
      
      <categories>
          
          <category> 最后的时光 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1189B-NumberCircle-趣味题</title>
      <link href="/2019/07/09/CF1189B-NumberCircle-%E8%B6%A3%E5%91%B3%E9%A2%98/"/>
      <url>/2019/07/09/CF1189B-NumberCircle-%E8%B6%A3%E5%91%B3%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>原题面:</p><p><a href="http://codeforces.com/contest/1189/problem/B" target="_blank" rel="noopener">http://codeforces.com/contest/1189/problem/B</a></p><p>中文翻译:</p><p><a href="https://www.luogu.org/problemnew/show/CF1189B" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF1189B</a></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>突然发现太久没写题解了(其实是没写什么题)，思维能力感觉差了好多QAQ</p><p>题目要求我们做的非常简单，但一开始毫无头绪</p><p>突然想到按照化环为链的想法试图将问题简化一下</p><p>发现如果想要构造一个满足题目要求的<strong>序列</strong>非常简单，我们只要将原序列排序之后就行了(显然)</p><p>但是对于环上的情况就不一定满足，设从小到大排序后的数组为$b[]$,$b[1]+b[n-1]$也许并不能大于$b[n]$</p><p>,这时观察题中样例，猜测如果我们将$b[n-1]$和$b[n]$调换一下顺序是否使问题可行，答案是肯定的.</p><p>调换顺序后受影响的只有$b[1],b[n-1],b[n],b[n-2]$.现逐个证明这种做法的正确性</p><ul><li><p>显然$b[n-1]&gt;=b[1]$故$b[n-1]+b[2]&gt;b[1]$</p></li><li><p>$b[n]&gt;=b[n-1]$故$b[n]+b[1]&gt;b[n-1]$</p></li><li><p>$b[n-2]&lt;=b[n]$,故$b[n]+b[n-3]&gt;b[n-2]$</p></li><li><p>最后我们只需判定一下是否$b[n-1]+b[n-2]&lt;=b[n]$</p><p>若是，则此数列无法满足要求</p><p>反之能满足要求</p></li></ul><p>所以做法就很简单了,将输入数列从小到大排序，然后将$b[n]$与$b[n-1]$互换判定一下就好了(提前判定是否可行当然可以)</p><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><p>CF官方题解中说此题有$O(n)$做法，现在还mo有想到。。。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,a[maxn],b[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);<br>sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>b[<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];<br>b[n<span class="hljs-number">-1</span>]=a[n];<br>b[n]=a[n<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n<span class="hljs-number">-2</span>;i++)&#123;<br>b[i]=a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<span class="hljs-keyword">if</span>(b[i]&gt;=b[i<span class="hljs-number">-1</span>]+b[i+<span class="hljs-number">1</span>])&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(b[<span class="hljs-number">1</span>]&gt;=b[<span class="hljs-number">2</span>]+b[n])&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">if</span>(b[n]&gt;=b[<span class="hljs-number">1</span>]+b[n<span class="hljs-number">-1</span>])&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"YES"</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,b[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Stillness Of The Wind</title>
      <link href="/2019/06/14/The-Stillness-Of-The-Wind/"/>
      <url>/2019/06/14/The-Stillness-Of-The-Wind/</url>
      
        <content type="html"><![CDATA[<p>我的假期过的这将近二十天中，总有一种隐隐约约的奇怪感觉，感觉心中十分的空虚，感觉生活十分的乏味，感觉整个人跟坏掉了一样。我被这种感觉侵蚀着，也正是因为如此，在家中的情绪一直很糟糕。终于在前几天，我下定决心不能这样下去了，索性再次返校学习，白天在信息教室，晚上回寝室睡。。。感觉有点像当时听课时的生活，但是现在只有我只身一人。</p><p>返校后收获了很多惊喜：第一天中午的邂逅和那一段话，身边人写的同学录。。。当读着同学录上写着话，刚从嘴角挤出的一丝微笑转瞬又化成了心中的伤感。是啊，离别真的不远了，我却还是一副傻乎乎的样子，没有做好一点准备，离别就这么来了，伴随着夏日的风。有时我在机房里做了太久，就下楼在空旷的操场上走走，回忆发生在这片校园里的往事，真后悔我没有记日记的习惯，虽然脑海里有着许许多多回忆，但是总感觉有更多更多美好的瞬间被遗忘在这儿，这处让我笑，让我哭，让我成长，让我回忆的校园。</p><p>想来我一直是一个不擅长告别的人，印象中的告别无一不是带着仓促与遗憾，徒留愧疚与伤感。希望这流动的风停下，让我好好地学会一次告别。</p><p><img src="https://i.loli.net/2019/06/14/5d03bbe67840b24015.jpg" alt="操场一角"></p><p><img src="https://i.loli.net/2019/06/14/5d03bbe70357189879.jpg" alt="通往食堂的长长斜坡"></p>]]></content>
      
      
      <categories>
          
          <category> 最后的时光 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂感 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端入坑#1-PHP入门</title>
      <link href="/2019/06/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E5%9D%91-1-PHP%E5%85%A5%E9%97%A8/"/>
      <url>/2019/06/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E5%9D%91-1-PHP%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h3><p>之前经常瞎搞些前端的东西，也想好好搭一个服务器，于是趁这段时间学一学</p><p>买了本人民邮电出版社的《PHP和MySQL WEB应用开发》来看，感觉写得不够全，很多东西没有解释也有很多东西没讲，而且比较多的JavaScript内容，学得比较累</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装和配置Apache-HTTP-Server"><a href="#安装和配置Apache-HTTP-Server" class="headerlink" title="安装和配置Apache HTTP Server"></a>安装和配置Apache HTTP Server</h4><p>这个不多讲，那本书上讲得蛮仔细的，就是有一个问题</p><p>如果你监听的是8081端口，那么你在浏览器里打开的应该是<code>localhost:8081</code></p><h4 id="安装和配置PHP"><a href="#安装和配置PHP" class="headerlink" title="安装和配置PHP"></a>安装和配置PHP</h4><p>书上也讲得很仔细</p><h4 id="编辑-amp-编译"><a href="#编辑-amp-编译" class="headerlink" title="编辑&amp;编译"></a>编辑&amp;编译</h4><p>虽然我也按书上安了个eclipse,但是我发现PHP非常方便的一点就是你在本地编辑完代码后，可以直接到<code>localhost</code>上查看，不用在IDE中编译之类的，缺点就是不会有报错信息</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul><li><p>PHP需要一个开始标记<code>&lt;?PHP</code>和结束标记<code>?&gt;</code>,每条语句之间用<code>;</code>隔开</p><figure class="hljs highlight PHP"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?PHP</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">"Hello World!"</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>输出<code>echo()</code></p><p>可以输出字符串<code>echo(&quot;233&quot;)</code>,也可以输出HTML标记如<code>echo(&lt;BR&gt;)</code></p></li><li><p>注释和C++一样<code>//</code>用来单行注释，<code>/**/</code>用来多行注释，同时还可以用<code>#</code>来单行注释</p></li><li><p>声明变量不用像C++一样还得注明数据类型，直接像python那样用就好了,但是前面要加一个标识符<code>$</code>表明这是一个变量</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?PHP</span><br>    $a=<span class="hljs-number">233</span>;<br>$b=<span class="hljs-string">"TYLOO UP!"</span>;<br>    $c=<span class="hljs-keyword">true</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>同样的我们可以前面加一个<code>&amp;</code>来取址</p></li><li><p>运算符和表达式和常用语句</p><p>和C几乎一模一样</p></li></ul><h3 id="创建和编辑表格"><a href="#创建和编辑表格" class="headerlink" title="创建和编辑表格"></a>创建和编辑表格</h3><p>坑</p><h3 id="读取上传的表格信息"><a href="#读取上传的表格信息" class="headerlink" title="读取上传的表格信息"></a>读取上传的表格信息</h3><p>坑</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23rd江西省SM2项目RyeCatcher面试经历</title>
      <link href="/2019/05/27/23rd%E6%B1%9F%E8%A5%BF%E7%9C%81SM2%E9%A1%B9%E7%9B%AERyeCatcher%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/05/27/23rd%E6%B1%9F%E8%A5%BF%E7%9C%81SM2%E9%A1%B9%E7%9B%AERyeCatcher%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>$23^{rd}$ 江西 $RyeCatcher_{A \ Crow  \ In \ the \ Rye}$</p><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>面试完那天下午就回校上课,晚自习边写作业边玩手机,虽然在竞赛生涯已经见过大风大浪,心情还是有点小紧张</p><p>最后在22:06时,dsb学长在群里说三人全过有点惊讶,打电话确认后就跑路回家了</p><p>今天领完协议又赶回学校考会考，回到家时已经累成狗了,开始写面经没多久，结果又被告知第二天要参加学校的颁奖仪式，还要发表一个讲话，于是又开始码演讲稿，终于在ddl前搞完了。</p><p>第二天颁奖仪式为什么要戴大红花啊喂！但是虽然是第一次在台上对着全校师生讲话，觉得还蛮成功。</p><p>然后就每天都写一点面筋，想起什么就写什么，因为记性不好，只记得一些问题，<strong>具体流程有遗漏,细节忘了一些,问题顺序也可能不对</strong>，文笔很烂，扯得废话还多，请见谅</p><h3 id="Before-The-Interview"><a href="#Before-The-Interview" class="headerlink" title="Before The Interview"></a>Before The Interview</h3><p>今年面试是在南昌市外国语九龙湖校区，面试时有五个人在里面，包括一位打字员姐姐(笔试时见过)，两位MOE官员，一位来自NTU的蔡教授(口音略重。。。他的问题我都是一知半”解”)，一位来自NUS教授CS(Computer Science)的黄教授(中文英文都超好，人也很好!!!)。由于某学校两人缺考，省教育厅的人催我们赶紧来怕面试提前，但是新方还是人性化的按原计划进行，于是在那里等了蛮久。说实话等的时候还是蛮紧张的，快到我的时候就不断喝水，哼歌抖腿（真的有效！！！），哼的是NeckDeep的_Where Do We Go When We Go_</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=500392402&auto=1&height=66"></iframe><p>新方是按铃叫人，轮到叫我的铃响起时，心态其实还好，班主任zgf老师陪我走到门前，我敲了两下门（谭老师的教诲），说了句”May I come in?”，但 并无应门，就试着把门打开。尴尬的是我左边拉了两下门把，又右边拉了两下门把都毫无反应，最后还是打字员姐姐帮我开的门（-_-感觉自己太憨了。进门后先跟教授打个招呼，然后就按打字员姐姐指示把包放在门边的一把椅子上，然后MOE大妈说”Take a seat please”,于是就在他们对面椅子上坐下，面试就开始啦</p><h3 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h3><p>面试时的情形是这样的</p><div class="table-container"><table><thead><tr><th style="text-align:center">打字员姐姐T</th><th>NTU口音大爷Prof.蔡Cai</th><th style="text-align:right">MOE大妈黄司长Huang</th><th>NUS教CS的Prof.黄Huang</th><th>MOE胡姓官员Hu</th></tr></thead><tbody><tr><td style="text-align:center"></td><td></td><td style="text-align:right"></td><td></td><td></td></tr><tr><td style="text-align:center"></td><td></td><td style="text-align:right">我L</td><td></td></tr></tbody></table></div><p>中间隔了张又长又宽的木桌</p><p>刚坐下没多久，Prof.蔡就问我了”So do you prefer to put your shirt out than put in?”</p><p>L(懵逼):”Ahh…Yes”</p><p>Huang大妈:”Do your school allow you to do so?”</p><p>L:”Yes,actually,a lot of students put their shirts out”</p><p>Prof.Huang:”That makes them more cool~”</p><p>L(笑):”Yeah,I think so”</p><p>众人大笑,我也不紧张了</p><p>然后问了一些个人问题我忘了。。。</p><p>MOE Huang:”Where is your hometown?”</p><p>L:”My hometown is Shangrao,a city not far way from Nanchang.”</p><p>MOE Huang:”How far?”</p><p>L:”I guess it takes about an hour or so to get there by train.”</p><p>MOE Huang:”You live in the school,right?(应该是看了那张老师写的评语)So did you go home every week by train?”</p><p>L(笑):”Well…now my parents have moved to Nanchang so actually I can go home every week.”</p><p>MOE Huang:”Do you play computer games?”</p><p>L(笑):”Yes.”</p><p>MOE Huang:”What kind of computer games do you like?”</p><p>L:”Shooting games,I think.”</p><p>众人自言自语:”Ahh…shooting games.”</p><p>Prof.Cai:”How often do you play computer games.”</p><p>L:”About one or two hours a week at home.”</p><p>Prof.Huang:”You have a lot of time at home,why do you play it only for one or two hours?”</p><p>L(有点慌了):”Because I also have many tasks to do at home.So my time for playing video games is limited.”</p><p>Prof.Cai:”So you don’t play computer games at school,right?”</p><p>L:”Yes,of course.My school don’t allow me to play computer games there.”</p><p>Prof.Huang:”You mean you are not allowed to use computers at school?”</p><p>L:”No,no,no.I can use computers at school since I am in the school team of Olympics of Informatics.But I don’t play computer games at school because at school computers are tools for studying.”</p><p>然后又问了我一些信息学竞赛内容,可能比较特殊不具参考性就不写了,其中Prof.Cai问我这个一等奖只是”province level”吗。我说是的，但是我也参加过”national level final contest but did bad because I made a stupid mistake and missed a medal.”接着就问我有什么感受又如何解决这种trivial的问题。。。大致就是自己反思总结，向同学老师寻找并帮助之类的</p><p>MOE Huang:”OK,We know you are interested in computer.Your major choices are all about computers,so what do you want to do in six years”</p><p>L:”Well,I want to be a teacher.”</p><p>(众人惊)然后问了什么我忘了QAQ,大致就是问为什么,然后我就说对当teacher很感兴趣，当时准备信息学奥赛时互相教学算法和数据结构的.Prof.Huang这时候就说他是NUS教CS的</p><p>然后Prof.Huang就问了一个面膜时常见的问题啦0^0——“So what do you think is most important to be a teacher?”</p><p>L(我突然脑抽了):”In my view.First,I think a teacher should be patient,he should be patient with students if they have any problems.Second,a teacher also need to be inspiring.Teachers,I think,are facilitators of the study,rather than directors of the students’ study(手动@Liam).They should inspire their students to get the knowledge they want,not just simply teach them knowledge.And third,a teacher must be devoted to this career.”第三点还说了一些但是忘记了</p><p>Prof.Huang(笑):”OK,then what do you think is the most important.”</p><p>L(意识到之前脑抽了):”Emm…I think is inspiring.”</p><p>然后我记得他接着还问了我一个教学相关的问题。。。忘了问的是什么了，只记得回答是”Well,when I was preparing for the Olympics of Informatics,I taught my teammates graph theories problem.And I used illustrations to let them understand how the Prim Algorithm works.”</p><p>Prof.蔡:”#%*&amp;@#inspiring&amp;%#teaching?”</p><p>L(微笑变得略微尴尬):”May I beg you pardon?”</p><p>尴尬的是我pardon三连后才知道他想问的是在我的教学过程中有没有inspiring的例子,就是有没有inspiring的老师</p><p>L(嗦泡开始):”To prepare for the competition,I have to go to other schools for better training.And I remember when I was taking courses in Beijing,there was a teacher who taught us Dijkstra Algorithm.But at first he explain the algorithm of Prim and the way to generate a Minimum Spanning Tree.Then he let us to think of a similar way to solve the Single Source Shortest Path problem by generating a spanning tree.And I think it’s a inspiring way to teach us the Dijkstra algorithm.”</p><p>教授点头</p><p>Prof.蔡:”It seems that you often go to other province to take courses,right?”</p><p>L:”Yes,that’s right.”</p><p>Prof.蔡(追问):”So…$%#how often&amp;*?And did you go there with your parents,or your teammates you mentioned?”</p><p>L:”Emm…(想了会)I think when I was preparing for the Olympics of Informatics,I want out for training about once every two months on average.And I went there with my teammates so we often help each other and take care of ourselves.”</p><p>MOE Hu:”So which provinces have you been?”</p><p>L:”Beijing,Guangdong and Hu’nan”(脑抽忘说还去过浙江了)</p><p>Hu:”So do you think there is difference between Beijing and Guangdong?”</p><p>L(懵逼？为啥问这种无厘头问题啊，只好微笑硬着头皮答):”OK,First,environment in Guangdong is better than it in Beijing.The air there is clean and the sky is always blue and there are more trees in Guangdong.Second,Guangdong is hotter than Beijing and not so that dry like Beijing.Third,I think people in Guangdong are more friendly because the students there are willing to help us and explain the solutions very carefully and with patience.”</p><p>然后后面我感觉自己就没说什么话了。。。基本都是Prof.Huang自己说了</p><p>记得他讲了到时我可以在community里叫他们计算机,然后Prof.Cai开玩笑说要先教老年人怎么用智能机，然后他们又大笑起来，我也跟着笑hhh。后面黄教授又讲了好多相关内容，我就记得他说一个自闭症患者（他是用中文讲的）在计算机这块特别专心。他讲这些话我就点点头说一话附和一下。</p><p>接着MOE黄大妈就问我平时体育锻炼嘛?</p><p>L(终于是个正常对话了):”I play bedminton with my friends about four times a week,and I always take jogging on weekdays.”</p><p>众人点头，Prof.Cai:He does need more exercise(看我这么瘦).</p><p>接下来Prof.Huang就问了我关于羽毛球的问题，细节忘了，记得扯了一下团队配合的，幸好之前准备了一些关于羽毛球的</p><p>最后问我有什么问题,我问了能不能在预科参加ICPC contest.Prof.Huang说NUS确实每年会准备这样的比赛，还给我介绍了一下流程，但是他说NUS在World Final成绩不太好，然后众人笑，我也笑了（今年好像是并列62名）。但是预科的时候好像不能</p><p>第二个问题我就问了有没有philosophy之类的，他们说有这样的专业，也有club。问我看过什么哲学方面的书，我说只是最近比较感兴趣，没看多少,看了两本哲学随笔by Zhou Lian,a professor of Renming University,还有_A brief history of philosophy_ by Bertrand Russel.然后一个人问我为什么对philosophy感兴趣，我回答:”It can help me understand this world better and it can help us to find a solution to many problems.” Prof.Cai就叫我举个例子,我就说我们的意识到底是不是真实存在的</p><p>MOE黄大妈就开玩笑告诉我到了新加坡不要整天钻研chicken and egg which is first这样的问题，我也笑着说肯定不会.</p><p>面试就这么顺利结束了！个人感觉是不错的。</p><p>一出来跟家长还有老师聊了一下就自己一个人到楼下放松了</p><p>感觉我给Prof.Huang留下印象比较深刻。。。颁奖仪式上肯定了我当老师的想法，跟我唠嗑几句，问我要不要加他微信还说希望在NUS见到我</p><h3 id="Some-Words"><a href="#Some-Words" class="headerlink" title="Some Words"></a>Some Words</h3><ul><li><p>面试难免会紧张，自己想办法调节吧，面试官真的很nice，你就想象跟陌生朋友说话就好了</p><p>就像颁奖仪式后一位萍乡大佬对Prof.Huang说的：聊着聊着就忘了自己其实在面试</p></li><li><p>面试中最重要的是做自己，但是除非你特别会嗦泡，能张口就来，建议还是要做很多准备</p></li><li><p>准备的问题从自身的方面不断拓展，而且一定要能够凸显出你的特点，这也是很关键的</p><p>记得22届有个EXIA学长写的面经提了许多，可以参考一下</p></li><li><p>面膜也是很重要的，还可以找个人用英语聊天来锻炼</p><p>平时也可以自言自语，或是假想有个人问你问题你来回答</p></li><li><p>老师写的评语比较关键，他们会事先看，对你有个大概的了解，像我提到的住在学校，信息学竞赛，体育锻炼全问到了</p></li><li><p>最后，心态放宽吧，这一次机会能够改变你的人生，但它并不是你的全部。最后无论成功与否，它都没有否定你的可能性，最重要的是，脚踏实地地走好脚下的路</p></li></ul><h3 id="SPECIAL-THANKS-TO"><a href="#SPECIAL-THANKS-TO" class="headerlink" title="SPECIAL THANKS TO"></a>SPECIAL THANKS TO</h3><p>江科<script type="math/tex">cxy,dsb,ab,ljw</script>学长们 </p><p>我的室友<script type="math/tex">jyh,djc</script></p><p>高二信息组成员:<script type="math/tex">hzw</script>老师,<script type="math/tex">jyh,ljy</script></p><p>食堂思想家主席,蒋公</p>]]></content>
      
      
      <categories>
          
          <category> SM2 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SM2 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>省选前模板复习</title>
      <link href="/2019/05/10/%E7%9C%81%E9%80%89%E5%89%8D%E6%A8%A1%E6%9D%BF%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/05/10/%E7%9C%81%E9%80%89%E5%89%8D%E6%A8%A1%E6%9D%BF%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><p>也许是OI生涯最后一场正式比赛了，说是省选前模板，其实都是非常基础的东西，穿插了英文介绍和部分代码实现</p><p>祝各位参加JXOI2019的都加油吧</p><p>也希望今年JX能翻身,在国赛中夺金</p><p>Some Words:</p><p>property n. [C] (数学)性质</p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><p>见<a href="https://rye-catcher.github.io/2019/05/09/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93-1/">数学知识小结</a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="KMP算法Knuth-Morris-Pratt-Algorithm"><a href="#KMP算法Knuth-Morris-Pratt-Algorithm" class="headerlink" title="KMP算法Knuth-Morris-Pratt Algorithm"></a>KMP算法Knuth-Morris-Pratt Algorithm</h3><p>KMP算法,又称模式匹配算法,是用来在一个文本串(text string)<code>s</code>中找到所有模式串(pattern)<code>w</code>出现的位置.</p><p>它是通过当失配(mismatch)发生时,模式串本身能提供足够的信息来决定下一个匹配能从哪里开始,这样就可以避开对前面已经匹配好的字符的再次遍历检查(即暴力做法)</p><p>“In <a href="https://en.wikipedia.org/wiki/Computer_science" target="_blank" rel="noopener">computer science</a>, the <strong>Knuth–Morris–Pratt string-searching algorithm</strong> (or <strong>KMP algorithm</strong>) searches for occurrences of a “word” <code>W</code> within a main “text string” <code>S</code> by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters.”</p><p>来源: <a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" target="_blank" rel="noopener">维基百科</a></p><p>我们需要构造一个函数<code>next</code>,<code>next[n]</code>表示的是模式串<code>w</code>中以第n个字符结尾的<strong>非前缀子串(substring)</strong>与<code>w</code>的<strong>前缀(prefix)</strong>能够匹配的最大长度</p><p>具体实现过程与思路见<a href="https://oi-wiki.org/string/prefix-function/" target="_blank" rel="noopener">OI WIKI</a></p><p>简单说一下比较难懂的在<code>w[i]!=w[j+1]</code>,为什么指针<code>j</code>跳向<code>next[j]</code></p><p>显然<code>w[1~j]</code>是等于<code>i-1</code>前<code>j</code>个字母的字串的,但是我们比较发现<code>w[j+1]!=w[i]</code></p><p>我们想要的新的<code>j</code>是使得除了第$j+1$个字符需要与<code>w[i]</code>比较外,<code>w[1]~w[j]</code>的前缀等于<code>i-1</code>(包括<code>i-1</code>)前<code>j</code>个字母的<strong>后缀(suffix)</strong></p><p>又由于<code>i-1</code>前任意<code>k(k&lt;=next[j])</code>个字符后缀等于<code>next[j]</code>前任意<code>k</code>个字母的后缀</p><p>又因为<code>w[1~next[next[j]]]</code>等于<code>next[j]</code>前<code>next[next[j]]</code>长度的后缀,即等于<code>i-1</code>前<code>next[next[j]]</code>长度的后缀</p><p>所以新的<code>j=next[j]</code>就满足上述条件</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">n=<span class="hljs-built_in">strlen</span>(a+<span class="hljs-number">1</span>);m=<span class="hljs-built_in">strlen</span>(b+<span class="hljs-number">1</span>);<span class="hljs-comment">//a is the text string</span><br>ne[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//next</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>;i&lt;=m;i++)&#123;<br>     <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;b[i]!=b[j+<span class="hljs-number">1</span>])j=ne[j];<br>     <span class="hljs-keyword">if</span>(b[i]==b[j+<span class="hljs-number">1</span>])j++;<br>     ne[i]=j;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>     <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;a[i]!=b[j+<span class="hljs-number">1</span>])j=ne[j];<br>     <span class="hljs-keyword">if</span>(a[i]==b[j+<span class="hljs-number">1</span>])j++;<br>     fail[i]=j;<br>     <span class="hljs-keyword">if</span>(fail[i]==m)&#123;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,i-m+<span class="hljs-number">1</span>);<br>     fail[i]=<span class="hljs-number">1</span>;<br>     j=ne[j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="哈希Hash-Function"><a href="#哈希Hash-Function" class="headerlink" title="哈希Hash Function"></a>哈希Hash Function</h3><p>不想中文介绍了QAQ,OI中常用于数据的<strong>离散化(Discretization)</strong></p><p>关于更多<a href="https://rye-catcher.github.io/2018/07/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%A0%E7%A7%8D%E7%A6%BB%E6%95%A3%E5%8C%96%E6%96%B9%E5%BC%8F/">离散化内容</a></p><p>但是哈希函数有可能发生<strong>哈希冲突(Hash Collision)</strong>,为了避免这种情况,我们可以采取双哈希或是拉链</p><p>“A <strong>hash function</strong> is any <a href="https://en.wikipedia.org/wiki/Function_(mathematics" target="_blank" rel="noopener">function</a>) that can be used to map <a href="https://en.wikipedia.org/wiki/Data_(computing" target="_blank" rel="noopener">data</a>) of arbitrary size onto data of a fixed size. The values returned by a hash function are called <strong>hash values</strong>, <strong>hash codes</strong>, <strong>digests</strong>, or simply <strong>hashes</strong>. Hash functions are often used in combination with a <a href="https://en.wikipedia.org/wiki/Hash_table" target="_blank" rel="noopener">hash table</a>, a common <a href="https://en.wikipedia.org/wiki/Data_structure" target="_blank" rel="noopener">data structure</a> used in computer software for rapid data lookup. Hash functions accelerate table or database lookup by detecting duplicated records in a large file. One such application is finding similar stretches in DNA sequences. They are also useful in <a href="https://en.wikipedia.org/wiki/Cryptography" target="_blank" rel="noopener">cryptography</a>.”</p><p>来源:<a href="https://en.wikipedia.org/wiki/Hash_function" target="_blank" rel="noopener">维基百科</a></p><p>字符串哈希我一般用<a href="https://www.cnblogs.com/Rye-Catcher/p/8723665.html" target="_blank" rel="noopener">Rabin-Karp Hash</a>,更多相关内容在链接里</p><figure class="hljs highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br>ull x,hash_table[maxn];<br><span class="hljs-keyword">char</span> str[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">make_hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;str[i];i++)&#123;<br>        x=x*<span class="hljs-number">131</span>+a[i]<span class="hljs-number">-31</span>;<br>        hash_table[i]=x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于两个串,我们可以将它们按上述方法<strong>映射(mapping)</strong>到哈希表后通过二分(binary serach)或是倍增(QAQ这个英语怎么说啊)来快速匹配</p><p>主要根据这个可以$O(1)$地判断两个字串是否相等</p><p>   $w_{str_{i,j}}$ </p><p>   $=($ $a_i$ $p^{j-i}$+$a_{i+1}$ $p^{j-i-1}$+…+$a_{j}$ $p^0$)</p><p>   $=$ $w_{pre_{j}}$ $-$ $w_{pre_{i-1}}$ $p^{j-i+1}$</p><h2 id="数据结构Data-Structure"><a href="#数据结构Data-Structure" class="headerlink" title="数据结构Data Structure"></a>数据结构Data Structure</h2><h3 id="栈Stack"><a href="#栈Stack" class="headerlink" title="栈Stack"></a>栈Stack</h3><p>栈是只有一端能进出元素的线性数据结构,所以它是<strong>后进后出(LIFO,Last In First Out)</strong>的</p><p>有<strong>入栈(push)</strong>与<strong>出栈(pop)</strong>两种基本操作</p><p>“In <a href="https://en.wikipedia.org/wiki/Computer_science" target="_blank" rel="noopener">computer science</a>, a <em>stack</em> is an <a href="https://en.wikipedia.org/wiki/Abstract_data_type" target="_blank" rel="noopener">abstract data type</a> that serves as a <a href="https://en.wikipedia.org/wiki/Collection_(computing" target="_blank" rel="noopener">collection</a>) of elements, with two principal operations:</p><ul><li><strong>push</strong>, which adds an element to the collection, and</li><li><strong>pop</strong>, which removes the most recently added element that was not yet removed.</li></ul><p>The order in which elements come off a stack gives rise to its alternative name, <strong>LIFO</strong> (<strong>last in, first out</strong>). Additionally, a <a href="https://en.wikipedia.org/wiki/Peek_(data_type_operation" target="_blank" rel="noopener">peek</a>) operation may give access to the top without modifying the stack.<a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type" target="_blank" rel="noopener">[1]</a>#cite_note-1)The name “stack” for this type of structure comes from the analogy to a set of physical items stacked on top of each other, which makes it easy to take an item off the top of the stack, while getting to an item deeper in the stack may require taking off multiple other items first.<a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type" target="_blank" rel="noopener">[2]</a>#cite_note-clrs-2)”</p><p>来源:<a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type" target="_blank" rel="noopener">维基百科</a>)</p><h3 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h3><p>队列是一种”先进先出(FIFO,First In Fitst Out)”的线性数据结构.一般元素从右端入队,从左端出队.为了节省空间实现上可以采用循环队列</p><h3 id="链表Linked-List"><a href="#链表Linked-List" class="headerlink" title="链表Linked List"></a>链表Linked List</h3><p>(这几个都感觉没什么好说的)</p><p>讲一下<strong>邻接表(Adjacency List)</strong>吧,它可以看成是”带有索引数组的多个数据链表”,这种所引就是链表的表头,表头又构成了一个表头(headers)数组</p><p>存图常用邻接表或是邻接矩阵(Adjacency Matrix)</p><p>邻接表</p><figure class="hljs highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to,dis;<br>&#125;edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> dis)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].dis=dis;<br>    h[f]=num_edge;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字典树Trie"><a href="#字典树Trie" class="headerlink" title="字典树Trie"></a>字典树Trie</h3><p>字典树是一种用于实现字符串快速检索的多叉树结构，其节点都拥有字符指针.</p><p>“Trie is an efficient information <strong>reTrieval</strong> data structure.Using trie,search complexities can be brought too optimal limit(O(M),M is key length).However the penalty is on Trie storage requirements.”</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> trie[maxn][<span class="hljs-number">27</span>],tot=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">bool</span> end[maxn][<span class="hljs-number">27</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t=tot,x;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len;i++)&#123;<br>        x=str[i]-<span class="hljs-string">'a'</span>;<br>        <span class="hljs-keyword">if</span>(trie[t][x]==<span class="hljs-number">0</span>)trie[t][x]=++tot;<br>        t=trie[t][x];<br>    &#125;<br>    end[t][x]=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Match_Ok</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t=tot,x;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len;i++)&#123;<br>        x=str[i]-<span class="hljs-string">'a'</span>;<br>        t=trie[t][x];<br>        <span class="hljs-keyword">if</span>(!t)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> end[t][x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二叉堆Binary-Heap"><a href="#二叉堆Binary-Heap" class="headerlink" title="二叉堆Binary Heap"></a>二叉堆Binary Heap</h3><p>二叉堆是一颗满足堆性质的完全二叉树.根据排序方式可以分为<strong>大根堆(Max-Heap)</strong>和<strong>小根堆(Min-Heap)</strong></p><p>对于大根堆,任意一个非根节点的权值都小于等于其父节点的权值;小根堆则反之</p><p>“A binary heap is a complete binary tree which satisfies the heap ordering property.The ordering can be one of two types:the min-heap property and the max-heap property.The value of each node of the max-heap is less than or equal to the value of its parent,with the maximum-value element at the root”</p><p>来源:<a href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html" target="_blank" rel="noopener">cs.cmu.edu</a></p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> heap[maxn],n;<span class="hljs-comment">//max-heap</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">up_modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(p&gt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(heap[p]&gt;heap[p&gt;&gt;<span class="hljs-number">1</span>])&#123;<br>            swap(heap[p],heap[p&gt;&gt;<span class="hljs-number">1</span>]);<br>            p=p&gt;&gt;<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>    heap[++n]=val;<br>    up(n);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s=p&lt;&lt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(s&lt;=n)&#123;<br>        <span class="hljs-keyword">if</span>(s&lt;n&amp;&amp;heap[s]&lt;heap[s+<span class="hljs-number">1</span>])s++;<span class="hljs-comment">//choost the maximum one of the two sons</span><br>        <span class="hljs-keyword">if</span>(heap[s]&gt;heap[p])&#123;<br>            swap(heap[s],heap[p]);<br>            p=s,s=s&lt;&lt;<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">extract_top</span><span class="hljs-params">()</span></span>&#123;<br>    heap[<span class="hljs-number">1</span>]=heap[n--];<br>    down(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树Segment-Tree"><a href="#线段树Segment-Tree" class="headerlink" title="线段树Segment Tree"></a>线段树Segment Tree</h3><p>咕</p><h2 id="图论Graph-Theory"><a href="#图论Graph-Theory" class="headerlink" title="图论Graph Theory"></a>图论Graph Theory</h2><h3 id="Dijkstra算法Dijkstra-Algorithm"><a href="#Dijkstra算法Dijkstra-Algorithm" class="headerlink" title="Dijkstra算法Dijkstra Algorithm"></a>Dijkstra算法Dijkstra Algorithm</h3><p>DIjkstra算法是为了解决<strong>单源最短路径问题(Single Source Shortest Path,SSSP)</strong>的，简单来说，就是求原点到其它所有点(vertex pl.vertices)的最短路(shortest path)</p><p>它是基于一个贪心思想,要求所有边都是非负的.大致就是不断拓展一颗最短路生成树</p><p>“Dijkstra’s algorithm is very similar to Prim’s algorithm for <strong>minimum spanning tree(MST)</strong>.Like Prim’s MST,we generate a SPT(shortest path tree) with given source as root.We maintain two sets,one set contain vertices included in the shortest path tre,other set includes vertices not yet included in shortest path tree.At every step,we find a vertex which is in the other set and has a mimnum distance from the source.”</p><p>来源:<a href="https://www.google.com/amp/s/www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/amp/" target="_blank" rel="noopener">geeksforgeeks.org</a></p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vertex</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id,d;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Vertex &amp; a)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> d&gt;a.d;<br>    &#125;<br>    Vertex()&#123;;&#125;<br>    Vertex(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;id=x,d=y;&#125;<br>&#125;;<br>priority_queue &lt;Vertex&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> dis)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].dis=dis;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> u,v,w;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        dis[i]=INF,vis[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    dis[s]=<span class="hljs-number">0</span>;<br>    q.push(Vertex(s,<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(q.size())&#123;<br>        u=q.top().id,w=q.top().d;<br>        q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span>(ri i=h[u];i;i=edge[i].ne)&#123;<br>            v=edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;<br>                dis[v]=dis[u]+w;<br>                q.push(Vertex(v,dis[v]))<br>            &#125;<br>        &#125;<br>        vis[u]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,dis[i]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bellman-Ford算法和SPFA算法Bellman-Ford-Algorithm-And-SPFA"><a href="#Bellman-Ford算法和SPFA算法Bellman-Ford-Algorithm-And-SPFA" class="headerlink" title="Bellman-Ford算法和SPFA算法Bellman-Ford Algorithm And SPFA"></a>Bellman-Ford算法和SPFA算法Bellman-Ford Algorithm And SPFA</h3><p>忽然发现ddl干不完了,因此介绍咕了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> u,v,w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)dis[i]=INF,vis[i]=<span class="hljs-number">0</span>;<br>    dis[s]=<span class="hljs-number">0</span>,vis[s]=<span class="hljs-number">1</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(q.size())&#123;<br>        u=q.top();q.pop();<br>        vis[u]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=h[u];i;i=edge[i].ne)&#123;<br>            v=edge[i].to,w=edge[i].dis;<br>            <span class="hljs-keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;<br>                dis[v]=dis[u]+w;<br>                <span class="hljs-keyword">if</span>(!dis[v])&#123;q.push(v);dis[v]=<span class="hljs-number">1</span>;&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,dis[i]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Floyd算法Floyd-Warshall-Algorithm"><a href="#Floyd算法Floyd-Warshall-Algorithm" class="headerlink" title="Floyd算法Floyd Warshall Algorithm"></a>Floyd算法Floyd Warshall Algorithm</h3><p>Floyd算法是基于动态规划思想来解决任意两点之间最短路径(All Pairs Shortest Path problem,APSP)的算法</p><p>亦可用于可传递的关系(传递闭包),这个也先挖坑吧</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(d));<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)dis[i][i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);<br>    dis[x][y]=min(dis[x][y],z);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Kruskal算法Kruskal-Algorithm"><a href="#Kruskal算法Kruskal-Algorithm" class="headerlink" title="Kruskal算法Kruskal Algorithm"></a>Kruskal算法Kruskal Algorithm</h3><p>Kruskal算法是求出一张给定联通边带权无向图的最小生成树算法.那么什么是最小生成树?</p><p>“Given a connected and undirected graph, a <em>spanning tree</em> of that graph is a subgraph that is a tree and connects all the vertices together. A single graph can have many different spanning trees. A <em>minimum spanning tree (MST)</em> or minimum weight spanning tree for a weighted, connected and undirected graph is a spanning tree with weight less than or equal to the weight of every other spanning tree. The weight of a spanning tree is the sum of weights given to each edge of the spanning tree.”</p><p>来源:<a href="https://www.geeksforgeeks.org/?p=26604" target="_blank" rel="noopener">Geeksforgeeks</a> 强烈安利这个英文网站,写的浅显易懂而且最重要的是,<strong>it is not blocked</strong></p><p>Kruskal算法维护无向图的最小生成森林,每次在连接两个森林的边中找一条权值最小的将两个森林连起来.对于连通性我们使用并查集维护</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u,v,dis;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Edge &amp; a)<span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> dis&lt;a.dis;<br>    &#125;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]!=x)fa[x]=get(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> u,v,w,cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].dis);<br>&#125;<br>    sort(edge+<span class="hljs-number">1</span>,edge+<span class="hljs-number">1</span>+m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>    u=edge[i].u,v=edge[i].v;<br>        u=get(u),v=get(v);<br>        <span class="hljs-keyword">if</span>(u!=v)&#123;<br>            fa[u]=v;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt==n<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树链剖分Heavy-Light-Decomposition"><a href="#树链剖分Heavy-Light-Decomposition" class="headerlink" title="树链剖分Heavy Light Decomposition"></a>树链剖分Heavy Light Decomposition</h3><p>树链剖分是用来解决一类树上问题的,可以将树上的操作转化为序列上的操作,同时使用数据结构维护可以使其复杂度更优,根据链剖方式可分为重链剖分和长链剖分等,这里介绍重链剖分</p><p>由于重链数量级是$log N$的,线段树时间复杂度是$log N$,总时间复杂度是$log^2 N$</p><p>还可以同时求LCA,但是操作时有许多细节需要注意,尤其是<code>dfn[]</code>和<code>rnk[]</code></p><p>找它的英文找了好久终于找到了,就是<strong>Heavy Light Decomposition</strong></p><p>“Suppose we have <strong>an unbalanced tree (not necessarily a Binary Tree) of n nodes</strong>, and we have to perform operations on the tree to answer a number of queries, each can be of one of the two types:</p><ol><li><strong>change(a, b)</strong>: Update weight of the ath edge to b.</li><li><strong>maxEdge(a, b)</strong>: Print the maximum edge weight on the path from node a to node b. For example maxEdge(5, 10) should print 25.</li></ol><p>“</p><p>来源:<a href="https://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/" target="_blank" rel="noopener">geeksforgeeks</a></p><p>但是感觉<a href="https://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/" target="_blank" rel="noopener">geeksforgeeks</a>上的介绍写得并不是很好…就不贴了.写一点自己口胡的工地英文</p><p>To perform two operations in a more efficient time complexity,we can first find out the heavy son of all nodes.We call a node is <strong>heavy</strong> only when its <strong>size</strong>(the number of nodes in its subtree) is larger than any of its siblings.We can make it by one DFS. Then we connects all the heavy-son node and we get several <strong>heavy-son chains</strong> and <strong>light-son chains</strong>.And if we want to perform two operations on the path of two nodes,we can perform operations on the segment tree built from the heavy-son chains along the path until we reach LCA.</p><p>Since it takes O($logN$) to perform operations on segment tree,apparently the complexity depends on the number of light-son chains.We can prove that it is no more than $log N$ along the path from one node to the tree root.,because when we meet one light-son chain,the number of nodes in his father’s subtree is reduced by at least half.</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> fa[maxn],dfn[maxn],rnk[maxn]; <br><span class="hljs-keyword">int</span> w[maxn],dep[maxn],top[maxn],son[maxn],size[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=h[now];i;i=edge[i].to)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>        fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>        dfs_1(v);<br>        size[now]+=size[v];<br>        <span class="hljs-keyword">if</span>(!son[now]||size[v]&gt;size[son[now]])son[now]=v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    top[now]=t,dfn[now]=++cnt,rnk[cnt]=now;<br>    <span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>    dfs_2(son[now],t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==son[now]||v==fa[now])<span class="hljs-keyword">continue</span>;<br>        dfs_2(v,v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> L,R;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation_on_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br>        <span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>        L=dfn[top[x]],R=dfn[x];<br>        operation_on_segmenttree(L,R);<br>        x=fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])swap(x,y);<span class="hljs-comment">//x is the LCA</span><br>    L=dfn[x],R=dfn[y];<br>    operation_on_segmenttree(L,R);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation_on_subtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    L=dfn[x],R=dfn[x]+size[x]<span class="hljs-number">-1</span>;<br>    operation_on_segmenttree(L,R);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态规划Dynamic-Programming"><a href="#动态规划Dynamic-Programming" class="headerlink" title="动态规划Dynamic Programming"></a>动态规划Dynamic Programming</h2><p>估计要咕了</p><p>问题具有以下两个性质时,可以用动态规划</p><p><strong>1) Overlapping Subproblems</strong>重叠子问题</p><p><strong>2) Optimal Substructure</strong>最优子结构</p>]]></content>
      
      
      <categories>
          
          <category> SM2 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SM2 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学知识小结#1</title>
      <link href="/2019/05/09/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93-1/"/>
      <url>/2019/05/09/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93-1/</url>
      
        <content type="html"><![CDATA[<h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><p>时隔数月尝试拾起以往的OI知识发现异常的艰难,于是准备慢慢的填坑,可能比较简略并且穿插不少英文(万一面试的时候问起OI还能说几句pao),但是我英语太菜了，如果您发现了错误或是需要改进的地方，欢迎联系我或是在下方评论</p><p>小结#1主要是数论部分，小结#2到时看情况在更吧</p><p>update:里面的除法都是指下取整</p><h2 id="质数与约数Prime-Number-amp-Divisors"><a href="#质数与约数Prime-Number-amp-Divisors" class="headerlink" title="质数与约数Prime Number&amp;Divisors"></a>质数与约数Prime Number&amp;Divisors</h2><h3 id="质数筛法Sieve"><a href="#质数筛法Sieve" class="headerlink" title="质数筛法Sieve"></a>质数筛法Sieve</h3><ul><li><p>埃拉托斯特尼筛法Sieve of Eratosthenes<br>主要思想是任意整数x的倍数2x,3x…都不是质数<br>由于在筛x的倍数时,小于$x^2$的数已经被筛过(显然),我们直接从$x^2$开始筛</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EratosthenesSieve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(vis[i])<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i*i;j&lt;=n;j+=i)vis[j]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>欧拉线性筛Euler’s Linear Sieve</p><p>埃式筛在筛一些数时还是会重复(比如12会被2和3同时筛一遍)，但是只要我们让我们要筛的数的质因子从小到大累计，即每个数只会被它的最小质因子筛一次，这样的话每个数只会被筛一次，复杂度就是线性的了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EulerSieve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(prime,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(prime));<br>    cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//i is a prime number</span><br>            prime[++cnt]=i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=cnt&amp;&amp;prime[j]*i&lt;=n;j++)&#123;<br>            vis[i*prime[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//now i can be divided by prime[j],so prime[j+1] is not the least prime divisor of the i*prime[j+1]</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="质因数分解Prime-Factorization"><a href="#质因数分解Prime-Factorization" class="headerlink" title="质因数分解Prime Factorization"></a>质因数分解Prime Factorization</h3><ul><li><p>算术基本定理Fundamental Theorem Of Arithmetic</p><p>也称为<strong>唯一分解定理(unique factorization theorem)</strong>,是指任何一个大于1的正整数都能被唯一分解为有限个质数的乘积,可写作</p><script type="math/tex; mode=display">N=p_1^{c_1}p_2^{c_2}...p_m^{c_m}</script><p>其中$p_i$是质数且$p_1&lt;p_2&lt;…&lt;p_m$</p><p>Every positive integer n&gt;1 can be represented in exactly one way as a product of prime powers</p><script type="math/tex; mode=display">N=p_1^{c_1}p_2^{c_2}...p_m^{c_m}</script><p>where $p_1&lt;p_2&lt;…&lt;p_m$ are primes and the $n_i$ are positive intergers.</p><p>(来源: <a href="http://en.m.wikipedia.org/wiki/Fundamental_Theorem_Of_Arithmetic]" target="_blank" rel="noopener">维基百科</a>)</p></li></ul><h3 id="最大公约数Greatest-Common-Divisors"><a href="#最大公约数Greatest-Common-Divisors" class="headerlink" title="最大公约数Greatest Common Divisors"></a>最大公约数Greatest Common Divisors</h3><ul><li><p>定义:</p><p>根据字面意思,自然数$a$和$b$的公约数中最大的d就是a和b的最大公约数,称为$gcd(a,b)$</p></li><li><p>定理:</p><p>$gcd(a,b)$*$lcm(a,b)=a$*$b $</p></li><li><p>更相减损法</p><p>$\forall a&gt;b,a,b \in N$ $gcd(a,b)=gcd(a,a-b)=gcd(b,a-b)$</p></li><li><p>辗转相除法</p><p>$\forall a,b \in N$ $gcd(a,b)=gcd(b,a \mod b)$</p></li></ul><h3 id="积性函数相关Multiplicative-Funtion"><a href="#积性函数相关Multiplicative-Funtion" class="headerlink" title="积性函数相关Multiplicative Funtion"></a>积性函数相关Multiplicative Funtion</h3><ul><li><p>积性函数定义:</p><p>若对任意互质$a,b$(即$gcd(a,b)=1$),有$f(ab)=f(a)f(b)$,则称函数$f$为<strong>积性函数</strong></p><p>特殊地,若对任意正整数都有$f(ab)=f(a)$ * $f(b)$,则称函数$f$为<strong>完全积性函数(Completely Multiplicative Function)</strong></p><p>显然若$N=p_1^{c_1}p_2^{c_2}…p_m^{c_m}$,则$f(N)= \prod_{i=1}^m f(p_i^{c_i})$</p><p>于是求一个积性函数我们可以设法套用筛法求出</p></li></ul><ul><li><p><strong>欧拉函数(Euler Tocient Funciton)</strong>定义:</p><p>在$1$到$N$中与$N$互质的数的个数称为欧拉函数,记作$\phi(N)$</p><p>若$N=p_1^{c_1}p_2^{c_2}…p_m^{c_m}$</p><p>则$\phi(N)=N$*$\frac{p_1-1}{p_1}$*$\frac{p_2-1}{p_2}$*$…$*$ \frac{p_m-1}{p_m}$</p><p>这个式子可以由<strong>容斥原理(The Principle Of Inclusion-exclusion)</strong>推得</p></li><li><p>欧拉函数性质</p><ul><li><p>对于一个质数N,$\phi(N)=N-1$</p></li><li><p>对于$N=p^k$($p$是质数),$\phi(N)=p^k-p^{k-1}$</p><p>简要证明:此时只有$p,2p,3p…$等$p^{k-1}$个数与$N$不互质</p></li><li><p>$\sum_{d|n} \phi(d)=n$</p><p>简要证明:设$f(n)=\sum_{d|n} \phi(d)$，发现它是个积性函数</p><p>又因为$f(p_i^{c_i})=\phi (1) + \phi (p)+…+\phi (p_i^{c_i})$根据上一条性质,就等于$p_i^{c_i}$</p><p>于是$f(n)= \prod_{d|n} f(p_i^{c_i}) = \prod p_i^{c_i} =n$</p></li><li><p>$\phi(n)=\sum_{d|n} \mu(d) \frac{n}{d}$</p><p>简要证明: 莫比乌斯反演,见下</p></li></ul></li><li><p><strong>莫比乌斯函数(Mobious Function)</strong>定义</p><p>设正整数$N=p_1^{c_1}p_2^{c_2}…p_m^{c_m}$</p><p>定义函数<br>$\mu(n)= \begin{cases} (-1)^m &amp; \text{when $c_1=c_2=…=c_m=1$,}\\ 0 &amp; \text{otherwise} \end{cases}$</p><p>为莫比乌斯函数</p><p>它有个比较有用的性质</p><p>$\sum_{d|n}\mu(d)=[n=1]$</p><p>它也是积性函数,于是我们可以运用欧拉线性筛求出$1-N$的莫比乌斯函数</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mobious</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>  <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>  mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>      <span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//prime number</span><br>          mu[i]=<span class="hljs-number">-1</span>;<br>          prime[++cnt]=i;<br>      &#125;<br>      <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=cnt&amp;&amp;prime[j]*i&lt;=n;j++)&#123;<br>          vis[prime[j]*i]=<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)&#123;<br>              mu[i*prime[j]]=<span class="hljs-number">0</span>;<span class="hljs-comment">//c_i !=1</span><br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>          mu[i*pri[j]]=-mu[i];<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>数论函数(Arithmetic Funtion)</strong></p><p>似乎也可以说Number Theoretic Function,是指定义域为正整数的函数</p><p>A number theoretic funtion is a function whose domain is the set of positive integers</p></li><li><p><strong>莫比乌斯反演公式(Mobius Inversion Formula)</strong></p><p>对于两个数论函数$F(n)$和$f(n)$,且满足</p><p>$F(n)=\sum_{d|n} f(d)$</p><p>那么$f(n) = \sum_{d|n} \mu(d) F(\frac{n}{d})$</p><p>简要证明:</p><p>$\sum_{d|n} \mu(d) F(\frac{n}{d})=\sum_{d|n} \mu(d) \sum_{i|{\frac{n}{d}}} f(i)$</p><p>对于第二个式子,我们考虑每个$f(i)$对几个$\mu(d)$作贡献,发现等价于</p><p>$\sum_{i|n} f(i) \sum_{d|{\frac{n}{i}}} \mu(d)$</p><p>再由$\sum_{d|n}\mu(d)=[n=1]$,得只有i=n时后面的sigma不是0,也就是等于$f(n)$</p><p>现在让我们证明前文提到的这个式子$\phi(n)=\sum_{d|n} \mu(d) \frac{n}{d}$</p><p>先引入一个$id$函数,$id(n)=n$</p><p>$\because id(n) = n = \sum_{d|n} \phi(d)$</p><p>$\therefore \phi(d) = \sum_{d|n} \mu(d) id(\frac{n}{d}) = \sum_{d|n} \mu(d)  \frac{n}{d}$</p></li><li><p><strong>狄利克雷卷积(Dirichlet Convolution)</strong></p><p>两个数论函数f和g的卷积为$(f ∗ g)(n)=\sum_{d|n} f(d)g(\frac{n}{d})$ ,后面的括号可以省略不写</p><p>满足交换律,结合律,分配律</p><p>两个积性函数的卷积依然为积性函数</p><p>前面的莫比乌斯反演也可以通过狄利克雷卷积证明</p></li></ul><h2 id="同余Modular-Arithmetic"><a href="#同余Modular-Arithmetic" class="headerlink" title="同余Modular Arithmetic"></a>同余Modular Arithmetic</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>若整数$a$与$b$除以正整数n的余数相等,则称$a,b$模$n$同余,记为$a \equiv b \pmod n$</p><p>“For a positive integer n, two numbers a and b are said to be congruent modulo n, if their difference a-b is an integer multiple of n(that is , if there is an integer $k$ such that a-b = kn),and is denoted $a \equiv b \pmod (n)$.</p><p>The number n is called the modulus of the congruence.”</p><p>来源:<a href="https://en.m.wikipedia.org/wiki/Modular_arithmetic" target="_blank" rel="noopener">维基百科</a></p><h3 id="费马小定理Fermat’s-Little-Theorem"><a href="#费马小定理Fermat’s-Little-Theorem" class="headerlink" title="费马小定理Fermat’s Little Theorem"></a>费马小定理Fermat’s Little Theorem</h3><p>若$p$是质数,则对任意正整数$a$,有$a^p \equiv a \pmod p$</p><h3 id="欧拉定理Euler-Theorem"><a href="#欧拉定理Euler-Theorem" class="headerlink" title="欧拉定理Euler Theorem"></a>欧拉定理Euler Theorem</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匆匆四月</title>
      <link href="/2019/05/01/%E5%8C%86%E5%8C%86%E5%9B%9B%E6%9C%88/"/>
      <url>/2019/05/01/%E5%8C%86%E5%8C%86%E5%9B%9B%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p>不知不觉四月就过去了呢</p><p>它就好像一场梦似的，感觉绚幻多彩，终究却是一片空虚与幻想</p><p>想用手去抓住那些记忆中的笑容或是眼泪，却无力地看着它们从指尖流逝</p><p>那些深刻入心扉的叹息与痛苦，现在看来不过是中二幼稚的傻事</p><p>想奋力击破屏障，却一次次的退却</p><p>明明坚定写下的“不要颓废”，只是装模做样的空话</p><p>心中的蓝图与规划，一次次被自己怀疑</p><p>I DONT UNDERSTAND</p><p>感觉自己在被卷入一个又一个的漩涡中</p><p>我尽力前行，心中却全是茫然与恐惧</p><p>有时感觉“自己就是一个坏掉的人，可能几颗螺丝松了，从前没注意，如今却发现了”</p><p>但我还是想要相信</p><p>即使心中充斥着怀疑，我还是想要相信</p><p>虽然对命运的荒谬有太多的不解，我还是想要相信</p><p>哪怕被生活打得遍体鳞伤，打得在被窝中偷偷哭泣，我还是想要相信</p><p>在奄奄一息后，我又重新审视自己的内心</p><p>也许我会再次止步，但我相信我一定会去改变</p><p>因为我相信我是”世界上最顽强的15岁少年“</p><p>—-Update 2019.5.26</p><p>LXT啊LXT，你不能再这么逃避与颓废下去了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23rdSM2项目JX省游记</title>
      <link href="/2019/04/26/23rdSM2%E9%A1%B9%E7%9B%AEJX%E7%9C%81%E6%B8%B8%E8%AE%B0/"/>
      <url>/2019/04/26/23rdSM2%E9%A1%B9%E7%9B%AEJX%E7%9C%81%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><p>大家好啊,我是Rye_Catcher.我又复活了,在NOIP2018失利和进入新班之后经历了一段低潮期,也开始反思自己,也学到了很多,成长了许多,感谢这一段时间所有好友的陪伴QAQ</p><p>大约1月初左右因为一些原因参加了SM2(全称:Senior Middle 2)奖学金计划,具体这是个什么计划大家大可通过搜索引擎或是知乎了解,就不多说了.简单地讲,就是你能全免学费在NUS(新加坡国立大学)或是NTU(南洋理工大学)完成本科学位,同时之前你还要完成一年的预科班学习,但是这是有代价的,你必须在新加坡呆上11年,也就是说预科加上本科的5年,你还得在新加坡境内或是境内注册的公司工作6年.</p><p>江西省想要入围这个项目得通过三次测试,分别是省教育厅命题的省试,新方命题的笔试,新方的面试</p><p>我也不知道怎么回事就混进了面试,感觉有点茫然不知所措,于是决定把我的这段经历写下,希望能给你们一点启发</p><h2 id="省试-120项目"><a href="#省试-120项目" class="headerlink" title="省试(120项目)"></a>省试(120项目)</h2><p>我们是在1月初从学校得到了SM2奖学金计划的通知,然后1月20号就要考,所以时间还是蛮紧的.</p><p>说实话在那之前我一直没怎么准备,但是接到通知后准备还是非常用心的,借了上饶市中考状元的3-3资料和组合数学小蓝皮来看,然而这两个省试都没有考…所以从某种程度上说我根本就没有准备什么…</p><p>考试在南昌市外国语学校九龙湖校区,江科离那里非常远,但毕竟我们学校有20个人去考,于是派了辆大巴接送,午饭问题则由学生家长解决</p><p>考试就靠数学物理英语这三门.数学是高考内容(但是我们这届没有考排列组合),没什么好说的,建议没学立几的自学一下,毕竟立几都是非常简单的,我的不少同学就是因为没学立几而空了那道题;物理应该比高考内容难一点,第一道题据说运用了力矩知识(反正我当时没出来),可能看些物竞入门知识会更好一些;英语的话也是高考的加强版,个人感觉考得不错,结果考出来很差,我也不知道为什么.</p><p>然后大概2周后就被通知过了,当时还是比较惊讶的</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>笔试在3月17号,地点还是在外国语九龙湖校区.</p><p>由于这次是新方出题,考察的范围主要是剑桥A-level要求范围.尤其是物理感觉大部分都是大学知识,所以还是建议去上个SM2笔试辅导班(或者咨询学长学姐要资料),确实非常有用.</p><p>数学建议做一下一试试题,排列组合因为基本上送分一定要熟练;物理可以看一下普通物理学,自学的过程中经常会用很多问题,所以学校有物竞小组就非常舒服了.因为之前我是在竞赛班认识很多数竞物竞同学,基本上都是有问必答,在这里感谢他们;英语建议做一下雅思阅读,背雅思词汇,个人感觉是很难的;还有一个向性测试的玩意,这个建议去搞点资料做</p><p>我校四个人好像都是提前住宾馆,午饭是家长解决.新方的老师都非常的和善,所以不需要感到紧张.</p><p>但是我笔试考得非常糟糕,心态比较崩.本想肯定上不了的结果真的不知道怎么回事又进了.班上一位同学遗憾落榜,真的很可惜,她一直都非常认真.</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>咕</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
            <tag> SM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFO</title>
      <link href="/2018/11/17/AFO/"/>
      <url>/2018/11/17/AFO/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=33777309&auto=1&height=66"></iframe><p><a href="https://www.cnblogs.com/Rye-Catcher/p/9932561.html" target="_blank" rel="noopener">写在NOIP2018前</a></p><p><a href="https://www.cnblogs.com/Rye-Catcher/p/9975378.html" target="_blank" rel="noopener">写在NOIP2018后</a></p><p>在两天前退役了,还是有点不舍</p><p>Day1考崩了,Day2再也翻不回来,技不如人,甘拜下风</p><p>被发配到了两个零班之一,然而并不是想进的那一个…</p><p>重学文化课感觉很吃力,希望事情一点点变好吧</p><p>想到一句话:Keep Calm And Carry On</p><p>祝各位OIer今后顺利</p>]]></content>
      
      
      
        <tags>
            
            <tag> AFO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在NOIP2018前</title>
      <link href="/2018/11/08/%E5%86%99%E5%9C%A8NOIP2018%E5%89%8D/"/>
      <url>/2018/11/08/%E5%86%99%E5%9C%A8NOIP2018%E5%89%8D/</url>
      
        <content type="html"><![CDATA[<embed src="//music.163.com/style/swf/widget.swf?sid=33777309&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"><p>不知不觉距离NOIP2018还有两天,两个月的停课生活即将结束</p><p>此时心里总感觉装着许多话,想要将其倾诉却发现连哪怕一句也凝结不出</p><p>只觉得这两月像是场荒诞的冒险,好像我想做的什么都做了,又感觉我其实一事无成</p><p>如今它即将终结,不知今后迎接我又是否是另一段荒诞的开端</p><p>最后还是祝各位NOIP2018 rp++</p><p>Good Luck&amp;Have Fun :P</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atcoder&amp;CodeForces杂题11.7</title>
      <link href="/2018/11/07/Atcoder-CodeForces%E6%9D%82%E9%A2%9811-7/"/>
      <url>/2018/11/07/Atcoder-CodeForces%E6%9D%82%E9%A2%9811-7/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>又自己开了场CF/Atcoder杂题,比昨天的稍难,题目也更有趣了</p><p>昨晚炉石检验血统果然是非洲人…</p><p>希望这是给NOIP2018续点rp吧</p><h3 id="A-CF1068C-Colored-Rooks"><a href="#A-CF1068C-Colored-Rooks" class="headerlink" title="A.CF1068C-Colored Rooks"></a>A.CF1068C-Colored Rooks</h3><p>现在还没理解题意…</p><h3 id="B-CF1070K-VideoPosts"><a href="#B-CF1070K-VideoPosts" class="headerlink" title="B. CF1070K-VideoPosts"></a>B. CF1070K-VideoPosts</h3><p>一道模拟,没什么好说的.</p><p>不过一开始还是WA了…一个智障的坑,感觉做题还是不细心</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> a[maxn],ave,n,k,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> ans[maxn],tot=<span class="hljs-number">0</span>;<br>ll sum=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n),read(k);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(a[i]);<br>        sum+=a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%k!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ave=sum/k;<br>    sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        sum+=a[i],cnt++;<br>        <span class="hljs-keyword">if</span>(sum==ave)&#123;<br>            ans[++tot]=cnt;<span class="hljs-comment">//printf("%d ",cnt);</span><br>            sum=cnt=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&gt;ave)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Yes"</span>);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,ans[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-CF1036D-VasyaAndArrays"><a href="#C-CF1036D-VasyaAndArrays" class="headerlink" title="C. CF1036D-VasyaAndArrays"></a>C. CF1036D-VasyaAndArrays</h3><p>一看就是一道贪心题,很多人都会猜测就是两个指针不断拓展,如果两个数相等就不加.</p><p>想了想发现似乎是正确的,但是不会严格证明,交了发居然A了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">300005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> a[maxn],b[maxn];<br>ll sum1=<span class="hljs-number">0</span>,sum2=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(a[i]),sum1+=a[i];<br>    read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)read(b[i]),sum2+=b[i];<br>    <span class="hljs-keyword">if</span>(sum1!=sum2)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>,pos1=<span class="hljs-number">1</span>,pos2=<span class="hljs-number">1</span>;<br>    sum1=a[<span class="hljs-number">1</span>],sum2=b[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">while</span>(sum1!=sum2)&#123;<br>            <span class="hljs-keyword">if</span>(sum1&gt;sum2)sum2+=b[++pos2];<br>            <span class="hljs-keyword">else</span> sum1+=a[++pos1];<br>        &#125;<br>        len++;<br>        <span class="hljs-keyword">if</span>(pos1==n&amp;&amp;pos2==m)<span class="hljs-keyword">break</span>;<br>        sum1=a[++pos1],sum2=b[++pos2];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="D-CF1038D-Slime"><a href="#D-CF1038D-Slime" class="headerlink" title="D. CF1038D-Slime"></a>D. CF1038D-Slime</h3><p>非常有意思的题,一开始想区间DP,但是发现好像是有后效性的,交了发果然WA了</p><p>然后只能往贪心这方面想</p><p>偶然发现样例非常有意思,一个全正数, 一个全负数+0.</p><p>易知如果全是正数的话就可以贪心,你用最小的史莱姆吃掉出最大值以外的所有数,然后最大值吃掉这个数肯定是最优的.这样子答案就是sum-mi-mi</p><p>如果是全负数加上一个0,我们就是用0吃掉所有负数显然是最优的</p><p>那如果既有非负数又有负数,我们可以用负数减去除最大值以外所有非负整数,然后最大值吃掉所有负数就是最优的,这样子就是所有元素之和</p><p>但是如果全都是负数按照全都是正数的思路就是sum-mx-mx</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">int</span> n,a[maxn],mi=inf,mx=-inf;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>,flag_2=<span class="hljs-number">0</span>;<br>ll sum=<span class="hljs-number">0</span>;<br>    read(n);<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>    read(a[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,a[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(a[i]);<br>        mi=min(a[i],mi);<br>        mx=max(a[i],mx);<br>        sum+=<span class="hljs-built_in">abs</span>(a[i]);<br>    <span class="hljs-keyword">if</span>(a[i]&lt;<span class="hljs-number">0</span>)flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a[i]&gt;=<span class="hljs-number">0</span>)flag_2=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>    <span class="hljs-keyword">if</span>(flag_2)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,sum);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,sum+mx*<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,sum-mi*<span class="hljs-number">2</span>);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E-Atcoder4167-Equal-Cut"><a href="#E-Atcoder4167-Equal-Cut" class="headerlink" title="E. Atcoder4167-Equal Cut"></a>E. Atcoder4167-Equal Cut</h3><p>一道ARC的B题就不会做了,太菜了…</p><p>感觉solution很妙啊,枚举中间的断点.这时候分成了L,R两部分,显然我们还要把L,R分成L1,L2和R1,R2两部分</p><p>这时候有一个结论就是让abs(L1-L2)和abs(R1-R2)尽量小一定是最优方案,这个还是比较显然的</p><p>这时候可以发现我们在枚举中间断点的时候分割L1,L2的断点和分割R1,R2的断点都是单调的</p><p>这里的断点是指abs(L1-L2)和abs(R1-R2)尽量小的断点</p><p>于是我们就可以$O(N)$扫一遍得出答案了</p><p>同时发现一个很坑的地方:</p><p>用<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs std::abs()```而不是```abs()```,因为差点没查出错来"><br>```c++<br>const int maxn=1000005;<br>const int inf=0x7fffff;<br>int n;<br>ll a[maxn];<br>ll sum[maxn],mi=1e18,mx=-1e18,ans=1e18,tmp;<br>int main()&#123;<br>    int x,y;<br>    read(n);<br>    sum[0]=0;<br>    for(ri i=1;i&lt;=n;i++)read(a[i]),sum[i]=sum[i-1]+a[i];<br>    int l=1,r=3;<br>    for(ri k=2;k&lt;=n-2;k++)&#123;<br>        while((abs((sum[k]-sum[l+1])-(sum[l+1]))&lt;abs(sum[k]-sum[l]-sum[l]))&amp;&amp;l+1&lt;k)l++;<br>        while((abs((sum[n]-sum[r+1])-(sum[r+1]-sum[k]))&lt;abs((sum[n]-sum[r])-(sum[r]-sum[k])))&amp;&amp;r+1&lt;n)r++;<br>        mi=1e18,mx=-1e18;<br>        tmp=sum[k]-sum[l];<br>mi=min(mi,tmp),mx=max(mx,tmp);<br>        tmp=sum[l];<br>mi=min(mi,tmp),mx=max(mx,tmp);<br>        tmp=sum[n]-sum[r];<br>mi=min(mi,tmp),mx=max(mx,tmp);<br>        tmp=sum[r]-sum[k];<br>mi=min(mi,tmp),mx=max(mx,tmp);<br>        ans=min(ans,mx-mi);<br>    &#125;<br>    printf(&quot;%lld\n&quot;,ans);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="F-Atcoder4351-Median-Of-Medians"><a href="#F-Atcoder4351-Median-Of-Medians" class="headerlink" title="F. Atcoder4351-Median Of Medians"></a>F. Atcoder4351-Median Of Medians</h3><p>这题考试的时候也不会做,考试后发现正解简直太妙了</p><p>首先我们需要知道一个性质:如果$x$是一个长度为$N$的序列的中位数,那么小于等于x的数的个数至少有$N/2+1$个</p><p>于是我们不妨二分一下最后的中位数是哪个,然后我们只需要知道有多少个区间的中位数是小于等于我们二分的这个数就可以了</p><p>这里就需要一个高端操作:我们将原序列中小于等于这个数的数置为1,否则置为-1;这样操作之后可以发现如果一个区间的中位数小于等于x,那么这个区间之和肯定大于0.所以我们转化成有多少个区间之和大于0.</p><p>我们对这个新序列求一遍前缀和,我们都知道区间$[L,R]$的和等于$sum[R]-sum[L-1]$,如果想要这个区间和大于0,实际上就是$sum[R]&gt;sum[L-1]$,又由于$R&gt;L-1$,那么我们发现区间之和大于0的区间个数实际上就是新序列前缀和后的顺序对个数,我们离散化之后按照逆序对套路处理即可</p><p>但是注意这时候我们没有计算类似$[1,R]$的区间,这个直接记录一下就好了</p><p>但是回到前面的话题,我们已经知道了有多少个区间的中位数小于等于当前二分的这个数,我们该如何更改这个二分边界呢?</p><p>还是一开始那个性质,由于区间个数总共有$N \times (N+1)/2$个,所以大于等于二分的这个数的区间个数如果大于等于$N \times (N+1)/4+1$的话,则将二分右边界左移,否则左边界右移</p><p>注意一开始$N \times (N+1)$ 前没打1ll,结果爆int了,查了好久的错…</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,nn,a[maxn],b[maxn],c[maxn],mx=-inf,mi=inf;<br>ll sum[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> d)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=nn;x+=x&amp;(-x))sum[x]+=d;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;ll ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(;x;x-=x&amp;(-x))ans+=sum[x];<span class="hljs-keyword">return</span> ans;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    ll ans=<span class="hljs-number">0</span>;<br>    b[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        b[i]=b[i<span class="hljs-number">-1</span>]+((a[i]&lt;=k)?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>);<br>        c[i]=b[i];<br>        ans+=(b[i]&gt;<span class="hljs-number">0</span>);<span class="hljs-comment">//记录[1,R]的区间</span><br>    &#125;<br>    <span class="hljs-built_in">std</span>::sort(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+n);<br>    nn=<span class="hljs-built_in">std</span>::unique(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+n)-(c+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memset</span>(sum,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(sum));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>      b[i]=lower_bound(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+nn,b[i])-c;<span class="hljs-comment">//离散化</span><br>        ans+=query(b[i]<span class="hljs-number">-1</span>);<br>        update(b[i],<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(a[i]);<br>        mi=min(mi,a[i]),mx=max(mx,a[i]);<br>    &#125;<br>    <span class="hljs-keyword">int</span> L=mi,R=mx,mid,ans;<br>  ll lim=<span class="hljs-number">1l</span>l*n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">4</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(L&lt;=R)&#123;<br>        mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(chk(mid)&gt;=lim)ans=mid,R=mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> L=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atcoder&amp;CodeForces杂题11.6</title>
      <link href="/2018/11/06/Atcoder-CodeForces%E6%9D%82%E9%A2%9811-6/"/>
      <url>/2018/11/06/Atcoder-CodeForces%E6%9D%82%E9%A2%9811-6/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>NOIP前突然不知道做什么,感觉思维有点<del>江</del>僵化,就在vjudge上随便组了6道ABC D+CF Div2 C/D做,发现比赛质量还不错,知识点涉及广,难度有梯度,码量稍小,思维较多. 同时发现vjudge的比赛功能很不错</p><h3 id="A-ABC112-D-Partition"><a href="#A-ABC112-D-Partition" class="headerlink" title="A. ABC112-D-Partition"></a>A. ABC112-D-Partition</h3><p>难度感觉比NOIP T1简单了些了</p><p>首先naiive的想法是枚举这个公约数$D$,但是发现有$D*N&lt;=M$这个约束,算了算发现$M/N &lt;=1e4$</p><p>于是开心从大到小枚举就好了</p><p>太水了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=m/n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,i);<span class="hljs-keyword">break</span>;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B-ABC110-D-Factorization"><a href="#B-ABC110-D-Factorization" class="headerlink" title="B. ABC110-D-Factorization"></a>B. ABC110-D-Factorization</h3><p>应该有NOIP T1难度</p><p>我先考虑如果这个M是一个质数,那么就有N种可能,稍稍推广一下,如果$M = P^c$,那么就相当于你有$N$个不同的盒子,然后盒子内可以不装东西,求放$c$个物品的方案数</p><p>这个就是隔板法的经典模型</p><p>如果您不知道是什么就看这篇洛谷日报吧:<a href="https://www.luogu.org/blog/chengni5673/dang-xiao-qiu-yu-shang-he-zi" target="_blank" rel="noopener">https://www.luogu.org/blog/chengni5673/dang-xiao-qiu-yu-shang-he-zi</a></p><p>于是对于$M= \prod pi^{ci}$,由于每个$pi$是独立的,直接乘法原理相乘就好了</p><p>一开始用线性推逆元,不知道怎么回事一直最后一个点WA,最后改成阶乘版本就过了…</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> c[maxn],tot=<span class="hljs-number">0</span>;<br>ll fac[maxn],inv_fac[maxn];<br><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">return</span> fac[m]*inv_fac[n]%P*inv_fac[m-n]%P;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a)</span></span>&#123;<br>ll ans=<span class="hljs-number">1</span>;<br>ll c=P<span class="hljs-number">-2</span>;<br><span class="hljs-keyword">while</span>(c)&#123;<br><span class="hljs-keyword">if</span>(c&amp;<span class="hljs-number">1</span>)ans=ans*a%P;<br>a=a*a%P;<br>c=c&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans%P;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,M;<br>read(n),read(m);<br>M=m;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i*i&lt;=M;i++)&#123;<br><span class="hljs-keyword">if</span>(M%i==<span class="hljs-number">0</span>)&#123;<br>c[++tot]=<span class="hljs-number">1</span>;<br>M/=i;<br><span class="hljs-keyword">while</span>(M%i==<span class="hljs-number">0</span>)&#123;M/=i;c[tot]++;&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(M&gt;<span class="hljs-number">1</span>)c[++tot]=<span class="hljs-number">1</span>;<br>fac[<span class="hljs-number">0</span>]=fac[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=size;i++)<br>fac[i]=fac[i<span class="hljs-number">-1</span>]*i%P;<br>inv_fac[size]=ksm(fac[size]);<br><span class="hljs-keyword">for</span>(ri i=size<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>inv_fac[i]=inv_fac[i+<span class="hljs-number">1</span>]*<span class="hljs-number">1l</span>l*(i+<span class="hljs-number">1</span>)%P;<br>ll ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br>ans=ans*C(n<span class="hljs-number">-1</span>,n+c[i]<span class="hljs-number">-1</span>)%P;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-ABC106-D-AtcoderExpress2"><a href="#C-ABC106-D-AtcoderExpress2" class="headerlink" title="C. ABC106-D-AtcoderExpress2"></a>C. ABC106-D-AtcoderExpress2</h3><p>个人认为应该有NOIPT2难度了(天天爱跑步算了)</p><p>第一眼一看裸题啊!求一段区间内有多少个被完全包含的区间.冷静分析之后发现并不会做</p><p>从数据结构想到容斥还是毫无思路</p><p>然后下午睡了一觉之后一下子就想出个一看就不是正解的方法:我会二维数点!</p><p>我们对于询问/给出的区间都用$(l,r)$表示,那么你看这个这个东西,它是不是像<del>炉石补偿</del>一个平面直角坐标系上的一个点</p><p>同时发现询问区间$(l,r)$,实际上就是询问有多少个点$(l_i,r_i)$满足$l_i&gt;=l,r_i&lt;=r$</p><p>画一个图发现它其实就是求一个矩形内有多少个点,我们按照二维数点套路搞一波就好了</p><p>关于二维数点:<a href="https://www.cnblogs.com/Rye-Catcher/p/9823554.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rye-Catcher/p/9823554.html</a></p><p>这里注意排序时的cmp就好了,代码同样短的可怕</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> sum[maxn&lt;&lt;<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> n,m,q;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> d)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n;x+=x&amp;(-x))sum[x]+=d;<span class="hljs-keyword">return</span> ;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(;x;x-=x&amp;(-x))ans+=sum[x];<span class="hljs-keyword">return</span> ans;&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pt</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y,id;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Pt &amp;rhs)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> (x==rhs.x)?(y==rhs.y?id&lt;rhs.id:y&lt;rhs.y):x&gt;rhs.x;<span class="hljs-comment">//注意cmp</span><br>&#125;<br>&#125;pt[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>,qry[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>read(n),read(m),read(q);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y);<br>pt[++tot]=(Pt)&#123;x,y,<span class="hljs-number">0</span>&#125;;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>read(x),read(y);<br>pt[++tot]=(Pt)&#123;x,y,i&#125;;<br>&#125;<br><span class="hljs-built_in">std</span>::sort(pt+<span class="hljs-number">1</span>,pt+<span class="hljs-number">1</span>+tot);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br><span class="hljs-comment">//printf("%d %d %d %d\n",i,pt[i].id,pt[i].x,pt[i].y);</span><br><span class="hljs-keyword">if</span>(!pt[i].id)add(pt[i].y,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> qry[pt[i].id]=query(pt[i].y);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,qry[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="D-CF-EducationalRound52-C-MakeItEqual"><a href="#D-CF-EducationalRound52-C-MakeItEqual" class="headerlink" title="D.CF-EducationalRound52-C-MakeItEqual"></a>D.CF-EducationalRound52-C-MakeItEqual</h3><p>这题应该比T1稍难一点</p><p>首先naiive的想法就是按照高度排序一遍后,不断向下拓展,但是发现操作繁琐,而且我的做法是一个错误的想法</p><p>然后这时候我看到值域居然只有2e5?!然后我们还是按照一样的思路一路向下拓展,如果不行的话切一刀就好了</p><p>代码同样很短</p><p>注意判0的情况,太坑了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> h[maxn],n,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> sz[maxn],mx=<span class="hljs-number">0</span>,mi=inf,mi_id;<br>ll k,sum=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n),read(k);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(h[i]);<br>mx=max(mx,h[i]);<br>mi=min(mi,h[i]);<br>sz[h[i]]++;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(mx==mi)&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span>(ri i=mx;i&gt;=mi;i--)&#123;<br>sum+=num;<br><span class="hljs-keyword">if</span>(sum&gt;k)&#123;<br>ans++;<br>sum=num;<br>&#125;<br>num+=sz[i];<br>&#125;<br>ans++;<span class="hljs-comment">//最后无论如何都要切一刀</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E-CF-Round-485-div-2-D-Fair"><a href="#E-CF-Round-485-div-2-D-Fair" class="headerlink" title="E. CF-Round#485 div.2 D - Fair"></a>E. CF-Round#485 div.2 D - Fair</h3><p>这题昨天没想出来,今天看题解发现还挺简单的 雾)</p><p>关键还是思维太僵化了</p><p>我们可以用BFS求出每个点到某种颜色的最短路,时间复杂度$O(nk)$</p><p>然后对于每个点都$nth $_ $element$,求出前s小的颜色距离加起来就好了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m,k,s;<br><span class="hljs-keyword">int</span> col[maxn];<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; fc[<span class="hljs-number">105</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn][<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span></span>&#123;<br><span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-keyword">int</span> u,v;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;fc[c].size();i++)q.push(fc[c][i]);<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>u=q.front();q.pop();<br><span class="hljs-keyword">for</span>(ri i=h[u];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(dis[v][c]!=inf)<span class="hljs-keyword">continue</span>;<br>dis[v][c]=dis[u][c]+<span class="hljs-number">1</span>;<br>q.push(v);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z;<br>read(n),read(m),read(k),read(s);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(col[i]);<br>fc[col[i]].push_back(i);<br><span class="hljs-keyword">for</span>(ri c=<span class="hljs-number">1</span>;c&lt;=k;c++)&#123;<br>dis[i][c]=inf;<br>&#125;<br>dis[i][col[i]]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br><span class="hljs-keyword">for</span>(ri c=<span class="hljs-number">1</span>;c&lt;=k;c++)&#123;<br>bfs(c);<br>&#125;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ans=<span class="hljs-number">0</span>;<br>nth_element(dis[i]+<span class="hljs-number">1</span>,dis[i]+s+<span class="hljs-number">1</span>,dis[i]+<span class="hljs-number">1</span>+k);<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=s;j++)ans+=dis[i][j];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,ans);<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="F"><a href="#F" class="headerlink" title="F."></a>F.</h3><p>咕</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2018模拟赛10.29]垫底报告</title>
      <link href="/2018/10/30/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-29-%E5%9E%AB%E5%BA%95%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/30/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-29-%E5%9E%AB%E5%BA%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨天又修到好晚…早上起来跟死人差不多</p><p>然后今天上来发现T1T2T3都没思路,于是我选择放弃T2T3肛T1,然后我就和一个没学过的算法斗了两个多小时…彻底凉凉.</p><p>后面发现T2是个思博DP,当时就感觉不爽了…又被一个初中学弟真 $\cdot$ 嘲讽了…更不爽了(* ￣︿￣)</p><p>菜果然是原罪</p><p>今天题质量还行,比较接近NOIP,我还考这鬼样</p><h3 id="T1-phalanx"><a href="#T1-phalanx" class="headerlink" title="T1 phalanx"></a>T1 phalanx</h3><p>你会二分图匹配的话就是水题了,直接转化成最大独立集就好了</p><p>考试的时候千万不要把时间浪费在你的瞎搞做法上</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> h[maxn&lt;&lt;<span class="hljs-number">1</span>],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> match[maxn&lt;&lt;<span class="hljs-number">1</span>],pre[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> vis[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> n,num;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> u,v,s,t,tmp,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)vis[i]=<span class="hljs-number">0</span>,match[i]=pre[i]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">1</span>;o&lt;=n;o++)&#123;<br><span class="hljs-keyword">if</span>(match[o]==<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>q.push(o);<br>pre[o]=<span class="hljs-number">-1</span>,flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(q.size()&amp;&amp;!flag)&#123;<br>u=q.front();q.pop();<br><span class="hljs-comment">//vis[u]=1;</span><br><span class="hljs-keyword">for</span>(ri i=h[u];i&amp;&amp;!flag;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(vis[v]==o)<span class="hljs-keyword">continue</span>;<br>vis[v]=o;<br><span class="hljs-comment">//printf("--%d %d--\n",u,v);</span><br><span class="hljs-keyword">if</span>(match[v]!=<span class="hljs-number">-1</span>)&#123;<br>q.push(match[v]);<br>pre[match[v]]=u;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>flag=<span class="hljs-number">1</span>;<br>s=u,t=v;<br><span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>tmp=match[s];<br>match[s]=t,match[t]=s;<br>t=tmp,s=pre[s];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(match[o]!=<span class="hljs-number">-1</span>)ans++;<br>&#125;<br><span class="hljs-comment">//printf("%d %d\n",n*2,ans);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,(n*<span class="hljs-number">2</span>-ans)*n);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>freopen(<span class="hljs-string">"phalanx.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"phalanx.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>read(n),read(num);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=num;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y+n);<br>add_edge(y+n,x);<br>&#125;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="T2-math"><a href="#T2-math" class="headerlink" title="T2 math"></a>T2 math</h4><p>运算就是(a+b)/2,考试时没怎么仔细想,其实就是道套路区间DP,我们枚举合并的中断点就好了,使用位运算判断</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">155</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn][maxn],n,a[maxn];<br><span class="hljs-keyword">int</span> o[<span class="hljs-number">259</span>][<span class="hljs-number">259</span>],px[<span class="hljs-number">8</span>],py[<span class="hljs-number">8</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>freopen(<span class="hljs-string">"math.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"math.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(a[i]);<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,a[<span class="hljs-number">1</span>]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,(a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>])/<span class="hljs-number">2</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i][i]=(<span class="hljs-number">1</span>&lt;&lt;a[i]);<br><span class="hljs-comment">//printf("\n--%d %d %d--\n",1&lt;&lt;0,1&lt;&lt;1,1&lt;&lt;2);</span><br><span class="hljs-keyword">for</span>(ri len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<br><span class="hljs-keyword">for</span>(ri l=<span class="hljs-number">1</span>,r;l&lt;=n-len+<span class="hljs-number">1</span>;l++)&#123;<br>r=l+len<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(ri k=l;k&lt;r;k++)&#123;<br><span class="hljs-keyword">for</span>(ri p=<span class="hljs-number">0</span>;p&lt;<span class="hljs-number">8</span>;p++)<span class="hljs-keyword">if</span>(f[l][k]&amp;(<span class="hljs-number">1</span>&lt;&lt;p))&#123;<br><span class="hljs-keyword">for</span>(ri q=<span class="hljs-number">0</span>;q&lt;<span class="hljs-number">8</span>;q++)<span class="hljs-keyword">if</span>(f[k+<span class="hljs-number">1</span>][r]&amp;(<span class="hljs-number">1</span>&lt;&lt;q))&#123;<br>f[l][r]|=(<span class="hljs-number">1</span>&lt;&lt;((p+q)&gt;&gt;<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<span class="hljs-keyword">if</span>(f[<span class="hljs-number">1</span>][n]&amp;(<span class="hljs-number">1</span>&lt;&lt;i))<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,i);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>还可以预处理两个数能合并成哪个状态</p><p>同时如果结果一定是连续的话可以用这篇博客中的方法:<a href="https://www.cnblogs.com/charlotte-Y/p/9873039.html" target="_blank" rel="noopener">https://www.cnblogs.com/charlotte-Y/p/9873039.html</a></p><p>orz  高一人赢WYT</p><h3 id="T3-park"><a href="#T3-park" class="headerlink" title="T3 park"></a>T3 park</h3><p>有个暴力的$O(NQ)$做法可以得85分,我们记录最大值判断一下就可以了,卡时可以多得10分</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">40005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-keyword">int</span> d[maxn],lim[maxn];<br><span class="hljs-keyword">namespace</span> bf&#123;<br><span class="hljs-keyword">int</span> l,r,ind,sum,ans=<span class="hljs-number">0</span>,pos,anss=<span class="hljs-number">-1</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(q--)&#123;<br>read(l),read(r),read(ind);<br><span class="hljs-keyword">if</span>(anss!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,anss);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>ans=ind,pos=l,sum=ind;<br><span class="hljs-keyword">for</span>(ri i=l;i&lt;=r;i++)&#123;<br>sum= (sum+d[i]&gt;lim[i]) ? lim[i] : sum+d[i];<br><span class="hljs-keyword">if</span>(sum&lt;ind)sum=ind;<br><span class="hljs-keyword">else</span> ans=max(ans,sum);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">if</span>(clock()&gt;CLOCKS_PER_SEC*<span class="hljs-number">1.8</span>)anss=ans;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>freopen(<span class="hljs-string">"park.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"park.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>read(n),read(q);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(d[i]);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(lim[i]);<br>bf::main();<br><span class="hljs-comment">//double ed=clock();</span><br><span class="hljs-comment">//printf("%lf\n",ed-st);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><p>不管怎样这次考试也算是个警醒吧,心态也没有太崩,不能再颓了(Flag)</p><p>一首摇滚,来自CSGO音乐盒,这个把Life Is Not Out To Get You翻译成”人生何处不青山”,一下子就感觉逼格上去了,服气,虽然不太理解为什么这么译</p><embed src="//music.163.com/style/swf/widget.swf?sid=33933850&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all">]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[学习笔记]二分图匹配与匈牙利算法</title>
      <link href="/2018/10/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
      <url>/2018/10/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%E4%B8%8E%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天模拟赛T1二分图匹配板子题,但是我不会,于是就全场就我没AT1系列了,赶紧补坑</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>主要了解两个概念”交替路”,”增广路”.我们所做的就是不断找增广路.图我太懒不想画…推荐一个我认为写的很好的一篇博客,我就是在这学的</p><p><a href="https://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener">https://www.renfei.org/blog/bipartite-matching.html</a></p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><ul><li><p>最小点覆盖数等于二分图最大匹配数</p><p>证明见Matrix67大神Blog:<a href="http://www.matrix67.com/blog/archives/116" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/116</a></p></li><li><p>最大独立集点数数(点集不包含任何一条边)等于总点数减去二分图最大匹配数</p></li><li><p>DAG上的最小不相交路径覆盖(找出最少的经过顶点各不同的路径覆盖整个图)数等于点数减去最大匹配数</p><p><a href="https://blog.csdn.net/qq_39627843/article/details/82012572" target="_blank" rel="noopener">https://blog.csdn.net/qq_39627843/article/details/82012572</a></p></li></ul><p>这些还是比较有用的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>BFS版本</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> pre[maxn],match[maxn],vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hungarian</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-keyword">int</span> s,t,u,v,tmp;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)pre[i]=match[i]=<span class="hljs-number">-1</span>,vis[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">1</span>;o&lt;=n;o++)&#123;<br><span class="hljs-keyword">if</span>(match[o]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>pre[o]=<span class="hljs-number">-1</span>,q.push(o),flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(q.size()&amp;&amp;!flag)&#123;<br>u=q.front();q.pop();<br><span class="hljs-keyword">for</span>(ri i=h[u];i&amp;&amp;!flag;i=edge[i].ne)&#123;<span class="hljs-comment">//注意退出</span><br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(vis[v]==o)<span class="hljs-keyword">continue</span>;<br>vis[v]=o;<br><span class="hljs-keyword">if</span>(match[v]!=<span class="hljs-number">-1</span>)&#123;<br>q.push(match[v]);<br>pre[match[v]]=u;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>flag=<span class="hljs-number">1</span>;<br>s=u,t=v;<br><span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>tmp=match[s];<br>match[s]=t,match[t]=s;<br>s=pre[s],t=tmp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(match[o]!=<span class="hljs-number">-1</span>)ans++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意几点:</p><ul><li><p>我们找到一条增广路后要及时特判退出</p></li><li><p>用tmp记录s的另一个匹配</p></li><li>一开始起点pre赋为-1</li></ul><h3 id="例-水-题"><a href="#例-水-题" class="headerlink" title="例(水)题:"></a>例(水)题:</h3><h4 id="JZOJ5934-phalanx"><a href="#JZOJ5934-phalanx" class="headerlink" title="JZOJ5934 phalanx"></a>JZOJ5934 phalanx</h4><p>经典模型,行为左边的点集,列为右边的,对于不能染两次的行列连边,容易发现连了边的点一起选是非法的,我们要找的就是选出最多的点集使得没有一条边,转化成最大独立集来做</p><p>代码:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">4005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> h[maxn&lt;&lt;<span class="hljs-number">1</span>],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> match[maxn&lt;&lt;<span class="hljs-number">1</span>],pre[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> vis[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> n,num;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> u,v,s,t,tmp,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)vis[i]=<span class="hljs-number">0</span>,match[i]=pre[i]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">1</span>;o&lt;=n;o++)&#123;<br><span class="hljs-keyword">if</span>(match[o]==<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>q.push(o);<br>pre[o]=<span class="hljs-number">-1</span>,flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(q.size()&amp;&amp;!flag)&#123;<br>u=q.front();q.pop();<br><span class="hljs-comment">//vis[u]=1;</span><br><span class="hljs-keyword">for</span>(ri i=h[u];i&amp;&amp;!flag;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(vis[v]==o)<span class="hljs-keyword">continue</span>;<br>vis[v]=o;<br><span class="hljs-comment">//printf("--%d %d--\n",u,v);</span><br><span class="hljs-keyword">if</span>(match[v]!=<span class="hljs-number">-1</span>)&#123;<br>q.push(match[v]);<br>pre[match[v]]=u;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>flag=<span class="hljs-number">1</span>;<br>s=u,t=v;<br><span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>tmp=match[s];<br>match[s]=t,match[t]=s;<br>t=tmp,s=pre[s];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(match[o]!=<span class="hljs-number">-1</span>)ans++;<br>&#125;<br><span class="hljs-comment">//printf("%d %d\n",n*2,ans);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,(n*<span class="hljs-number">2</span>-ans)*n);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>freopen(<span class="hljs-string">"phalanx.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"phalanx.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>read(n),read(num);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=num;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y+n);<br>add_edge(y+n,x);<br>&#125;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JZOJ1922-小行星"><a href="#JZOJ1922-小行星" class="headerlink" title="JZOJ1922 小行星"></a>JZOJ1922 小行星</h4><p>像上题一样对于小行星所在行列连边,发现任何一条边的左右端点至少选一个,转化成最小点覆盖就好了</p><p>代码:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  Code By RyeCatcher<br>*/</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n,k,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> pre[maxn],match[maxn],vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hungarian</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-keyword">int</span> s,t,u,v,tmp;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)pre[i]=match[i]=<span class="hljs-number">-1</span>,vis[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">1</span>;o&lt;=n;o++)&#123;<br><span class="hljs-keyword">if</span>(match[o]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>pre[o]=<span class="hljs-number">-1</span>,q.push(o),flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(q.size()&amp;&amp;!flag)&#123;<br>u=q.front();q.pop();<br><span class="hljs-keyword">for</span>(ri i=h[u];i&amp;&amp;!flag;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(vis[v]==o)<span class="hljs-keyword">continue</span>;<br>vis[v]=o;<br><span class="hljs-keyword">if</span>(match[v]!=<span class="hljs-number">-1</span>)&#123;<br>q.push(match[v]);<br>pre[match[v]]=u;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>flag=<span class="hljs-number">1</span>;<br>s=u,t=v;<br><span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>tmp=match[s];<br>match[s]=t,match[t]=s;<br>s=pre[s],t=tmp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(match[o]!=<span class="hljs-number">-1</span>)ans++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n),read(k);<br><span class="hljs-keyword">int</span> x,y;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>read(x),read(y);<br>add_edge(x,n+y);<br>add_edge(n+y,x);<br>&#125;<br>hungarian();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些咕掉的纪中题解</title>
      <link href="/2018/10/29/%E4%B8%80%E4%BA%9B%E5%92%95%E6%8E%89%E7%9A%84%E7%BA%AA%E4%B8%AD%E9%A2%98%E8%A7%A3/"/>
      <url>/2018/10/29/%E4%B8%80%E4%BA%9B%E5%92%95%E6%8E%89%E7%9A%84%E7%BA%AA%E4%B8%AD%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="说在前"><a href="#说在前" class="headerlink" title="说在前"></a>说在前</h3><p>抱歉在这个站上咕了这么久,感觉我最近太懒了…21-28号左右的比赛报告和题解链接都在这里,enjoy your reading</p><p>比赛报告(咕了好多啊)</p><h4 id="NOIP2018模拟赛10-22-咕咕报告"><a href="#NOIP2018模拟赛10-22-咕咕报告" class="headerlink" title="NOIP2018模拟赛10.22]咕咕报告"></a><a href="https://www.cnblogs.com/Rye-Catcher/p/9841594.html" target="_blank" rel="noopener">NOIP2018模拟赛10.22]咕咕报告</a></h4><h4 id="NOIP2018模拟赛10-23-发呆报告"><a href="#NOIP2018模拟赛10-23-发呆报告" class="headerlink" title="NOIP2018模拟赛10.23]发呆报告"></a><a href="https://www.cnblogs.com/Rye-Catcher/p/9839086.html" target="_blank" rel="noopener">NOIP2018模拟赛10.23]发呆报告</a></h4><h4 id="NOIP2018模拟赛10-25-瞎搞报告"><a href="#NOIP2018模拟赛10-25-瞎搞报告" class="headerlink" title="NOIP2018模拟赛10.25]瞎搞报告"></a><a href="https://www.cnblogs.com/Rye-Catcher/p/9854275.html" target="_blank" rel="noopener">NOIP2018模拟赛10.25]瞎搞报告</a></h4><p>题解</p><p><a href="https://www.cnblogs.com/Rye-Catcher/p/9824106.html" target="_blank" rel="noopener">JZOJ5888]GCD生成树</a></p><p><a href="https://www.cnblogs.com/Rye-Catcher/p/9824384.html" target="_blank" rel="noopener">JZOJ5465]道路重建—边双缩点+树的直径</a></p><p><a href="https://www.cnblogs.com/Rye-Catcher/p/9843805.html" target="_blank" rel="noopener">luogu2657-Windy数题解—数位DP</a></p><embed src="//music.163.com/style/swf/widget.swf?sid=411921763&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all">]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2018模拟赛10.20A]挂分报告</title>
      <link href="/2018/10/20/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-20A-%E6%8C%82%E5%88%86%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/20/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-20A-%E6%8C%82%E5%88%86%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>先看看了B组,T1 ZROI刚好讲过一个性质原根一般很小的,直接枚举;T2一眼二分然后似乎状压 T3没看</p><p>然后上来A组题,T1 flow这名字…网络流？！</p><p>T1题面非常的社会主义核心价值观,看到有个$m==n$的限制就想如果去掉怎么样,发现一棵树的话答案是确定的,然后考虑加上那条多出来的边,发现答案还是不变的?!想了想好像确实是这样,你树边确定了环边根本不用管,判断有无解就是点值加起来是否为0.于是直接DFS扫一遍去掉环边再DFS一遍就好了</p><p>T2 题面1984还行 <del>出题人小心啊</del> 扫了一眼觉得好难告辞</p><p>T3 第一眼题面 woc!!<del>求求你们给国家省点子弹</del>,我觉得博客中贴出这题题面的也要被查睡标了</p><p>第二眼woc?!这不是雅礼集训讲过的原题吗?!还记得点思路就是预处理坐几班车最远可到达的地方,讲题人还提到了长链剖分</p><p>于是肛肛肛…结果死活没调出来…然后xxzh巨佬讲了一种更好写的暴力….感觉以后考试看到原题还是得想想有没有其他的思路</p><p>结果15+0+0  T1 TM 正负号打反了,又犯SB错误 心态崩了</p><h3 id="T1-flow"><a href="#T1-flow" class="headerlink" title="T1 flow"></a>T1 flow</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>某div 2 F竟这么水<del>(你还不是挂分了)</del></p><p>见闲扯</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to,id;<br><span class="hljs-keyword">bool</span> ok;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>edge[num_edge].id=id;<br>edge[num_edge].ok=<span class="hljs-number">0</span>;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> w[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Nico</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y,id,dis;<br>&#125;nico[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QAQ</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y,fff;<br><span class="hljs-keyword">int</span> xd,yd;<br>&#125;yyy[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">namespace</span> fake&#123;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gao_cyc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<span class="hljs-comment">//去非树边</span><br><span class="hljs-keyword">int</span> v;<br>vis[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(vis[v])&#123;<br>edge[i].ok=edge[i^<span class="hljs-number">1</span>].ok=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(edge[i].ok)<span class="hljs-keyword">continue</span>;<br>fa[v]=now;<br>gao_cyc(v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_ans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v,id=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(edge[i].ok)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(v==fa[now])&#123;<br>id=edge[i].id;<span class="hljs-keyword">continue</span>;<br>&#125;<br>get_ans(v);<br>&#125;<br>yyy[++tot].x=now,yyy[tot].y=fa[now];<br>yyy[tot].xd=-w[now],yyy[tot].yd=w[now];<br>yyy[tot].fff=id;<br>w[fa[now]]+=w[now];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,a,b;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ans+=w[i];<br>&#125;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"Possible"</span>);<br><span class="hljs-keyword">else</span>&#123; <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"Impossible"</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>gao_cyc(<span class="hljs-number">1</span>);<br>get_ans(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br>x=yyy[i].x,y=yyy[i].y;<br>a=nico[yyy[i].fff].x,b=nico[yyy[i].fff].y;<br><span class="hljs-comment">//printf("%d %d %d %d\n",x,y,a,b);</span><br><span class="hljs-keyword">if</span>(x==a&amp;&amp;y==b)&#123;<br>nico[yyy[i].fff].dis=-yyy[i].xd;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==b&amp;&amp;y==a)&#123;<br>nico[yyy[i].fff].dis=-yyy[i].yd;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,-nico[i].dis);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>FO(flow);<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(w[i]);<br>read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y,i);<br>add_edge(y,x,i);<br>nico[i].x=x,nico[i].y=y,nico[i].dis=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//if(m&lt;=20&amp;&amp;n&lt;=20)bf::main();</span><br>fake::main();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2-moon"><a href="#T2-moon" class="headerlink" title="T2 moon"></a>T2 moon</h3><p>咕</p><h3 id="T3-car"><a href="#T3-car" class="headerlink" title="T3 car"></a>T3 car</h3><ul><li>前置技能点<ul><li>倍增</li><li>扫描线</li><li>dfs序</li></ul></li></ul><p>预处理每个点在一条链上坐$2^j$次车最远到哪里,这显然可以倍增搞</p><p>然后考虑答案怎么算</p><p>对于询问$(x,y)$,求出$z=lca(x,y)$,$x,y$先分别跳到距$z$最近的点(也就是下次就到$z$或更远),这时候先统计个答案步数$ans$</p><p>然后发现答案只有两种情况</p><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case#1"></a>Case#1</h4><p>两点分别跳一次到$z$,最终$ans=ans+2$</p><h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case#2"></a>Case#2</h4><p>设这时候$x,y$分别跳到了$x’,y’$</p><p>有一班车覆盖了路径$(x’,y’)$，那么答案就是$ans=ans+1$,因为你只要坐这班车就可以越过LCA到另一个点</p><p>考虑怎么判断有没有一班车覆盖这条路径,转化一下变成是否有一班车$(st,ed)$,$st$在$x’$子树中,$ed$在$y’$子树中(包括$x’.y’$)</p><p>如果你看过<a href="https://rye-catcher.github.io/2018/10/17/JZOI100019-A-dfs%E5%BA%8F-%E6%89%AB%E6%8F%8F%E7%BA%BF/">https://rye-catcher.github.io/2018/10/17/JZOI100019-A-dfs%E5%BA%8F-%E6%89%AB%E6%8F%8F%E7%BA%BF/</a></p><p>就会发现这还可以继续转化成$dfn[x’]&lt;=dfn[st]&lt;=ed[x’],dfn[y’]&lt;=dfn[ed]&lt;=ed[y’]$</p><p>将$(dfn[st],dfn[ed])$看成一个坐标,发现就是判断一个矩形中有没有点</p><p>似乎可以在线主席树做,也好像可以二分套二分,这里学到了一个新操作树状数组+扫描线+二维前缀和</p><p>我们转化后询问$(x’,y’)$矩形的四个坐标为$(dfn[x’],dfn[y’]),(dfn[x’],ed[y’]),(ed[x’],dfn[y’]),(ed[x’],ed[y’])$</p><p>一条班车路径转化成一个点$(dfn[st],dfn[ed])$</p><p>我们把这些点放在一起按照扫描线思路，将点按横坐标进行排序,然后遍历所有点(优先遍历班车路径转化后的点)</p><p>如果是班车路径的点,加入树状数组$[1,dfn[ed]]$($dfn[ed]$其实就是坐标(x,y)中的$y$)前缀和</p><p>如果是个矩形想要查询里面点数咋办?二维前缀和.</p><p><img src="https://i.loli.net/2018/10/20/5bcb4e07eb318.png" alt="233"></p><p>我们是将所有点按横坐标排序的,所以我们可以先加上$B$的点数,减去$A+B$的点数，然后等到$ed[x’]$坐标时减去$B+C$ 点数,最后加上整个大面积就是矩形内点数</p><p>显然这些部分直接查询树状数组前缀和就好了</p><p>然后有非常多的细节,见代码注释吧…</p><p>对于树上路径,我们都默认dfs序小的为起点方便处理,也算是个技巧</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m,q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">23</span>];<br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],son[maxn],size[maxn],top[maxn],dfn[maxn],ed[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//if(now==150000)printf("wtf %d\n",now,fa[now]);</span><br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>        dep[v]=dep[now]+<span class="hljs-number">1</span>,fa[v]=now;<br>        dfs_1(v);<br>        size[now]+=size[v];<br>        <span class="hljs-keyword">if</span>(!son[now]||size[v]&gt;size[son[now]])son[now]=v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    dfn[now]=++tot,top[now]=t;<br>    <span class="hljs-keyword">if</span>(!son[now])&#123;<br>        ed[now]=tot;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    dfs_2(son[now],t);<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>        dfs_2(v,v);<br>    &#125;<br>    ed[now]=tot;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> xx=x,yy=y;<br>    <span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br>        <span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="hljs-built_in">std</span>::swap(x,y);<br>        x=fa[top[x]];<br>    &#125;<br>    <span class="hljs-comment">//if(!x)printf("--%d %d %d--\n",xx,yy,x);</span><br>    <span class="hljs-keyword">if</span>(dep[x]&gt;dep[y])<span class="hljs-keyword">return</span> y;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>        pre_dfs(v);<br>        <span class="hljs-keyword">if</span>(!f[now][<span class="hljs-number">0</span>]||(f[v][<span class="hljs-number">0</span>]&amp;&amp;dep[f[now][<span class="hljs-number">0</span>]]&gt;dep[f[v][<span class="hljs-number">0</span>]]))f[now][<span class="hljs-number">0</span>]=f[v][<span class="hljs-number">0</span>];<span class="hljs-comment">//特判 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,id,d;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Seg &amp;rhs)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> (x==rhs.x)?id&lt;rhs.id:x&lt;rhs.x;<br>    &#125;<br>&#125;seg[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> sum[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> k)</span></span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n;x+=x&amp;(-x))sum[x]+=k;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;x&gt;=<span class="hljs-number">1</span>;x-=x&amp;(-x))tmp+=sum[x];<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><span class="hljs-keyword">int</span> fac[maxn],ans[maxn];<br><span class="hljs-keyword">int</span> qwq=<span class="hljs-number">0</span>,pt[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,lca;<br>    <span class="hljs-comment">//DEBUG</span><br>    read(n);<br>    fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        f[i][<span class="hljs-number">0</span>]=i;<br>        read(fa[i]);<br>        add_edge(i,fa[i]),add_edge(fa[i],i);<br>    &#125;<br>    dep[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    dfs_1(<span class="hljs-number">1</span>);<br>    dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        read(x),read(y);<br>        <span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>        lca=get_lca(x,y);<br>        <span class="hljs-keyword">if</span>(!f[x][<span class="hljs-number">0</span>]||dep[f[x][<span class="hljs-number">0</span>]]&gt;dep[lca])f[x][<span class="hljs-number">0</span>]=lca;<br>        <span class="hljs-keyword">if</span>(!f[y][<span class="hljs-number">0</span>]||dep[f[y][<span class="hljs-number">0</span>]]&gt;dep[lca])f[y][<span class="hljs-number">0</span>]=lca;<br>        seg[++qwq]=(Seg)&#123;dfn[x],dfn[y],<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    pre_dfs(<span class="hljs-number">1</span>);<br>    fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(f[i][<span class="hljs-number">0</span>]==i)&#123;<br>        f[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//注意这里要置为不可行 </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">21</span>;k++)&#123;<br>        fac[k]=(fac[k<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i][k]=f[f[i][k<span class="hljs-number">-1</span>]][k<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-comment">//for(ri k=0;k&lt;=2;k++)for(ri i=1;i&lt;=n;i++)printf("%d %d %d\n",i,k,f[i][k]);</span><br>    <span class="hljs-keyword">int</span> po,qo;<br>    read(q);<br>    <span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">1</span>;o&lt;=q;o++)&#123;<br>        read(x),read(y);<br>        <span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>        lca=get_lca(x,y);<br>        po=x,qo=y;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">21</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            <span class="hljs-keyword">if</span>(dep[f[po][i]]&gt;dep[lca])&#123;<br>                po=f[po][i];<br>                ans[o]+=fac[i];<br>            &#125;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">21</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            <span class="hljs-keyword">if</span>(dep[f[qo][i]]&gt;dep[lca])&#123;<br>                qo=f[qo][i];<br>                ans[o]+=fac[i];<br>            &#125;<br>        <span class="hljs-keyword">if</span>((!f[po][<span class="hljs-number">0</span>]&amp;&amp;po!=lca)||(!f[qo][<span class="hljs-number">0</span>]&amp;&amp;qo!=lca))&#123;<span class="hljs-comment">//注意!! </span><br>            ans[o]=<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(po==lca||qo==lca)&#123;<br>                ans[o]++;<br>                <span class="hljs-comment">//printf("--%d %d--\n",o,ans[o]);</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ans[o]+=<span class="hljs-number">2</span>;<br>                <span class="hljs-comment">//printf("--%d %d--\n",o,ans[o]);</span><br>                seg[++qwq]=(Seg)&#123;dfn[po]<span class="hljs-number">-1</span>,dfn[qo]<span class="hljs-number">-1</span>,o,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//二维前缀和 </span><br>                seg[++qwq]=(Seg)&#123;ed[po],ed[qo],o,<span class="hljs-number">1</span>&#125;;<br>                seg[++qwq]=(Seg)&#123;dfn[po]<span class="hljs-number">-1</span>,ed[qo],o,<span class="hljs-number">-1</span>&#125;;<br>                seg[++qwq]=(Seg)&#123;ed[po],dfn[qo]<span class="hljs-number">-1</span>,o,<span class="hljs-number">-1</span>&#125;;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::sort(seg+<span class="hljs-number">1</span>,seg+<span class="hljs-number">1</span>+qwq);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=qwq;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!seg[i].id)&#123;<br>            update(seg[i].y,seg[i].d);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            pt[seg[i].id]+=seg[i].d*query(seg[i].y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>        <span class="hljs-keyword">if</span>(pt[i])<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JZOJ3521]道路覆盖--树形DP</title>
      <link href="/2018/10/20/JZOJ3521-%E9%81%93%E8%B7%AF%E8%A6%86%E7%9B%96-%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2018/10/20/JZOJ3521-%E9%81%93%E8%B7%AF%E8%A6%86%E7%9B%96-%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>略略略</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先一看到使得最低的高度最高就想到了二分,于是就转化成了一个是否可行的问题</p><p>发现这个$k$都很小,考虑使用状态压缩DP</p><p>但是我一开始发现似乎并不好设计状态…如果这个$k$表示前$k$个方块的状态有没有开始涂似乎不好转移</p><p>看了solution发现我还是$Too Young Too Simple$</p><p>我们用对于第$i$块,对它决策有影响的只有它前面的$i-k+1$块的状态,于是我们只需要用一个$k$位二进制串表示状态来从$i$递推到$i+1$.对于块$p$二进制串的第$i$位(0位开始)表示第$p-(k-i-1)$块的状态</p><p>$f[i][s]$表示已经从前往后决策完第$i$块,$i-k+1$到$i$的状态为$s$的最小代价,这些状态保证都是合法的(即所有的高度等于等于二分值)</p><p>这时候从$i$递推到$i+1$的话我们需要知道之前$i+1$之前$k$块能累高$i+1$块多少高度,这直接扫一遍就好了</p><p>如果之前累加的高度$dta$+$h[i+1]$大于等于二分的高度,那么我们可以不选涂第$i+1$块</p><p>$f[i+1][s&gt;&gt;1]=min(f[i+1][s&gt;&gt;1],f[i][s])$,这时候第$k-1$位为0表示$i+1$位没涂</p><p>如果$dta+h[i+1]+e[i+1]$大于等于二分值,那么我们就可以涂</p><p>$f[i+1][s&gt;&gt;1|(1&lt;&lt;(k-1))]=min(f[i+1][s&gt;&gt;1|(1&lt;&lt;(k-1))],f[i][s]+c[i+1])$</p><p>意义和第一个类似表示$i+1$位涂的状态</p><p>最后判断是否有状态$f[n][s]&lt;=m$就好了</p><p>感觉这题还是挺不错的,通过考虑那些状态会影响决策来减小决策空间,表示状态的方法也比较独特(可能是我太菜做的题少)</p><p>同时从大佬代码中学到了一个优化就是可行性剪枝,对于$f[i][s]$已经大于等于$m$的我们直接不管</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEBUG freopen(<span class="hljs-meta-string">"dat.in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(<span class="hljs-meta-string">"wa.out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1&lt;&lt;22</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span><span class="hljs-number">-1926817</span>;<br><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">11</span>];<br><span class="hljs-keyword">int</span> S,n,m,k;<br><span class="hljs-keyword">int</span> h[maxn],c[maxn],e[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span>  <span class="hljs-keyword">bool</span> <span class="hljs-title">chk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> qwq)</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;S;j++)f[i][j]=inf;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">0</span>;o&lt;n;o++)&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;S;i++)&#123;<br><span class="hljs-keyword">if</span>(f[o][i]&gt;m)<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//优化 </span><br>num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;k;j++)&#123;<br><span class="hljs-keyword">if</span>(o-(k-j)+<span class="hljs-number">1</span>&lt;=<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;j))num+=e[o-(k-j)+<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span>(num+h[o+<span class="hljs-number">1</span>]&gt;=qwq)&#123;<br>f[o+<span class="hljs-number">1</span>][i&gt;&gt;<span class="hljs-number">1</span>]=min(f[o+<span class="hljs-number">1</span>][i&gt;&gt;<span class="hljs-number">1</span>],f[o][i]);<br>&#125;<br><span class="hljs-keyword">if</span>(num+h[o+<span class="hljs-number">1</span>]+e[o+<span class="hljs-number">1</span>]&gt;=qwq)&#123;<br>f[o+<span class="hljs-number">1</span>][i&gt;&gt;<span class="hljs-number">1</span>|(<span class="hljs-number">1</span>&lt;&lt;(k<span class="hljs-number">-1</span>))]=min(f[o+<span class="hljs-number">1</span>][i&gt;&gt;<span class="hljs-number">1</span>|(<span class="hljs-number">1</span>&lt;&lt;(k<span class="hljs-number">-1</span>))],f[o][i]+c[o+<span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;S;j++)<span class="hljs-keyword">if</span>(f[n][j]&lt;=m)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>FO(cover)<br>read(n),read(m),read(k);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(h[i]),read(e[i]),read(c[i]);<br>&#125;<br>S=<span class="hljs-number">1</span>&lt;&lt;k;<br><span class="hljs-keyword">int</span> mid,L=<span class="hljs-number">0</span>,R=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>(L&lt;=R)&#123;<br>mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(chk(mid))ans=mid,L=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> R=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2018模拟赛10.19]只会暴力报告</title>
      <link href="/2018/10/19/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-19-%E5%8F%AA%E4%BC%9A%E6%9A%B4%E5%8A%9B%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/19/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-19-%E5%8F%AA%E4%BC%9A%E6%9A%B4%E5%8A%9B%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>今天又是暴力满满<del>(并不)</del>的一天呢</p><p>昨天老师说了分数要正态分布,今天看起来…不过暴力分很多,虽然我人太傻逼又没打满</p><p>T1 woc?不是说送分的吗,看起来又是个树形DP神题,暴力告辞,链上的搞一搞</p><p>T2 woc?又是树 纪中这么喜欢出图/树题的吗?第一眼暴力dij告辞</p><p>T3 woc?又又又是树?!看起来十分码农?!部分分还好很多,想到昨天老师提到了天天爱跑步的例子,感觉可以搞一搞…于是就开始爆肝了…结果期望30分开了个fread爆0了</p><p>$30+30+0$凉凉,T2堆改成$paring$_$heap$就50了,辣鸡STL.虽然有一个更优的暴力…</p><h3 id="T1-lkf"><a href="#T1-lkf" class="headerlink" title="T1 lkf"></a>T1 lkf</h3><p>又是道神奇树形DP,分析先咕会</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3335</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> P=<span class="hljs-number">19260817</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n,k,w[maxn],mx=-inf;<br><span class="hljs-keyword">int</span> id,o,lim;<br>ll f[maxn][maxn];<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;ll p=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//printf("%d %d\n",now,fa);</span><br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(w[v]&gt;=o&amp;&amp;w[v]&lt;=o+lim&amp;&amp;(w[v]!=o||(w[v]==o&amp;&amp;v&gt;id)))&#123;<br>dfs(v,now);<br><span class="hljs-comment">//printf("%d %d %d\n",fa,now,v);</span><br>p=p*(f[v][lim]+<span class="hljs-number">1</span>)%P;<br>&#125;<br>&#125;<br>f[now][lim]=p;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>read(n),read(k);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(w[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>o=w[i],id=i,lim=k;<br>dfs(i,<span class="hljs-number">0</span>);<br><span class="hljs-comment">//puts("wtf");</span><br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)&#123;<br>ans=(ans+f[i][k])%P;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>lim=k<span class="hljs-number">-1</span>;<br>dfs(i,<span class="hljs-number">0</span>);<br>ans=(ans+(f[i][k]-f[i][lim])%P+P)%P;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans%P);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2-worry"><a href="#T2-worry" class="headerlink" title="T2 worry"></a>T2 worry</h3><p>有个性质就是因为你树上边随便走,你断掉一条树边后你最多走一条非树边。$naiive$的做法就是枚举了,有没有更高明的呢?</p><p>我们边从小到大排序,发现对于边$(x,y)$,它影响$(x,y)$路径上的边(也就是断掉路径上的任何一条边还可以通过$(x,y)$联通),也就是$x,y$分别到$lca(x,y)$路径上的</p><h4 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h4><p>那么链剖就可以搞喽,线段树维护一个永久标记,如果有标记了也不管(因为边权从小到大排序)</p><p>跑得还挺快</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>ll dis;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,ll c)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>edge[num_edge].dis=c;<br>h[f]=num_edge;<br>&#125;<br>pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; qwq[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Niconiconi</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y;<br>ll dis;<br>Niconiconi()&#123;x=y=dis=<span class="hljs-number">0</span>;&#125;<br>Niconiconi(<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y,ll _c)&#123;x=_x,y=_y,dis=_c;&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Niconiconi &amp;rhs)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> dis&lt;rhs.dis;<br>&#125;<br>&#125;con[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],son[maxn],size[maxn],top[maxn],dfn[maxn],rnk[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>size[now]=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//printf("%d %d\n",now,fa[now]);</span><br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>dep[v]=dep[now]+<span class="hljs-number">1</span>,fa[v]=now;<br>dfs1(v);<br>size[now]+=size[v];<br><span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>top[now]=t,dfn[now]=++tot,rnk[tot]=now;<br><span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>dfs2(son[now],t);<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>dfs2(v,v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> tag[maxn&lt;&lt;<span class="hljs-number">2</span>],w[maxn];<br><span class="hljs-keyword">int</span> L,R,dta;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!tag[now&lt;&lt;<span class="hljs-number">1</span>])tag[now&lt;&lt;<span class="hljs-number">1</span>]=tag[now];<span class="hljs-comment">//tag[now&lt;&lt;1|1]=tag[now];</span><br><span class="hljs-keyword">if</span>(!tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>])tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=tag[now];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag[now])<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>tag[now]=dta;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>pushdown(now);<br><span class="hljs-keyword">if</span>(L&lt;=mid&amp;&amp;!tag[now&lt;&lt;<span class="hljs-number">1</span>])update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R&amp;&amp;!tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>])update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ahaha</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br><span class="hljs-keyword">if</span>(tag[now])w[rnk[l]]=tag[now];<br><span class="hljs-keyword">else</span> w[rnk[l]]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>pushdown(now);<br>ahaha(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>ahaha(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="hljs-built_in">std</span>::swap(x,y);<br>L=dfn[top[x]],R=dfn[x];<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dep[x]&gt;dep[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>L=dfn[x]+<span class="hljs-number">1</span>,R=dfn[y];<br><span class="hljs-comment">//printf("--%d %d--\n",rnk[L],rnk[R]);</span><br><span class="hljs-keyword">if</span>(L&gt;R)<span class="hljs-keyword">return</span> ;<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;ll z;<br>FO(worry);<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y,<span class="hljs-number">0</span>);<br>add_edge(y,x,<span class="hljs-number">0</span>);<br>qwq[i]=pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;(x,y);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y),read(z);<br>con[i]=Niconiconi(x,y,z);<br>&#125;<br><span class="hljs-built_in">std</span>::sort(con+<span class="hljs-number">1</span>,con+<span class="hljs-number">1</span>+m);<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>dfs1(<span class="hljs-number">1</span>);<br>dfs2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(tag,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(tag));<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>x=con[i].x,y=con[i].y,dta=con[i].dis;<br>update_path(x,y);<br>&#125;<br>ahaha(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>x=qwq[i].first,y=qwq[i].second;<br><span class="hljs-keyword">if</span>(dep[x]&lt;dep[y])<span class="hljs-built_in">std</span>::swap(x,y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,w[x]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>题解是更高明的并查集做法,我还是Too Young Too Simple,只会SB暴力树剖</p><p>每个点指向下一个没被打标记的点$nxt[x]$(以点代边),显然这是可传递的</p><p>这样的话每次查询直接往上跳就好了,连LCA都不用求</p><p>居然跑到rank1哈哈</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Niconiconi</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y,z;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Niconiconi &amp;qwq)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> z&lt;qwq.z;<br>&#125;<br>&#125;nico[maxn];<br><span class="hljs-keyword">int</span> ans[maxn],dep[maxn],fa[maxn],nxt[maxn],fa_id[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> (nxt[x]==x)?nxt[x]:nxt[x]=get(nxt[x]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br><span class="hljs-keyword">if</span>((v=edge[i].to)==fa[now])<span class="hljs-keyword">continue</span>;<br>fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>,fa_id[v]=i;<br>dfs(v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z,p;<br>FO(worry);<br>read(n),read(m);nxt[n]=n;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y),add_edge(y,x);<br>nxt[i]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(nico[i].x),read(nico[i].y),read(nico[i].z);<br>&#125;<br><span class="hljs-built_in">std</span>::sort(nico+<span class="hljs-number">1</span>,nico+<span class="hljs-number">1</span>+m);<br>fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>,dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>x=get(nico[i].x),y=get(nico[i].y),z=nico[i].z;<br><span class="hljs-keyword">while</span>(x!=y)&#123;<br><span class="hljs-keyword">if</span>(dep[x]&lt;dep[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>ans[fa_id[x]]=z;<br>nxt[x]=x=get(fa[x]);<br>&#125;<br>&#125;<br>p=<span class="hljs-number">2</span>*n;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;p;i+=<span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]?ans[i]:(ans[i^<span class="hljs-number">1</span>]?ans[i^<span class="hljs-number">1</span>]:<span class="hljs-number">-1</span>));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2018模拟赛10.18]自闭报告</title>
      <link href="/2018/10/18/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-18-%E8%87%AA%E9%97%AD%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/18/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-18-%E8%87%AA%E9%97%AD%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>这一天,菜鸡RyeCatcher又想起来了被毒瘤题支配的恐惧</p><p>今天比较好玩,还是ljy提醒才发现文件夹里有题面…不知道外面的人什么时候才发现</p><p>看完了题面,又回到了雅礼啥题也不会写的感觉</p><p>T1 发现操作就是交换两个数于是写了个假做法就是不同的数之和;分类讨论后文件夹里突然出现一个大样例!发现我的输出居然少5!?于是又分类讨论码码码.后面又有人说大样例是假的woc…T2 暴力 没码完 T3 没思路…</p><p>结果30+0+0凉凉,分类讨论多给了我10分hhh</p><p>下午讲题的时候因为1926过于瞩目被钦点了,因为码风一贯过长被出题人问是不是正解写挂了也是尴尬…</p><p>啊鼠标电池没电了好烦啊    QAQ</p><h3 id="T1-duliu"><a href="#T1-duliu" class="headerlink" title="T1 duliu"></a>T1 duliu</h3><p>操作就是交换你手中的数和数列中的一个数</p><p>怎么判-1?把异或和放在末尾判断排序后是否完全相等(虽然用哈希表也可以)</p><p>然后把数字离散化之后将$a[i],b<a href="a[i]!=b[i]">i</a>$连边,我们发现如果你手中有一个联通块中的数,那么这个联通块中的数你都可以经过交换得到,但是考虑你从一个联通块跳到另一个还需要换一次数.所以答案为联通块个数+各个联通块的大小.</p><p>这个联通块的大小怎么定义?对于联通块点集$T$, $size[T] =\sum_{x \in T} times[x]$,$times[x]$指$x$在$a$数组中的出现次数</p><p>但是还有一件事要注意,就是特判你当前手中的数—$a$数组的异或之和</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br>gp_hash_table &lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; g;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> a[maxn],b[maxn],c[maxn],d[maxn],n;<br><span class="hljs-keyword">int</span> fa[maxn&lt;&lt;<span class="hljs-number">1</span>],size[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">bool</span> vis[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> (fa[x]==x)?fa[x]:(fa[x]=get(fa[x]));&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>x=get(x),y=get(y);<br><span class="hljs-keyword">if</span>(x==y)&#123;<br><span class="hljs-comment">//size[x]++;</span><br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">if</span>(size[x]&lt;size[y])&#123;<br>size[y]+=size[x];<br>fa[x]=y;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>size[x]+=size[y];<br>fa[y]=x;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//DEBUG</span><br><span class="hljs-comment">//freopen("dat.in","r",stdin);</span><br><span class="hljs-comment">//freopen("duliu_3.in","r",stdin);</span><br><span class="hljs-keyword">int</span> x,pre_sum=<span class="hljs-number">0</span>;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x);<br>pre_sum^=x;<br><span class="hljs-keyword">if</span>(!g[x])&#123;<br>g[x]=++tot;<br>vis[tot]=<span class="hljs-number">0</span>,size[tot]=<span class="hljs-number">0</span>,fa[tot]=tot;<br>f[tot]=x;<br>&#125;<br>c[i]=a[i]=g[x];<br>&#125;<br><span class="hljs-keyword">if</span>(!g[pre_sum])&#123;<br>g[pre_sum]=++tot,f[tot]=g[pre_sum];<br>vis[tot]=<span class="hljs-number">0</span>,size[tot]=<span class="hljs-number">0</span>,fa[tot]=tot;<br>&#125;<br><span class="hljs-comment">//printf("--%d--\n",pre_sum);</span><br>a[n+<span class="hljs-number">1</span>]=c[n+<span class="hljs-number">1</span>]=g[pre_sum];<br>pre_sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x);<br>pre_sum^=x;<br><span class="hljs-keyword">if</span>(!g[x])&#123;<br>g[x]=++tot;<br>vis[tot]=<span class="hljs-number">0</span>,size[tot]=<span class="hljs-number">0</span>,fa[tot]=tot;<br>f[tot]=x;<br>&#125;<br>d[i]=b[i]=g[x];<br><span class="hljs-keyword">if</span>(a[i]!=b[i])size[a[i]]++;<br>&#125;<br><span class="hljs-keyword">if</span>(!g[pre_sum])&#123;<br>g[pre_sum]=++tot,f[tot]=g[pre_sum];<br>vis[tot]=<span class="hljs-number">0</span>,size[tot]=<span class="hljs-number">1</span>,fa[tot]=tot;<br>&#125;<br>b[n+<span class="hljs-number">1</span>]=d[n+<span class="hljs-number">1</span>]=g[pre_sum];<br>n++;<br><span class="hljs-built_in">std</span>::sort(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+n);<span class="hljs-built_in">std</span>::sort(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(c[i]!=d[i])&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<br><span class="hljs-keyword">if</span>(a[i]!=b[i])&#123;<br>merge(a[i],b[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>x=get(a[n]);<br><span class="hljs-keyword">if</span>(size[x]==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//用if(a[n]==b[n])更好</span><br>ans=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>x=get(a[i]);<br><span class="hljs-keyword">if</span>(!vis[x])&#123;<br><span class="hljs-keyword">if</span>(size[x]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>cnt++,vis[x]=<span class="hljs-number">1</span>;<br>ans+=size[x];<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans+cnt<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2-travel"><a href="#T2-travel" class="headerlink" title="T2 travel"></a>T2 travel</h3><p>又是道树形DP神仙题</p><p>这个平方和期望期望有点毒,不能普通地用$(a+b)^2$算,类比搞矩阵时的非齐次线性递推（似乎叫这个名字）</p><p>$(a+b)^2 = a^2 + 2 \times ab +b^2$</p><p>又转化成线性的了</p><p>先想想怎么算$F$值,倍增/链剖都是资瓷的.然而题解有一种高明的线性做法—-树上差分+栈</p><p>我们dfs到一个点$x$将该点入栈,从这点回溯到父亲就出栈,发现$y=st[max(0,top-d[x]-1)]$就是能走到最远的点的父亲</p><p>然后$tag[x]+=a[x],tag[y]-=a[x]$ ,最后按照树上差分套路求波子树和就好了</p><p>求期望考虑naiive 的树形DP,钦定每一个点为根计算答案</p><p>$g[x]$表示$x$子树联通块和平方期望,按上面式子推;$s[x]$表示$x$子树期望和,这是可以线性推的</p><p>一开始$g[x]=F[x]^2,s[x]=F[x]$</p><p>$g[x] = p \times (g[x]+2 \times s[x] \times s[son[x]]+g[son[x]]) +(1-p) \times g[x]$</p><p>$s[x]= p \times (s[x]+s[son[x]])+(1-p) \times s[x]$</p><p>对于$x$的每个儿子这么合并就好了</p><p>这样是$O(nq)$或$O(n^2)$的,发现这个可以二次扫描加换根搞</p><p>如果不知道建议先去学一学<a href="https://rye-catcher.github.io/tags/%E4%BA%8C%E6%AC%A1%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%8D%A2%E6%A0%B9/">https://rye-catcher.github.io/tags/%E4%BA%8C%E6%AC%A1%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%8D%A2%E6%A0%B9/</a></p><p>二次换根是从上往下递推的,我们对于点$x$,求出$o[x][0/1]$,表示向上的联通块和平方期望&amp;和期望,再对于$x$的儿子的遍历顺序搞一个前缀$pre$和后缀$suf$记录兄弟子树的联通块平方和期望与和期望,然后按照平方和公式拆开合并就好了</p><p>注意合并前缀后缀,父亲向上和父亲本身成$o[v][0/1]$时,我们只用乘以相连$p$的概率,昨天就是这里搞错了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> ll P=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>ll p;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,ll c)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>edge[num_edge].p=c;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> d[maxn];<br>ll a[maxn],tag[maxn],f[maxn],g[maxn],s[maxn];<br><span class="hljs-keyword">int</span> st[maxn],top=<span class="hljs-number">0</span>,fa[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v,x;<br>x=st[max(<span class="hljs-number">0</span>,top-d[now])];<br>st[++top]=now,tag[now]=(tag[now]+a[now])%P,tag[x]=(tag[x]+P-a[now])%P;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>fa[v]=now;<br>pre_dfs(v);<br>&#125;<br>top--;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>f[now]=(f[now]+tag[now]+P)%P;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>get_sum(v);<br>f[now]=(f[now]+f[v])%P;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> rt;<br>ll fa_dis[maxn],ans[maxn],pp;<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; son[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>g[now]=f[now]*f[now]%P,s[now]=f[now];<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dfs_1(v,now);<br>pp=edge[i].p;<br>fa_dis[v]=pp;<br>son[now].push_back(v);<br>g[now]=(g[now]+pp*((<span class="hljs-number">2</span>*s[now]*s[v]%P+g[v])%P)%P)%P;<br>s[now]=((s[now]+s[v])*pp%P+((<span class="hljs-number">1</span>-pp)%P+P)*s[now]%P)%P;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>ll pre[maxn][<span class="hljs-number">2</span>],suf[maxn][<span class="hljs-number">2</span>],o[maxn][<span class="hljs-number">2</span>];<span class="hljs-comment">//兄弟前缀  兄弟后缀 上方 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> x,v;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> size=son[now].size();<br>o[now][<span class="hljs-number">0</span>]=(o[now][<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*o[now][<span class="hljs-number">1</span>]*f[fa]%P+f[fa]*f[fa]%P)*fa_dis[now]%P;<br>o[now][<span class="hljs-number">1</span>]=(o[now][<span class="hljs-number">1</span>]+f[fa])*fa_dis[now]%P;<br>ans[now]=((g[now]+o[now][<span class="hljs-number">0</span>])%P+<span class="hljs-number">2</span>*s[now]*o[now][<span class="hljs-number">1</span>]%P)%P;<br>pre[now][<span class="hljs-number">0</span>]=o[now][<span class="hljs-number">0</span>],pre[now][<span class="hljs-number">1</span>]=o[now][<span class="hljs-number">1</span>];<br>suf[now][<span class="hljs-number">0</span>]=suf[now][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ui i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>v=son[now][i],pp=fa_dis[v];<br>o[v][<span class="hljs-number">0</span>]=(o[v][<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*o[v][<span class="hljs-number">1</span>]*pre[now][<span class="hljs-number">1</span>]%P+pre[now][<span class="hljs-number">0</span>])%P;<br>o[v][<span class="hljs-number">1</span>]=(o[v][<span class="hljs-number">1</span>]+pre[now][<span class="hljs-number">1</span>])%P;<br>pre[now][<span class="hljs-number">0</span>]=(pre[now][<span class="hljs-number">0</span>]+pp*(<span class="hljs-number">2</span>*pre[now][<span class="hljs-number">1</span>]*s[v]%P+g[v])%P)%P;<br>pre[now][<span class="hljs-number">1</span>]=((pre[now][<span class="hljs-number">1</span>]+s[v])*pp%P+((<span class="hljs-number">1</span>-pp)%P+P)*pre[now][<span class="hljs-number">1</span>]%P)%P;<br>v=son[now][size-i<span class="hljs-number">-1</span>],pp=fa_dis[v];<br>o[v][<span class="hljs-number">0</span>]=(o[v][<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*o[v][<span class="hljs-number">1</span>]*suf[now][<span class="hljs-number">1</span>]%P+suf[now][<span class="hljs-number">0</span>])%P;<br>o[v][<span class="hljs-number">1</span>]=(o[v][<span class="hljs-number">1</span>]+suf[now][<span class="hljs-number">1</span>])%P;<br>suf[now][<span class="hljs-number">0</span>]=(suf[now][<span class="hljs-number">0</span>]+pp*(<span class="hljs-number">2</span>*suf[now][<span class="hljs-number">1</span>]*s[v]%P+g[v])%P)%P;<br>suf[now][<span class="hljs-number">1</span>]=((suf[now][<span class="hljs-number">1</span>]+s[v])*pp%P+((<span class="hljs-number">1</span>-pp)%P+P)*suf[now][<span class="hljs-number">1</span>]%P)%P;<br>&#125;<br><span class="hljs-keyword">for</span>(ui i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>dfs_2(son[now][i],now);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//freopen("travel_1.in","r",stdin);</span><br><span class="hljs-comment">//freopen("wa.out","w",stdout);</span><br><span class="hljs-comment">//FO(travel);</span><br><span class="hljs-keyword">int</span> x,y;ll z;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(a[i]),read(d[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y),read(z);<br>add_edge(x,y,z);<br>add_edge(y,x,z);<br>&#125;<br>fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>pre_dfs(<span class="hljs-number">1</span>);<br>get_sum(<span class="hljs-number">1</span>);<br>dfs_1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>read(q);<br><span class="hljs-keyword">while</span>(q--)&#123;<br>read(x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans[x]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T3-VanUSee"><a href="#T3-VanUSee" class="headerlink" title="T3 VanUSee"></a>T3 VanUSee</h3><p>思维智商题,看完solution后只能说自己太傻了</p><p>易知总步数为$|s|-|t|$.</p><p>我们先来考虑最简单的情况,就是步数为偶数,$t$出现在$s$<strong>正中央</strong>,那么无论先手怎么取,后手对称地取必定能胜利</p><p>再稍稍拓展一下发现我们设一个$t$串出现在$s$串的$[st,st+|t|)$位置,那么从左边取需要取$st$步,右边取需要$|s|-(st+|t|)+1$步.我们设那么我们就令一个目标状态$sta$为右边需要取得步数-左边需要取得步数（你左右反一下也没关系）.我们发现每一步操作就是使所有$sta+1/sta-1$.</p><p>考虑步数为偶数时,刚刚已经提过后手必胜状态是$sta==0$.但是还有一种情况是同时存在两种目标状态+2/-2.无论先手怎么走,都可以使得另一个目标状态保持为$0$(比如先手+1,那么变成+3/-1,后手也走+1,就成了+4/0)</p><p>步数为奇数的时候,先手可以多走一步,他肯定希望朝着不是目标状态的方向走,但是如果同时存在两种目标状态+1/-1.无论你怎么走都可以使一个状态保持为$0$</p><p>于是直接KMP求出所有目标状态扫一遍就好了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> fail[maxn];<br><span class="hljs-keyword">char</span> s[maxn],t[maxn];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> pos[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> g[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(fail,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(fail));<br><span class="hljs-comment">//printf("%d %d\n",n,m);</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(j&amp;&amp;t[j+<span class="hljs-number">1</span>]!=t[i])j=fail[j];<br>j+=(t[j+<span class="hljs-number">1</span>]==t[i]);<br>fail[i]=j;<br><span class="hljs-comment">//printf("-qwq %d--\n",fail[i]);</span><br>&#125;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">while</span>(k&amp;&amp;t[k+<span class="hljs-number">1</span>]!=s[i])k=fail[k];<br>k+=(t[k+<span class="hljs-number">1</span>]==s[i]);<br><span class="hljs-keyword">if</span>(k==m)&#123;<br>g[i]=<span class="hljs-number">1</span>;<br>pos[++tot]=i;<br>k=fail[k];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,T;<br><span class="hljs-keyword">bool</span> flag1,flag2,flag3;<br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br>flag1=flag2=flag3=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,s+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,t+<span class="hljs-number">1</span>);<br>n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>),m=<span class="hljs-built_in">strlen</span>(t+<span class="hljs-number">1</span>);<br>kmp();<br><span class="hljs-keyword">if</span>((n-m)&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">//printf("%d %d\n",n,m);</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(g[i])&#123;<br><span class="hljs-comment">//printf("%d ",i);</span><br>x=(n-i)-(i-m);<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>)flag1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span>)flag2=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)flag3=<span class="hljs-number">1</span>;<br>&#125;<br>g[i]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(g[i])&#123;<br><span class="hljs-comment">//printf("--%d--\n",i);</span><br>x=(n-i)-(i-m);<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>)flag1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-2</span>)flag2=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)flag3=<span class="hljs-number">1</span>;<br>&#125;<br>g[i]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>((flag1&amp;&amp;flag2)||flag3)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"pty"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"cqf"</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>终于把咕掉的补上了一点@TYQ</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JZOI100019]A--dfs序+扫描线</title>
      <link href="/2018/10/17/JZOI100019-A-dfs%E5%BA%8F-%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
      <url>/2018/10/17/JZOI100019-A-dfs%E5%BA%8F-%E6%89%AB%E6%8F%8F%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="JZOJ100019-A—dfn序-扫描线"><a href="#JZOJ100019-A—dfn序-扫描线" class="headerlink" title="[JZOJ100019]A—dfn序+扫描线"></a>[JZOJ100019]A—dfn序+扫描线</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>太懒了自行搜索</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题查了一个下午的错,真的心态崩了</p><p>不过这道题确实妙啊</p><p>类比于喝喝喝,我们发现任何一条覆盖了非法路径的路径一定不合法,假如非法路径为$(x,kx)$,设$u$为$dfn$序中较小的那个点,$v$为较大的那个;假如覆盖了路径$(u,v)$的路径为$(a,b)(dfn_a&lt;dfn_b)$;</p><p>设数组$ed[x]$为$x$的子树中$dfs$最大的那个点的$dfs$序,显然这可以和$dfs$序在一遍$dfs$中求出</p><p>我们还需要知道:$x$ 的子树中$dfs$序是连续的一段</p><p>考虑两种情况:</p><ul><li><p>$u$是$lca(u,v)$,分析发现这也有两种情况<br>先设$g$为路径$(u,v)$上距$u$最近的那个点</p><ul><li><p>Case#1<br> $dfn[v]&lt;=dfn[a]&lt;=ed[v]$ , $dfn[b]&gt;ed[g]$<br>  <img src="https://i.loli.net/2018/10/17/5bc737fa6b897.png" alt="case1.png"></p></li><li><p>Case#2</p><p>$dfn[v]&lt;=dfn[b]&lt;=ed[v]$ , $dfn[g]&gt;dfn[a]$<br><img src="https://i.loli.net/2018/10/17/5bc7391859528.png" alt="case2.png"></p></li></ul></li><li><p>$u$不是$lca(u,v)$</p><p>这个只有一种情况,$a,b$分别在$u,v$子树中,即</p><p>Case#3</p><p>$dfn[u]&lt;=dfn[a]&lt;=ed[u]&lt;=dfn[v]&lt;=dfn[b]&lt;=ed[v]$</p><p>我们把$(a,b)$看成一个有序数对的话,发现其实每一种$case$都围成了一个矩形,我们只需要求出矩形面积的并之后即可得出所有不合法的路径,用总路径数$n*(n-1)/2$减去不合法即所求</p></li></ul><p>求矩形面积的并使用线段树的扫描线法,但是发现一个点我们也要算进贡献,并非严格意义的二维图形；</p><p>因为值域很小$(1e5)$,学会了一种船新操作,我们不排序,将纵坐标相同的丢入一个容器,直接从小到大钦定纵坐标.不断取出对应容器内的线段加入,然后计算剩余的点数即可(纵坐标已钦定)</p><p>一道图论题转化成了数据结构,也是精妙啊</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> fa[maxn][<span class="hljs-number">17</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> dfn[maxn],ed[maxn],dep[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;dfn[now]=++tot;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now][<span class="hljs-number">0</span>]||dfn[v])<span class="hljs-keyword">continue</span>;<br>dep[v]=dep[now]+<span class="hljs-number">1</span>,fa[v][<span class="hljs-number">0</span>]=now;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">16</span>;i++)fa[v][i]=fa[fa[v][i<span class="hljs-number">-1</span>]][i<span class="hljs-number">-1</span>];<br>dfs(v);<br>&#125;<br>ed[now]=tot;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-comment">//x到y路径上距y最近 </span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">16</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-comment">//printf("%d %d\n",fa[x][i],x);</span><br><span class="hljs-keyword">if</span>(dep[fa[x][i]]&gt;dep[y])&#123;<br>x=fa[x][i];<br><span class="hljs-comment">//printf("%d\n",x);</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">int</span> L,R,dta;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br><span class="hljs-keyword">int</span> l,r,h,d;<br>Seg()&#123;l=r=h=d=<span class="hljs-number">0</span>;&#125;<br>Seg(<span class="hljs-keyword">int</span> _l,<span class="hljs-keyword">int</span> _r,<span class="hljs-keyword">int</span> _h,<span class="hljs-keyword">int</span> _d)&#123;l=_l,r=_r,h=_h,d=_d;&#125;<br>&#125;seg[maxn&lt;&lt;<span class="hljs-number">4</span>];<br><span class="hljs-keyword">int</span> poi=<span class="hljs-number">0</span>;<br>ll sum[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>ll tag[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; dd[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag[now]&gt;<span class="hljs-number">0</span>)sum[now]=(r-l+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>tag[now]+=dta;<br>modify(now,l,r);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>modify(now,l,r);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,ex,ey,g;<br>FO(a);<br><span class="hljs-comment">//freopen("a5.in","r",stdin);</span><br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> p,q;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=i+i;j&lt;=n;j+=i)&#123;<br>p=i,q=j;<br><span class="hljs-keyword">if</span>(dfn[p]&lt;dfn[q])swap(p,q);<br>x=dfn[p],y=dfn[q];<br>ex=ed[p],ey=ed[q];<br><span class="hljs-keyword">if</span>(x&gt;=y&amp;&amp;x&lt;=ey)&#123;<br>g=get_g(p,q);<br>dd[x].push_back(++poi);<br>seg[poi]=Seg(<span class="hljs-number">1</span>,dfn[g]<span class="hljs-number">-1</span>,x,<span class="hljs-number">1</span>);<br>dd[ex+<span class="hljs-number">1</span>].push_back(++poi);<br>seg[poi]=Seg(<span class="hljs-number">1</span>,dfn[g]<span class="hljs-number">-1</span>,ex,<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(ed[g]==n)<span class="hljs-keyword">continue</span>;<br>dd[ed[g]+<span class="hljs-number">1</span>].push_back(++poi);<br>seg[poi]=Seg(x,ex,ed[g]+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>dd[n+<span class="hljs-number">1</span>].push_back(++poi);<br>seg[poi]=Seg(x,ex,n,<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>dd[x].push_back(++poi);<br>seg[poi]=Seg(y,ey,x,<span class="hljs-number">1</span>);<br>dd[ex+<span class="hljs-number">1</span>].push_back(++poi);<br>seg[poi]=Seg(y,ey,ex,<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;dd[i].size();j++)&#123;<br>x=dd[i][j];<br>L=seg[x].l,R=seg[x].r,dta=seg[x].d;<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>&#125;<br>ans+=sum[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">1l</span>l*n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>-ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 扫描线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JZOI100026]图--倍增</title>
      <link href="/2018/10/17/JZOI100026-%E5%9B%BE-%E5%80%8D%E5%A2%9E/"/>
      <url>/2018/10/17/JZOI100026-%E5%9B%BE-%E5%80%8D%E5%A2%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="JZOJ100026-图—倍增"><a href="#JZOJ100026-图—倍增" class="headerlink" title="[JZOJ100026]图—倍增"></a>[JZOJ100026]图—倍增</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>太懒了,自行搜索</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>裸倍增,不多说</p><p>$fa[i][j]$表示$i$跳$2^j$步走到的点</p><p>$f[i][j]$表示$i$跳$2^j$步经过边权之和</p><p>$mi[i][j]$表示$i$跳$2^j$步经过的边权最小值</p><p>$fa[i][j]=fa[fa[i][j-1]][j-1]$</p><p>$f[i][j]=f[i][j-1]+f[fa[i][j-1]][j-1]$</p><p>$mi[i][j]=min(mi[i][j-1],mi[fa[i][j-1]][j-1])$</p><p>然后一开始我$naiive$认为要找一个环上的点才能开始跳,于是打个了搜索,结果不知道怎么回事一直$WA$,后面才学到根本不用那么麻烦…太菜了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEBUG freopen(<span class="hljs-meta-string">"dat.in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(<span class="hljs-meta-string">"wa.out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1&lt;&lt;22</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> LIM;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; son[maxn];<br><span class="hljs-keyword">int</span> fa[maxn][<span class="hljs-number">33</span>],mi[maxn][<span class="hljs-number">33</span>];<br>ll f[maxn][<span class="hljs-number">33</span>],k;<br><span class="hljs-keyword">int</span> pos[<span class="hljs-number">35</span>],tot=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,ms=inf;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br><span class="hljs-comment">//FO(graph);</span><br>freopen(<span class="hljs-string">"wtf.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>freopen(<span class="hljs-string">"graph4.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>read(n),read(k);<br>LIM=log2(k)+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x),x++;<br>fa[i][<span class="hljs-number">0</span>]=x,son[x].push_back(i);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(f[i][<span class="hljs-number">0</span>]),mi[i][<span class="hljs-number">0</span>]=f[i][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(ri o=<span class="hljs-number">1</span>;o&lt;=LIM;o++)&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>fa[i][o]=fa[fa[i][o<span class="hljs-number">-1</span>]][o<span class="hljs-number">-1</span>];<br>f[i][o]=f[i][o<span class="hljs-number">-1</span>]+f[fa[i][o<span class="hljs-number">-1</span>]][o<span class="hljs-number">-1</span>];<br>mi[i][o]=min(mi[i][o<span class="hljs-number">-1</span>],mi[fa[i][o<span class="hljs-number">-1</span>]][o<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(k)&#123;<br><span class="hljs-keyword">if</span>(k%<span class="hljs-number">2</span>)pos[++tot]=cnt;<br>k=k&gt;&gt;<span class="hljs-number">1</span>;<br>cnt++;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ms=inf,ans=<span class="hljs-number">0</span>,x=i;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=tot;j++)&#123;<br>ans+=f[x][pos[j]];<br>ms=min(ms,mi[x][pos[j]]);<br>x=fa[x][pos[j]];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %d\n"</span>,ans,ms);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JZOI4307]喝喝喝--枚举</title>
      <link href="/2018/10/17/JZOI4307-%E5%96%9D%E5%96%9D%E5%96%9D-%E6%9E%9A%E4%B8%BE/"/>
      <url>/2018/10/17/JZOI4307-%E5%96%9D%E5%96%9D%E5%96%9D-%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="JZOJ4307-喝喝喝—枚举"><a href="#JZOJ4307-喝喝喝—枚举" class="headerlink" title="[JZOJ4307]喝喝喝—枚举"></a>[JZOJ4307]喝喝喝—枚举</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>自行搜索</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们需要找到所有不包含$(a_x,a_y),a_x \equiv k \mod a_y (x&lt;y)$这样的连续数对,转化一下变成$a_x-k \equiv 0 \mod a_y$.</p><p>考虑从左到右加数,可以发现如果$a_i - k \equiv 0 \mod a_j$,那么起点为$i$,终点大于等于$j$的连续序列都是不合法的,于是维护一个左指针$lst$,表示当前距离最近的不合法起点,换句话说,$lst+1$到当前遍历的数这一段都是合法的</p><p>怎么更新$f[x]$?由于值域范围很小$(1e5)$,我们设若当前加的第$i$个数为$x$,设$f[x]$为当前距$i$最近的$y$使得$x - k \equiv 0 \mod a_y$,每次新加入一个数就比较$f[x]$与$lst$哪个更大,这样就能更新$lst$,同时加完$x$这个数后,我们可以在$O( \sqrt{x} )$的时间内将所有满足$x -k \equiv 0 \mod p$的$p$找出来更新它们的$f$值</p><p>当时要注意我们这种方法会漏掉前面有数为$k$的情况,要特判</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn],kk=<span class="hljs-number">0</span>,lst=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n,k;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x;<br>FO(drink);<br><span class="hljs-comment">//freopen("drink6.in","r",stdin);</span><br>read(n),read(k);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x);<br><span class="hljs-keyword">if</span>(x&gt;k)&#123;<br><span class="hljs-keyword">if</span>(f[x]&gt;lst)lst=f[x];<br><span class="hljs-keyword">if</span>(kk&gt;lst)lst=kk;<br>&#125;<br>ans+=i-lst;<br><span class="hljs-keyword">if</span>(x==k)kk=i;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;k)<span class="hljs-keyword">continue</span>;<br>x-=k;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-built_in">sqrt</span>(x+<span class="hljs-number">0.5</span>);j++)&#123;<br><span class="hljs-keyword">if</span>(x%j==<span class="hljs-number">0</span>)f[j]=f[x/j]=i;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2018模拟赛10.16]手残报告</title>
      <link href="/2018/10/16/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-16-%E6%89%8B%E6%AE%8B%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/16/NOIP2018%E6%A8%A1%E6%8B%9F%E8%B5%9B10-16-%E6%89%8B%E6%AE%8B%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="NOIP2018模拟赛10-16-手残报告"><a href="#NOIP2018模拟赛10-16-手残报告" class="headerlink" title="[NOIP2018模拟赛10.16]手残报告"></a>[NOIP2018模拟赛10.16]手残报告</h2><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>炉石乱斗模式美滋滋啊,又颓到好晚…</p><p>上来T2先敲了树剖,看T1发现是个思博DP,然后没过大样例,写个暴力发现还是没过大样例!?才发现理解错题意了,真是太菜了</p><p>然后看T3发现又要树剖,想了想发现边双缩点似乎能做…结果码来码去比赛临近结束才搞完,赶紧交代码.</p><p>但是那台机子上的Chrome似乎是个假的,打开什么网页都巨慢,最后T1手残交了份一开始的错误代码上去,T2T3生死未卜</p><p>结果40+0+0 T1错代码居然还有40？！数据这么水…再交遍正确代码一A</p><p>T2T3下午检查的时候发现树剖犯了SB错误 还是记在了我错误笔记上的…太菜了</p><p>下午改T3边双缩点居然A了std是圆方树的T3?!还跑了rank2?! (虽然现在xxzh巨佬是rank2</p><p>而且第一发交的树剖还是有错的.这数据无力吐槽了</p><p>晚上码T2,结果至今卡死在70 TLE三点,然而那台老年机都跑过了我也不知道咋回事</p><h3 id="T1-轻功"><a href="#T1-轻功" class="headerlink" title="T1 轻功"></a>T1 轻功</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>思博DP,$f[i][j]$表示当前使用第$j$轻功种走到$i$这个点的最短时间</p><p>$f[i][j]=min(f[i-a[j]][p]+v[j]+[j!=p] \times w)$</p><p>预处理一下非法情况就好了</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e17</span>;<br><span class="hljs-keyword">int</span> n,k,q;<br>ll v[maxn];<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">bool</span> fob[maxn][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">bool</span> ok[maxn][<span class="hljs-number">105</span>];<br>ll w,f[maxn][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">namespace</span> bf&#123;<br>ll ans=inf;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> kk,ll c)</span></span>&#123;<br><span class="hljs-keyword">if</span>(ok[now][kk])<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">if</span>(now&gt;n)<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">if</span>(now==n)&#123;<br>ans=min(ans,c);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br><span class="hljs-keyword">if</span>(ok[now+a[i]][i])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(i==kk)&#123;<br>dfs(now+a[i],i,c+v[i]);<br>&#125;<br><span class="hljs-keyword">else</span> dfs(now+a[i],i,c+v[i]+w);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=k;i++)dfs(<span class="hljs-number">0</span>,i,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>FO(qinggong);<br>read(n),read(k),read(w);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>read(a[i]),read(v[i]);<br>&#125;<br><span class="hljs-built_in">memset</span>(fob,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(fob));<br><span class="hljs-built_in">memset</span>(ok,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ok));<br>read(q);<br><span class="hljs-keyword">while</span>(q--)&#123;<br>read(x),read(y);<br>fob[x][y]=<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=k;j++)f[i][j]=inf;<br>&#125;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=k;i++)<span class="hljs-keyword">if</span>(!fob[<span class="hljs-number">0</span>][i])f[<span class="hljs-number">0</span>][i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=k;j++)&#123;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(i&gt;=a[j])&#123;<br><span class="hljs-keyword">for</span>(ri o=i-a[j];o&lt;=i;o++)<span class="hljs-keyword">if</span>(fob[o][j])&#123;flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(flag)ok[i][j]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">15</span>)&#123;bf::main();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=k;j++)&#123;<br><span class="hljs-keyword">if</span>(ok[i][j])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">for</span>(ri p=<span class="hljs-number">1</span>;p&lt;=k;p++)&#123;<br><span class="hljs-keyword">if</span>(i&gt;=a[j])&#123;<br><span class="hljs-keyword">if</span>(ok[i-a[j]][p])<span class="hljs-keyword">continue</span>;<br>f[i][j]=min(f[i][j],<span class="hljs-number">1l</span>l*(f[i-a[j]][p]+v[j]+((j==p)?<span class="hljs-number">0</span>:w)));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>ll ans=inf;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=k;i++)ans=min(ans,f[n][i]);<br><span class="hljs-keyword">if</span>(ans==inf)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2-开荒"><a href="#T2-开荒" class="headerlink" title="T2 开荒"></a>T2 开荒</h3><p>精巧的树剖，询问时将所有点按$dfs$序排序</p><p>钦定当前公共$LCA$ $x$,对于排序后第$i$个点和$i-1$号点的LCA $y$,如果$y$在$x$子树中,那么计算$i$到$y$路径贡献(不包括$y$),否则根据DFS序排序后的性质, $y$就比$x$高明,将$y$设为公共$LCA$,计算$fa[x]$到$i$号点路径贡献</p><p>然后一直卡在70分。。。以后能用树状数组再也不用线段树了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-keyword">int</span> que[<span class="hljs-number">10000005</span>],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br>ll w[maxn];<br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],dfn[maxn],top[maxn],size[maxn],son[maxn],tot=<span class="hljs-number">0</span>,rnk[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now]||dep[v])<span class="hljs-keyword">continue</span>;<br>fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>dfs_1(v);<br>size[v]+=size[now];<br><span class="hljs-keyword">if</span>(!son[now]||size[v]&gt;size[son[now]])son[now]=v;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>top[now]=t,dfn[now]=++tot,rnk[tot]=now;<br><span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>dfs_2(son[now],t);<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now]||v==son[now]||dfn[v])<span class="hljs-keyword">continue</span>;<br>dfs_2(v,v);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> L,R,t;<br>ll dta,ans=<span class="hljs-number">0</span>;<br>ll s[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">for</span>(;t&lt;=n;t+=t&amp;(-t))s[t]+=dta;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;ll tmp=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(;x;x-=x&amp;(-x))tmp+=s[x];<span class="hljs-keyword">return</span> tmp;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span> </span>&#123;<span class="hljs-keyword">return</span> sum(r)-sum(l<span class="hljs-number">-1</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> dfn[a]&lt;dfn[b];&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="hljs-built_in">std</span>::swap(x,y);<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dep[x]&gt;dep[y])<span class="hljs-keyword">return</span> y;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="hljs-built_in">std</span>::swap(x,y);<br>L=dfn[top[x]],R=dfn[x];<br>ans+=calc(L,R);<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dep[x]&gt;dep[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>L=dfn[x],R=dfn[y];<br>ans+=calc(L,R);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,w[que[<span class="hljs-number">1</span>]]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>x=que[<span class="hljs-number">1</span>],ans=w[x];<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=cnt;i++)&#123;<br>y=get_lca(que[i],que[i<span class="hljs-number">-1</span>]);<br><span class="hljs-keyword">if</span>(dfn[x]&lt;=dfn[y])&#123;<br>query_path(y,que[i]);<br>ans-=w[y];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>query_path(fa[x],que[i]);<br>x=y;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>FO(kaihuang);<br><span class="hljs-comment">//freopen("ex_kaihuang.in","r",stdin);</span><br>read(n),read(q);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(w[i]);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>dfs_1(<span class="hljs-number">1</span>);<br>dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>t=dfn[i],dta=w[i];<br>add();<br>&#125;<br><span class="hljs-keyword">char</span> opt[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br><span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'Q'</span>)&#123;<br>read(x);<br>cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x)&#123;<br>que[++cnt]=x;<br>read(x);<br>&#125;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-built_in">std</span>::sort(que+<span class="hljs-number">1</span>,que+<span class="hljs-number">1</span>+cnt,cmp);<br>cnt=<span class="hljs-built_in">std</span>::unique(que+<span class="hljs-number">1</span>,que+<span class="hljs-number">1</span>+cnt)-(que+<span class="hljs-number">1</span>);<br>solve();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>read(x),read(y);<br>t=dfn[x],dta=y-w[x],w[x]=y;<br>add();<br>&#125;<br><span class="hljs-comment">//puts("fafa");</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T3-跑商"><a href="#T3-跑商" class="headerlink" title="T3 跑商"></a>T3 跑商</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>考场上Tarjan还有行写反了G</p><p>标算圆方树不会啊,我这个边双感觉就是个挺靠谱的假算法,边双缩点后形成的的树进行树链剖分,缩的点用一个$multiset$动态维护点内的最小值,查询直接树剖</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m,q;<br>ll w[maxn],val[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SE</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;se[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125; <br><span class="hljs-keyword">int</span> sh[maxn],num_se=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_se</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>se[++num_se].ne=sh[f];<br>se[num_se].to=to;<br>sh[f]=num_se;<br>&#125;<br><span class="hljs-keyword">namespace</span> Tree&#123;<span class="hljs-comment">//树的情况</span><br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],dfn[maxn],rnk[maxn],tot=<span class="hljs-number">0</span>,top[maxn],son[maxn],size[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    size[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(dep[v]||v==fa[now])<span class="hljs-keyword">continue</span>;<br>        dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>        fa[v]=now;<br>        dfs_1(v);<br>        size[now]+=size[v];<br>        <span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    top[now]=t;<br>    dfn[now]=++tot,rnk[tot]=now;<br>    <span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>    dfs_2(son[now],t);<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(dfn[v]||v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>        dfs_2(v,v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> L,R,t;<br>ll dta;<br>ll mi[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;mi[now]=min(mi[now&lt;&lt;<span class="hljs-number">1</span>],mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        mi[now]=w[rnk[l]];<span class="hljs-comment">//注意!!! </span><br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    up(now);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        mi[now]=dta;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">else</span> update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    up(now);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=inf;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        ans=min(ans,mi[now]);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    up(now);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    ans=inf;<br>    <span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br>        <span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="hljs-built_in">std</span>::swap(x,y);<br>        L=dfn[top[x]],R=dfn[x];<br>        query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        x=fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>    L=dfn[x],R=dfn[y];<br>    query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    dfs_1(<span class="hljs-number">1</span>);<br>    dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br>    <span class="hljs-comment">//puts("fafa");</span><br>    read(q);<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br>        <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'C'</span>)&#123;<br>            read(x),read(dta);<br>            t=dfn[x];<br>            w[x]=dta;<br>            update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            read(x),read(y);<br>            ans=inf;<br>            <span class="hljs-keyword">if</span>(x==y)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>query_path(x,y);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,max(<span class="hljs-number">1l</span>l*<span class="hljs-number">0</span>,w[x]-ans));<br>            <span class="hljs-comment">//system("PAUSE");</span><br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> inb[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">multiset</span> &lt;ll&gt; mib[maxn];<br><span class="hljs-keyword">int</span> dep[maxn],rnk[maxn],fa[maxn],dfn[maxn],tot=<span class="hljs-number">0</span>,size[maxn],son[maxn],top[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=sh[now];i;i=se[i].ne)&#123;<br>v=se[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now]||dep[v])<span class="hljs-keyword">continue</span>;<br>dep[v]=dep[now]+<span class="hljs-number">1</span>,fa[v]=now;<br>dfs_1(v);<br>size[now]+=size[v];<br><span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;top[now]=t;<br>dfn[now]=++tot,rnk[tot]=now;<br><span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>dfs_2(son[now],t);<br><span class="hljs-keyword">for</span>(ri i=sh[now];i;i=se[i].ne)&#123;<br>v=se[i].to;<br><span class="hljs-keyword">if</span>(dfn[v]||v==son[now]||v==fa[now])<span class="hljs-keyword">continue</span>;<br>dfs_2(v,v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> L,R,t;<br>ll lst,dta;<br>ll mi[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;mi[now]=min(mi[now&lt;&lt;<span class="hljs-number">1</span>],mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>mi[now]=*mib[rnk[l]].begin();<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>up(now);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>mib[rnk[l]].erase(mib[rnk[l]].lower_bound(lst));<br>mib[rnk[l]].insert(dta);<br>mi[now]=*mib[rnk[l]].begin();<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(t&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">else</span> update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>up(now);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=inf;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>ans=min(ans,mi[now]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>up(now);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>ans=inf;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="hljs-built_in">std</span>::swap(x,y);<br>L=dfn[top[x]],R=dfn[x];<br><span class="hljs-comment">//printf("%d %d %d %d\n",x,y,L,R);</span><br>query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cnt);<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])<span class="hljs-built_in">std</span>::swap(x,y);<br>L=dfn[x],R=dfn[y];<span class="hljs-comment">//puts("wtf");</span><br><span class="hljs-comment">//printf("%d %d %d %d\n",x,y,L,R);</span><br>query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cnt);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> low[maxn],dd[maxn],pc=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> bri[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> id)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>dd[now]=low[now]=++pc;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(!dd[v])&#123;<br>tarjan(v,i);<br>low[now]=min(low[now],low[v]);<br><span class="hljs-keyword">if</span>(dd[now]&lt;low[v])&#123;<br>bri[i]=bri[i^<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=(id^<span class="hljs-number">1</span>))low[now]=min(low[now],dd[v]);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>vis[now]=<span class="hljs-number">1</span>;<br>mib[cnt].insert(w[now]);<br>inb[now]=cnt;<br><span class="hljs-comment">//printf("%d %d\n",now,fa);</span><br><span class="hljs-keyword">for</span>(ri i =h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(inb[v]||bri[i]||bri[i^<span class="hljs-number">1</span>]||v==fa)<span class="hljs-keyword">continue</span>;<br>pre_dfs(v,now);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">bool</span> fg=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_ck</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;vis[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(vis[v])&#123;fg=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> ;&#125;<br>pre_ck(v,now);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>FO(paoshang);<br><span class="hljs-comment">//freopen("paoshang1.in","r",stdin);</span><br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(w[i]);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>pre_ck(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!fg)&#123;Tree::main();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!dd[i])tarjan(i,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(!inb[i])&#123;<br>cnt++;<br>pre_dfs(i,<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>x=inb[i];<br><span class="hljs-keyword">for</span>(ri j=h[i];j;j=edge[j].ne)&#123;<br>y=inb[edge[j].to];<br><span class="hljs-keyword">if</span>(x!=y)&#123;<br>add_se(x,y);<br>add_se(y,x);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//printf("--%d--\n",cnt);</span><br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>tot=<span class="hljs-number">0</span>;<br>dfs_1(<span class="hljs-number">1</span>);<br>dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cnt);<br>read(q);<br><span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br><span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'C'</span>)&#123;<br>read(x),read(dta);<br>lst=w[x];<br>t=dfn[inb[x]];<br>w[x]=dta;<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cnt);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>read(x),read(y);<br><span class="hljs-keyword">if</span>(x==y)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br><span class="hljs-keyword">else</span> &#123;<br>query_path(inb[x],inb[y]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,max(<span class="hljs-number">1l</span>l*<span class="hljs-number">0</span>,w[x]-ans));<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2018模拟10.15]比赛报告</title>
      <link href="/2018/10/15/NOIP2018%E6%A8%A1%E6%8B%9F10-15-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/15/NOIP2018%E6%A8%A1%E6%8B%9F10-15-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="NOIP2018模拟10-15-比赛报告"><a href="#NOIP2018模拟10-15-比赛报告" class="headerlink" title="[NOIP2018模拟10.15]比赛报告"></a>[NOIP2018模拟10.15]比赛报告</h2><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>昨晚又颓到好晚,Yali的降智光环感觉持续至今…</p><p>题面好评 T1T3都玩过 逃)</p><p>T1没看多久就开始写二分+并查集 然后T3看着眼熟想了一个多小时…结果啥都没想出来</p><p>赶紧看T2发现还是没什么思路,码个暴力回来看T1,发现了两个致命又SB的错误,倒数15分钟前终于改回来,刺激</p><p>结果80+35+0 T1还是挂分了,检查时发现还是一个思博错误,没有判上下相连与左右相连情况,感谢出题人良心数据</p><p>T2调了好久结果爆栈RE,不想改了。T3听完晚上的讲评后才茅塞顿开,太菜了</p><h3 id="T1-刺客信条-AC"><a href="#T1-刺客信条-AC" class="headerlink" title="T1 刺客信条 AC"></a>T1 刺客信条 AC</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我的做法很naiive,直接距离,将每个人看成圆心画一个二分距离的圆,两个圆有交就连在一起,最后判断Ezio能不能过去.</p><p>这里的判读大佬们都是将4面墙看成4个点处理,我最SB,每个点开四个bool变量记录,合并时暴力合并bool值</p><p>std求了个最小生成树,比较神奇</p><p>然后加了一些优化,预处理点对距离,特判之类的一开始跑了个rank4</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEBUG freopen(<span class="hljs-meta-string">"dat.in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(<span class="hljs-meta-string">"wa.out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1&lt;&lt;22</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">sqrt</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x*<span class="hljs-number">10</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pt</span>&#123;</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> x,y;<br>&#125;pt[maxn];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> X,Y;<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Flag</span>&#123;</span><br>    <span class="hljs-keyword">bool</span> f1,f2,f3,f4;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>&#123;f1=f2=f3=f4=<span class="hljs-number">0</span>;&#125;<br>&#125;ff[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(ff[x].f1|ff[y].f1)ff[x].f1=ff[y].f1=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(ff[x].f2|ff[y].f2)ff[x].f2=ff[y].f2=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(ff[x].f3|ff[y].f3)ff[x].f3=ff[y].f3=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(ff[x].f4|ff[y].f4)ff[x].f4=ff[y].f4=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    merge(x,fa[x]);<br>    <span class="hljs-keyword">if</span>(fa[x]!=x)&#123;<br>        fa[x]=get(fa[x]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> fafa[maxn][maxn];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> Dis)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        vis[i]=<span class="hljs-number">0</span>;<br>        fa[i]=i;<br>ff[i].clear();<br>    &#125;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> x,y;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>        x=pt[i].x,y=pt[i].y;<br>        <span class="hljs-keyword">if</span>(Dis-x&gt;<span class="hljs-number">1e-11</span>)ff[i].f1=<span class="hljs-number">1</span>,cnt++;<br>        <span class="hljs-keyword">if</span>(Dis-y&gt;<span class="hljs-number">1e-11</span>)ff[i].f2=<span class="hljs-number">1</span>,cnt++;<br>        <span class="hljs-keyword">if</span>(Dis-(X-x)&gt;<span class="hljs-number">1e-11</span>)ff[i].f3=<span class="hljs-number">1</span>,cnt++;<br>        <span class="hljs-keyword">if</span>(Dis-(Y-y)&gt;<span class="hljs-number">1e-11</span>)ff[i].f4=<span class="hljs-number">1</span>,cnt++;<br>        <span class="hljs-comment">//if(cnt&gt;=2)return 1;</span><br>        <span class="hljs-keyword">if</span>(ff[i].f1&amp;&amp;ff[i].f2)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ff[i].f3&amp;&amp;ff[i].f4)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <br>    &#125;<br>    <span class="hljs-keyword">int</span> fx,fy;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        x=pt[i].x,y=pt[i].y;<br>        <span class="hljs-keyword">for</span>(ri j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> p=fafa[i][j];<br>            <span class="hljs-keyword">if</span>(Dis*<span class="hljs-number">2</span>-p&gt;<span class="hljs-number">1e-11</span>)&#123;<br>                fx=get(i),fy=get(j);<br>                fa[fx]=fy;<br>                merge(fx,fy);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        fx=get(i);<br>        <span class="hljs-keyword">if</span>(vis[fx])<span class="hljs-keyword">continue</span>;<br>        vis[fx]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> tmp=ff[fx].f1+ff[fx].f2+ff[fx].f3+ff[fx].f4;<br>        <span class="hljs-keyword">if</span>(ff[fx].f1&amp;&amp;ff[fx].f2)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ff[fx].f3&amp;&amp;ff[fx].f4)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ff[fx].f2&amp;&amp;ff[fx].f4)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ff[fx].f1&amp;&amp;ff[fx].f3)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> x,y;<br><span class="hljs-comment">//freopen("AC.in","r",stdin);</span><br><span class="hljs-comment">//freopen("AC.out","w",stdout);</span><br>    read(X),read(Y),read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(pt[i].x),read(pt[i].y);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        x=pt[i].x,y=pt[i].y;<br>        <span class="hljs-keyword">for</span>(ri j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            fafa[i][j]=sqrtl((x-pt[j].x)*(x-pt[j].x)+(y-pt[j].y)*(y-pt[j].y));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> mid,L=<span class="hljs-number">0</span>,R=sqrtl(X*X+Y*Y+<span class="hljs-number">233</span>);<br>    <span class="hljs-keyword">while</span>(R-L&gt;eps)&#123;<br>        mid=(L+R)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(check(mid))R=mid;<br>        <span class="hljs-keyword">else</span> L=mid;<br>        <span class="hljs-comment">//printf("%.4lf %.4lf\n",L,R);</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2Lf\n"</span>,R);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2-黑暗之魂-darksoul"><a href="#T2-黑暗之魂-darksoul" class="headerlink" title="T2 黑暗之魂 darksoul"></a>T2 黑暗之魂 darksoul</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>先不考虑自环和重边,最终的图像肯定是一个环,环上若干点,点可能向外扩展成一棵树</p><p>假如最终答案在一颗树中,我们就要求出树上相距最远的两点,用树形DP即可,</p><p>$g[x]$表示向下在以x为根的子树中最远能扩展到哪里,$o[x]$表示次远值</p><p>g[x]=max(g[x],g[v]+dis(x,v)),o[x]就不赘述了</p><p>然后以x为LCA的两点最远值f[x]=g[x]+o[x],然后$max_{x \in T}(f[x])$就是树T的贡献</p><p>但是如果答案的路径经过了环上的边呢,对于环上路径$(x,y)$. (x,y都是环上的点)</p><p>它的贡献为$g[x]+g[y]+dis(x,y)$</p><p>$g$值我们是已经求出来的,但是$dis$怎么求?我们化环为链,钦定起点$st$,用前缀和数组$pre[x]$表示$dis(st,x)$</p><p>那么$dis(x,y)$就是$pre[x]-pre[y]$(设$x$在$y$之后),注意我们要倍长这条链</p><p>这样贡献就变成了$g[x]+pre[x]+g[y]-pre[y]$</p><p>然而需要注意的是如果$pre[x]-pre[y]$大于环周长的一半是不合法的,为啥?因为他总是选择最短路走,既然这段大于周长一半,反过来走肯定更短</p><p>暴力的做法就是N方环上每一对点枚举一遍,考虑高级一点的做法,发现化环为链后处理的$pre$数组是单调递增的,</p><p>于是维护一个$g[y]-pre[y]$值递减的滑动窗口(因为当前点为$x$,$g[x]+pre[x]$是固定的),一旦队头$p$到当前点距离,即$pre[x]-pre[p]$大于两倍周长就弹出队头</p><p>然后大佬们都是用拓扑排序搞,我只会naiive的深搜,然后交上去最后两个点爆栈了</p><p>同时还发现我没有考虑答案是在一棵树中的情况,只能说这数据水了…</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEBUG freopen(<span class="hljs-meta-string">"dat.in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(<span class="hljs-meta-string">"wa.out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1&lt;&lt;22</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">deque</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>ll dis;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn];ll num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,ll c)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>edge[num_edge].dis=c;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> fa[maxn],dep[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn],flag_1;<br><span class="hljs-keyword">int</span> fo1,fo2;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    vis[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(vis[v]&amp;&amp;dep[v]==dep[now]+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//puts("11");</span><br><span class="hljs-keyword">for</span>(ri k=h[now];k;k=edge[k].ne)&#123;<br><span class="hljs-comment">//printf("%d\n",edge[k].to);</span><br><span class="hljs-keyword">if</span>(edge[k].to==v)&#123;<br><span class="hljs-keyword">if</span>(!fo1)fo1=k;<br><span class="hljs-keyword">else</span> fo2=k;<br>&#125;<br>&#125;<br>flag_1=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>        dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>        pre_dfs(v,now);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">namespace</span> Tree&#123;<br>    ll Tmp=<span class="hljs-number">-1</span>,ans=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> rt=<span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa,ll dis)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">if</span>(Tmp&lt;dis)&#123;<br>            rt=now,Tmp=dis;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>            v=edge[i].to;<br>            <span class="hljs-keyword">if</span>(i==fo1||i==fo2)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(v==fa||v==now)<span class="hljs-keyword">continue</span>;<br>            dfs_1(v,now,dis+edge[i].dis);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa,ll dis)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> v;<br>        ans=max(ans,dis);<br>        <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>            v=edge[i].to;<br>            <span class="hljs-keyword">if</span>(i==fo1||i==fo2)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(v==fa||v==now)<span class="hljs-keyword">continue</span>;<br>            dfs_2(v,now,dis+edge[i].dis);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(edge[fo1].dis&lt;edge[fo2].dis)&#123;<br>    fo1=fo2^<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>fo2=fo1^<span class="hljs-number">1</span>;<br>&#125;<br>        dfs_1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        Tmp=<span class="hljs-number">-1</span>;<br>        dfs_2(rt,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn],cnt=<span class="hljs-number">0</span>,st,ed,len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> on_cyc[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_cyc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(dep[v]&amp;&amp;dep[v]&lt;dep[now])&#123;<br>st=now,ed=v;<br><span class="hljs-keyword">int</span> x=now;<br><span class="hljs-keyword">while</span>(x!=v)len++,on_cyc[x]=<span class="hljs-number">1</span>,sta[++cnt]=x,x=fa[x];<br>len++,on_cyc[v]=<span class="hljs-number">1</span>,sta[++cnt]=v;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dep[v])<span class="hljs-keyword">continue</span>;<br>fa[v]=now;<br>dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>find_cyc(v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> rt;<br>ll dm[maxn];<br>ll tmp=<span class="hljs-number">-1</span>,cc=<span class="hljs-number">0</span>;<br>ll dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(on_cyc[v]||v==fa)<span class="hljs-keyword">continue</span>;<br>dfs_1(v,now);<br>dp[now]=max(dp[now],dp[v]+edge[i].dis);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>ll pre[maxn];<span class="hljs-comment">//dist from st</span><br><span class="hljs-keyword">int</span> ff[maxn],ne[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_on_cyc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">if</span>(tot==len*<span class="hljs-number">2</span><span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v!=ne[now])<span class="hljs-keyword">continue</span>;<br>pre[tot+<span class="hljs-number">1</span>]=pre[tot]+edge[i].dis;<br>ff[++tot]=v;<br><span class="hljs-keyword">if</span>(tot==len+<span class="hljs-number">1</span>)cc=pre[tot];<br>dfs_on_cyc(v,now);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">deque</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br>ll arr[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> x,y;ll z;<br>FO(darksoul);<br><span class="hljs-comment">//freopen("darksoul19.in","r",stdin);</span><br>read(n);<br><span class="hljs-comment">//puts("sss");</span><br><span class="hljs-comment">//system("PAUSE");</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x),read(y),read(z);<br>add_edge(x,y,z);<br>add_edge(y,x,z);<br><span class="hljs-keyword">if</span>(x==y)flag=<span class="hljs-number">1</span>;<br>&#125;<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>pre_dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(flag||flag_1)&#123;<br><span class="hljs-comment">//puts("ss");</span><br>Tree::main();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//memset(vis,0,sizeof(vis));</span><br><span class="hljs-built_in">memset</span>(dep,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dep));<br>fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>,dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>find_cyc(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br>rt=sta[i];<br><span class="hljs-keyword">if</span>(i!=cnt)ne[sta[i]]=sta[i+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> ne[sta[i]]=sta[<span class="hljs-number">1</span>];<br>tmp=<span class="hljs-number">-1</span>;<br>dfs_1(rt,<span class="hljs-number">0</span>);<br>dm[sta[i]]=dp[rt];<br>&#125;<br>tot=<span class="hljs-number">1</span>,ff[<span class="hljs-number">1</span>]=sta[<span class="hljs-number">1</span>];<br>dfs_on_cyc(st,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;i++)&#123;<br>arr[i]=dm[ff[i]]-pre[i];<br>&#125;<br>ll ans=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=len*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;k++)&#123;<br><span class="hljs-keyword">if</span>(q.empty())q.push_back(k);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">while</span>(q.size()&amp;&amp;pre[k]-pre[q.front()]&gt;cc/<span class="hljs-number">2</span>)q.pop_front();<br>ans=max(ans,dm[ff[k]]+pre[k]+arr[q.front()]);<br><span class="hljs-keyword">while</span>(q.size()&amp;&amp;arr[q.back()]&lt;=arr[k])q.pop_back();<br>q.push_back(k);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T3-传送门-portal"><a href="#T3-传送门-portal" class="headerlink" title="T3 传送门 portal"></a>T3 传送门 portal</h3><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>巧妙的树形DP</p><p>假设当前我们正在$x$点,$y$是$x$的一个儿子,$f[x]$表示以$x$为根的子树的最优答案,</p><p><img src="https://s1.ax1x.com/2018/10/15/ialsk4.png" alt="ialsk4.png"></p><p>那么我们考虑假如传送门在$y$,那么$y$的贡献就是$f[y]+c*2$,因为$x,y$还得靠你自己走</p><p>假如一个传送门在$x$,那么$y$的贡献为$sum_e(y) \times 2-g(y)+c$,$sum_e(y)$表示$y$的子树中边权之和,$g(y)表示$$y$的子树中的最长链长度.</p><p>这时候有人会问一个问题,你这样为什么不每次走到底再传送到x然后再经过$c$,但是这样的话要经过多次$c$,为什么不干脆将传送门设在$y$,这样的贡献肯定不会比你那样走更多,所以我们这时候要选择最长链跳,其余的都靠步行的方式计算贡献</p><p>综上$f[x]= \sum min(f[y]+c \times 2,sum_e(y) \times 2-g(y)+c)$</p><p>由于我们能够安排儿子的$dfs$顺序,可知儿子之间是不会互相影响的</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  code by RyeCatcher<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEBUG freopen(<span class="hljs-meta-string">"dat.in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(<span class="hljs-meta-string">"wa.out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1&lt;&lt;22</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=gc())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>ll dis;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,ll c)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>edge[num_edge].dis=c;<br>h[f]=num_edge;<br>&#125;<br>ll g[maxn],s[maxn],f[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;ll c;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dfs(v,now);<br>c=edge[i].dis;<br>s[now]=s[now]+s[v]+c;<br>g[now]=max(g[now],g[v]+c);<br>f[now]+=min(s[v]*<span class="hljs-number">2</span>-g[v]+c,f[v]+c*<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z;<br>FO(portal);<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y),read(z);<br>add_edge(x,y,z);<br>add_edge(y,x,z);<br>&#125;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在开源UOJ的导航栏中添加新页面链接</title>
      <link href="/2018/10/11/%E5%9C%A8%E5%BC%80%E6%BA%90UOJ%E7%9A%84%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5/"/>
      <url>/2018/10/11/%E5%9C%A8%E5%BC%80%E6%BA%90UOJ%E7%9A%84%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚用开源UOJ搭建OJ成功时就想在导航栏那里添加一个站内页面链接,无奈当时乱搞水平低,网上也没有教程,不晓得怎么弄</p><p>今天突然来了闲情乱搞一通,结果还真乱搞成了…特意写下为后来人少走点弯路</p><p>前置技能点 </p><ul><li>Linux基本命令行操作</li></ul><p>如果您觉得这篇文章很naiive，请谅解,因为我对前端一无所知,也是以这样的视角写一份教程</p><p>假设我们要在导航栏加一个叫<code>NCOD</code>的站内链接,并创建一个叫<code>NCOD</code>的站内页面</p><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><p>先找个地方把当前版本用SVN检出,如果您不知道这是什么船新操作,建议您仔细阅读<a href="https://universaloj.github.io/" target="_blank" rel="noopener">文档</a>中对SVN的介绍</p><p>注意在这里SVN地址后还要加<code>/uoj</code>,例如<code>svn co svn://xxx.xxx.x.x/uoj ...</code></p><p>然后<code>cd uoj/1/app</code></p><h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p>首先<code>cd views</code>,然后看到一个叫<code>main-nav.php</code>的玩意没,<code>sudo gedit main-nav.php</code>(如果你是V党请自便)</p><p>然后你就会看到一大串导航栏中已经有的链接名字的英文,比如<code>hack</code>,<code>contests</code>之类的,你只要仿造格式复制一句话加在后面就好了,比如</p><p><code>&lt;li&gt;&lt;a href=&quot;/NCOD&quot;&gt;&lt;?= UOJLocalde::get(&#39;NCOD&#39;) ?&gt;&lt;/a&gt;&lt;/li&gt;</code></p><p>这时候你把文件提交到SVN仓库（如果您不知道这是什么,请您还是阅读<a href="https://universaloj.github.io/" target="_blank" rel="noopener">文档</a> 中对SVN的介绍），会发现导航栏多了个叫<code>NCOD</code>的链接,但是点进去却是404,接下来我们就要创建一个叫<code>NCOD</code>的界面</p><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p><code>cd ..</code>回<code>\app</code>目录,再<code>cd controllers</code>,会发现有一大堆php,这时候只要在这里新建个php文件就行了,例如</p><p><code>gedit NCOD.php</code>,里面的内容也是有讲究的,例如</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php echoUOJPageHeader(UOJLocale::(get(&apos;NCOD&apos;)))?&gt;<br>&lt;article&gt;<br>  &lt;header&gt;<br>    &lt;h2 class=&quot;page-header&quot;&gt;National Coming Out Day&lt;/h2&gt;<br>  &lt;header&gt;<br>  ...<br>&lt;article&gt;<br>&lt;?php echoUOJPageFooter() ?&gt;<br></code></pre></td></tr></table></figure><p>注意第一行中括号内容要一致,如果您没有把握,您可以复制<code>faq.php</code>的格式看一看</p><p>保存修改后你需要将这个文件加到<code>SVN</code>仓库</p><p>例如<code>svn add NCOD.php</code></p><h3 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h3><p>创建<code>php</code>文件后再<code>cd ..</code>回<code>\app</code>目录</p><p>看到一个叫<code>route.php</code>的玩意没?<code>sudo gedit route.php</code></p><p>仿照格式加一句话就好了,例如</p><p><code>Route::any(&#39;/NCOD&#39;,&#39;NCOD.php&#39;);</code></p><p>然后保存修改后再<code>cd /locale/basic</code>,修改<code>zh-cn.php</code>,仿照格式在其中加上导航栏中你想要的中文名字</p><p>例如<code>&#39;NCOD&#39; =&gt; &#39;出柜日&#39;,</code></p><h3 id="Step5"><a href="#Step5" class="headerlink" title="Step5"></a>Step5</h3><p>最后回到<code>\app</code>文件夹,将这个版本提交上仓库即可</p><p><code>svn commit -m &quot;...&quot; *</code></p><p>话说距离初赛还有2天还在搞这个幺蛾子,怕是要凉了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开源UOJ教程 </tag>
            
            <tag> 瞎搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--有向图的强连通分量</title>
      <link href="/2018/10/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
      <url>/2018/10/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>是在不久前ZROI一场模拟赛中用了桥边来给有向图缩点结果WA掉,才发现有向图只能用强连通分量,太菜了</p><p>于是现在看集训一道题需要强连通分量缩点才开始填坑…</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>《算法竞赛进阶指南》上讲得很清楚了,想学的我觉得看书就行了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;dfn[now]=low[now]=++tot;<br>    st[++top]=now,vis[now]=<span class="hljs-number">1</span>;<span class="hljs-comment">//是否在栈中</span><br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>            tarjan(v);<br>            low[now]=min(low[now],low[v]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[v])low[now]=min(low[now],low[v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[now]==low[now])&#123;<br>        cnt++;<br>        <span class="hljs-keyword">do</span>&#123;<br>v=st[top--];vis[v]=<span class="hljs-number">0</span>;<br>            scc[cnt].push_back(v);<br>            in_scc[v]=cnt;<br>        &#125;<span class="hljs-keyword">while</span>(v!=now);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="luogu2656采蘑菇"><a href="#luogu2656采蘑菇" class="headerlink" title="luogu2656采蘑菇"></a>luogu2656采蘑菇</h4><p><a href="https://www.luogu.org/problemnew/show/P2656" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2656</a></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>缩点后跑一遍最长路即可</p><p>但是写最长路我忽然发现一些有意思的问题</p><p>就是一开始写Dijsktra结果只有50分,最后对拍无果换了个SPFA就A了,当时就心态崩了</p><p>然后查错,发现了我对迪杰斯特拉求最长路之前的有些理解有些误解,也就是<code>vis</code>数组是不能使用的,为什么?</p><p>首先考虑这种情况</p><p><img src="https://s1.ax1x.com/2018/10/10/iYzF8P.png" alt="iYzF8P.png"></p><p>如果我们求最短路,而且当前我们在$X$节点,那么设$A&lt;B&lt;C$，那么接下来肯定是堆中取出$Z$,再取出$Y$,这时候设置的<code>vis</code>,就阻止我们再次取出$Z$,为什么,因为我们是按照贪心的思想,找距离最短的点,我们第一次取出$Z$时就已经更新到了$Z$的最短路</p><p>但是考虑求最长路时,就算我们贪心地按照最长更新,如果设$B+C&gt;A&gt;B$,这时候我们第一次取出$Z$时$dis[z]=dis[x]+A$,但是我们可以在取出$Y$的时候更新$Z$,使得$dis[Z]=dis[X]+B+C$,这时候如果我们设置了<code>vis</code>数组,就无法再以这个新的更大值作为$dis[Z]$去更新其他点</p><h6 id="代码-略微压行"><a href="#代码-略微压行" class="headerlink" title="代码(略微压行)"></a>代码(略微压行)</h6><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  Code By RyeCatcher<br>  10.10<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEBUG freopen(<span class="hljs-meta-string">"dat.in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(<span class="hljs-meta-string">"wa.out"</span>,<span class="hljs-meta-string">"w"</span>.stdout);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 23333</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">O_Edge</span>&#123;</span><span class="hljs-keyword">int</span> ne,to,dis,val;&#125;oe[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> oh[maxn],oenum=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">oa_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> v)</span></span>&#123;oe[++oenum].ne=oh[f],oe[oenum].to=to,oe[oenum].dis=c,oe[oenum].val=v,oh[f]=oenum;&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S_Edge</span>&#123;</span><span class="hljs-keyword">int</span> ne,to,dis;&#125;se[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> sh[maxn],senum=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sa_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> c)</span></span>&#123;se[++senum].ne=sh[f],se[senum].to=to,se[senum].dis=c,sh[f]=senum;&#125;<br>ll w[maxn];<br><span class="hljs-keyword">int</span> n,m,in_scc[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> dfn[maxn],low[maxn],tot=<span class="hljs-number">0</span>,st[maxn],top=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> siv[maxn],vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;dfn[now]=low[now]=++tot,st[++top]=now,siv[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=oh[now];i;i=oe[i].ne)&#123;<br>        v=oe[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])&#123;tarjan(v);low[now]=min(low[now],low[v]);&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(siv[v])low[now]=min(low[now],low[v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[now]==low[now])&#123;<br>        cnt++;<br>        <span class="hljs-keyword">do</span>&#123;v=st[top--],siv[v]=<span class="hljs-number">0</span>,in_scc[v]=cnt;&#125;<span class="hljs-keyword">while</span>(now!=v);   <br>    &#125;<br>&#125;<br><span class="hljs-keyword">typedef</span> pair&lt;ll,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">int</span> s;ll dis[maxn],ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> u,v;priority_queue &lt;pair&lt;ll,<span class="hljs-keyword">int</span>&gt; &gt;q;<br>    dis[s]=w[s],q.push(pii(-dis[s],s));<br>    <span class="hljs-keyword">while</span>(q.size())&#123;<br>        u=q.top().second;q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;vis[u]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ri i=sh[u];i;i=se[i].ne)&#123;<br>            v=se[i].to;<br>            <span class="hljs-comment">//printf("%d %lld %d %lld %d\n",u,dis[u],v,dis[v],se[i].dis);</span><br>            <span class="hljs-keyword">if</span>(dis[v]&lt;dis[u]+se[i].dis)&#123;dis[v]=dis[u]+se[i].dis,q.push(pii(-dis[v],v));&#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,z,zz,num;<span class="hljs-keyword">double</span> p;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        read(x),read(y),read(z);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;p);zz=z,num=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(zz)&#123;num+=zz,zz*=p;&#125;<br>        oa_edge(x,y,z,num);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!dfn[i])tarjan(i);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;x=in_scc[i];<br>        <span class="hljs-keyword">for</span>(ri j=oh[i];j;j=oe[j].ne)&#123;<br>            y=in_scc[oe[j].to];<br>            <span class="hljs-keyword">if</span>(x==y)w[x]+=oe[j].val;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;x=in_scc[i];<br>        <span class="hljs-keyword">for</span>(ri j=oh[i];j;j=oe[j].ne)&#123;<br>            y=in_scc[oe[j].to];<br>            <span class="hljs-comment">//printf("%d %d %d %d\n",i,y,x,in_scc[y]);</span><br>            <span class="hljs-keyword">if</span>(y!=x)&#123;sa_edge(x,y,w[y]+oe[j].dis);&#125;<span class="hljs-comment">//printf("%d %d %d %d %lld\n",i,in_scc[i],y,in_scc[y],w[y]);&#125;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//for(ri i=1;i&lt;=n;i++)printf("%d %d %lld\n",i,in_scc[i],w[in_scc[i]]);</span><br>    read(s);s=in_scc[s];dij();<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)ans=max(ans,dis[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CF894E"><a href="#CF894E" class="headerlink" title="CF894E"></a>CF894E</h4><p><a href="https://www.luogu.org/problemnew/show/CF894E" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF894E</a></p><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>双倍经验,上一题的加强版,但是算一个强连通分量中的一条边的最终贡献实际上就是找到最大的K   $1+2+3+…+k&lt;=dist$,然后$dist \times k - \sum _ {i=1}^K \sum_{j=1}^i j$,然后后面那个玩意大佬们都用数学公式推,我太菜只会用前缀和….</p><h5 id="代码-注释略多"><a href="#代码-注释略多" class="headerlink" title="代码(注释略多)"></a>代码(注释略多)</h5><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  Code By RyeCatcher<br>  10.10<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Ld long double </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 23333</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">sqrt</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;ll,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to,dis;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].dis=c;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; scc[maxn];<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; e_id[maxn];<br>ll w[maxn];<span class="hljs-comment">//weight of scc</span><br><span class="hljs-built_in">vector</span>&lt;pair&lt;ll,<span class="hljs-keyword">int</span>&gt; &gt;g[maxn];<br><span class="hljs-keyword">int</span> dfn[maxn],low[maxn],tot=<span class="hljs-number">0</span>,in_scc[maxn];<br><span class="hljs-keyword">int</span> st[maxn],top=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;dfn[now]=low[now]=++tot;<br>    st[++top]=now,vis[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>            tarjan(v);<br>            low[now]=min(low[now],low[v]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[v])low[now]=min(low[now],low[v]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[now]==low[now])&#123;<br>        cnt++;<br>        <span class="hljs-keyword">do</span>&#123;<br>v=st[top--];vis[v]=<span class="hljs-number">0</span>;<br>            scc[cnt].pb(v);<br>            in_scc[v]=cnt;<br>            <span class="hljs-comment">//printf("(%d) %d\n",v,cnt);</span><br>        &#125;<span class="hljs-keyword">while</span>(v!=now);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=in_scc[now],v;vis[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-comment">//if(vis[v])continue;</span><br>        <span class="hljs-keyword">if</span>(x==in_scc[v])&#123;<br>            <span class="hljs-comment">//mx_w[x]=max(mx_w[x],edge[i].dis);</span><br>            e_id[x].pb(i);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!vis[v])dfs_1(v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> deg[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=in_scc[now],y,v;vis[now]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;y=in_scc[v];<br>        <span class="hljs-comment">//printf("%d %d %d %d\n",x,y,now,vis[v]);</span><br>        <span class="hljs-keyword">if</span>(x==y)<span class="hljs-keyword">continue</span>;<br>        deg[y]++;<br>        g[x].pb(pii(w[y]+edge[i].dis,y));<span class="hljs-comment">//add_edge(x,y,w[y]);</span><br>        <span class="hljs-keyword">if</span>(!vis[v])dfs_2(v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> rt,arr[maxn];<br>ll dis[maxn],ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;vis[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;g[now].size();i++)&#123;<br>v=g[now][i].second;<br><span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>dfs_3(v);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">int</span> x,v;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)dis[i]=<span class="hljs-number">-1e17</span>,vis[i]=<span class="hljs-number">0</span>;<br>    vis[rt]=<span class="hljs-number">1</span>,dis[rt]=w[rt];<br>    q.push(rt);<br>    <span class="hljs-keyword">while</span>(q.size())&#123;<br>        x=q.front();q.pop();<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;g[x].size();i++)&#123;<br>            v=g[x][i].second;<br>            <span class="hljs-keyword">if</span>(dis[v]&lt;dis[x]+g[x][i].first)&#123;<br>                dis[v]=dis[x]+g[x][i].first;<br>                <span class="hljs-keyword">if</span>(!vis[v])&#123;<br>                    q.push(v);<br>                    vis[v]=<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        vis[x]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)ans=max(ans,dis[i]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br>ll pp[<span class="hljs-number">100005</span>],psum[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100003</span>;i++)&#123;<br>        pp[i]=pp[i<span class="hljs-number">-1</span>]+i;<br>        psum[i]=psum[i<span class="hljs-number">-1</span>]+pp[i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> x,y,z;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        read(x),read(y),read(z);<br>        add_edge(x,y,z);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!dfn[i])tarjan(i);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!vis[i])dfs_1(i);<br>    ll p,k,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br>        sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//printf("-%d-\n",e_id[i].size());</span><br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;e_id[i].size();j++)&#123;<br>            p=edge[e_id[i][j]].dis;<br>            <span class="hljs-comment">//printf("%lld\n",p);</span><br>            k=(ll)(<span class="hljs-built_in">sqrt</span>((<span class="hljs-keyword">double</span>)p*<span class="hljs-number">2</span>+<span class="hljs-number">0.25</span>)<span class="hljs-number">-0.5</span>);<br>            <span class="hljs-comment">//printf("%lld %lld %lld\n",p,k,psum[k]);</span><br>            sum+=p*(k+<span class="hljs-number">1</span>)-psum[k];<br>        &#125;<br>        w[i]=sum;<br>        <span class="hljs-comment">//printf("--%lld--\n",sum);</span><br>    &#125;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!vis[i])dfs_2(i);<br><span class="hljs-comment">//for(ri i=1;i&lt;=n;i++)printf("%d %d %d\n",i,in_scc[i],deg[in_scc[i]]);</span><br>    read(rt);<br>    rt=in_scc[rt];<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>)*(cnt+<span class="hljs-number">3</span>));<br>spfa();<br>    <span class="hljs-comment">//for(ri i=1;i&lt;=cnt;i++)if(!deg[i])rt=i; </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 强连通分量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1037DValidBFS题解--优先队列BFS</title>
      <link href="/2018/10/10/CF1037DValidBFS%E9%A2%98%E8%A7%A3-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97BFS/"/>
      <url>/2018/10/10/CF1037DValidBFS%E9%A2%98%E8%A7%A3-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97BFS/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF1037D" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF1037D</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>看上去好容易啊,直接将在排列中的位置当作权值赋给点一波优先队列BFS就好了,然后就WA了,其实就是</p><p>PQF大佬图片所说的这种情况<a href="https://www.luogu.org/blog/PQF/solution-cf1037d" target="_blank" rel="noopener">https://www.luogu.org/blog/PQF/solution-cf1037d</a></p><p>然后解决方法其实很容易,再给每个点赋个BFS序作为第一关键字,权值为第二关键字就好了</p><p>不理解就看代码吧,其实一下就懂了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  Code By RyeCatcher<br>  10.10<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 233333</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dat</span>&#123;</span><br><span class="hljs-keyword">int</span> val,ver,dfn;<br>Dat ()&#123;val=-inf,dfn=inf,ver=<span class="hljs-number">0</span>;&#125;<br>Dat (<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y,<span class="hljs-keyword">int</span> _z)&#123;val=_x,ver=_y,dfn=_z;&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Dat &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> dfn==b.dfn?val&gt;b.val:dfn&gt;b.dfn;<br>&#125;<br>&#125;;<br>priority_queue &lt;Dat&gt; q;<br><span class="hljs-keyword">int</span> w[maxn],arr[maxn],st[maxn],top=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> u,v,x;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//BFS次序</span><br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>q.push(Dat(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,cnt));<br>vis[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>u=q.top().ver;<br>cnt++;<br>st[++top]=u;<br>q.pop();<br><span class="hljs-keyword">for</span>(ri i=h[u];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>vis[v]=<span class="hljs-number">1</span>;<br>q.push(Dat(w[v],v,cnt));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(arr[i]);<br>w[arr[i]]=i;<br>&#125;<br>bfs();<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(arr[i]!=st[i])&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"No"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"Yes"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--线段树合并与分裂</title>
      <link href="/2018/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E8%A3%82/"/>
      <url>/2018/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E8%A3%82/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>集训时侯讲了一道线段树神题,看题解时FA现需要一个叫”线段树合并”的前置技能点,于是就补了这个坑顺便了解一下线段树的分裂</p><p>需要前置技能点:</p><ul><li><p>线段树</p><ul><li>动态开点权值线段树</li></ul></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://wenku.baidu.com/view/88f4e134e518964bcf847c95.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/88f4e134e518964bcf847c95.html</a></p><p><a href="https://www.cnblogs.com/Mychael/p/8665589.html" target="_blank" rel="noopener">https://www.cnblogs.com/Mychael/p/8665589.html</a></p><p><a href="https://www.cnblogs.com/zzqsblog/p/6181434.html" target="_blank" rel="noopener">https://www.cnblogs.com/zzqsblog/p/6181434.html</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这里的线段树合并是针对动态开点的权值线段树而言的,线段树合并与分裂可以快速合并一些信息或分裂区间,完成一些查询区间第$k$大等奇奇怪怪的操作</p><h4 id="合并Merge"><a href="#合并Merge" class="headerlink" title="合并Merge"></a>合并Merge</h4><p>代码</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>  <span class="hljs-comment">/*合并x和y*/</span><br><span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">return</span> y;<br><span class="hljs-keyword">if</span>(!y)<span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">int</span> t=new_node();<br>sum[t]=sum[x]+sum[y];<br>ls[t]=merge(ls[x],ls[y]);<br>rs[t]=merge(rs[x],rs[y]);<br><span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度博客中都说是$O(N \log N)$,不过证明都感觉不太理解</p><h4 id="分裂Split"><a href="#分裂Split" class="headerlink" title="分裂Split"></a>分裂Split</h4><p>代码</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;now,<span class="hljs-keyword">int</span> &amp;po,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br><span class="hljs-comment">/*将now中前k个分裂到po中去*/</span><br>    <span class="hljs-keyword">if</span>(!now)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span>(!po)po=new_node();<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        sum[now]-=k,sum[po]+=k;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> tt=sum[ls[now]],mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k&lt;tt)split(ls[now],ls[po],l,mid,k);<br>    <span class="hljs-keyword">else</span> ls[po]=ls[now],ls[now]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(tt&lt;k)&#123;<br>        split(rs[now],rs[po],mid+<span class="hljs-number">1</span>,r,k-tt);<br>    &#125;<br>    pushup(now),pushup(po);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度看上去也像$O(N \log N)$</p><h4 id="数组大小"><a href="#数组大小" class="headerlink" title="数组大小"></a>数组大小</h4><p>这个不怎么会算,因为这个RE/MLE了好多发,考场上建议拿极限数据跑一跑看看会不会RE</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="luogu3605竞升者计数"><a href="#luogu3605竞升者计数" class="headerlink" title="luogu3605竞升者计数"></a>luogu3605竞升者计数</h4><p><a href="https://www.luogu.org/problemnew/show/P3605" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3605</a></p><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>不错的上手题,像可并堆一样自底向上合并同时不断统计答案</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    h[f]=num_edge;<br>&#125;<br>gp_hash_table &lt;ll,<span class="hljs-keyword">int</span>&gt; g;<br><span class="hljs-keyword">int</span> rt[maxn],sum[maxn&lt;&lt;<span class="hljs-number">2</span>],f[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> ls[maxn],rs[maxn];<br><span class="hljs-keyword">int</span> n,v[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> L,R,t;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,anss[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        ans+=sum[now];<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)query(ls[now],l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R) query(rs[now],mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!now)now=++cnt;<br>    sum[now]++;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t&lt;=mid)update(ls[now],l,mid);<br>    <span class="hljs-keyword">else</span> update(rs[now],mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">return</span> y;<br>    <span class="hljs-keyword">if</span>(!y)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">int</span> t=++cnt;<br>    sum[t]=sum[x]+sum[y];<br>    ls[t]=merge(ls[x],ls[y]);<br>    rs[t]=merge(rs[x],rs[y]);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        dfs(edge[i].to);<br>        merge(rt[now],rt[edge[i].to]);<br>    &#125;<br>    L=v[now]+<span class="hljs-number">1</span>,R=tot;<br>    ans=<span class="hljs-number">0</span>;<br>    query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    anss[now]=ans;<br>    t=v[now];<br>    update(rt[now],<span class="hljs-number">1</span>,tot);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;ll z;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(z);<br>        <span class="hljs-keyword">if</span>(!g[z])&#123;<br>            g[z]=++tot;<br>            f[tot]=z;<br>        &#125;<br>        v[i]=g[z];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        read(i);<br>        add_edge(i,x);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,anss[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="luogu3521-Tree-Rotations"><a href="#luogu3521-Tree-Rotations" class="headerlink" title="luogu3521 Tree Rotations"></a>luogu3521 Tree Rotations</h4><p><a href="https://www.luogu.org/problemnew/show/P3521" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3521</a></p><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>一个显然的性质,DFS序中子树是一段连续区间,对于节点$x$的儿子节点$son[x][i]$,交换它们之间的顺序对除$x$子树外的逆序对顺序不会造成任何影响,所以我们只考虑贪心地交换儿子节点使产生的逆序对最少就好了</p><p>但是考虑怎么在分别计算交换与不交换两棵线段树$Tx,Ty$各自产生的贡献,我们分治地考虑这个问题,假设一开始$Tx$在左边,那么不交换的话答案就是$Tx,Ty$中各自逆序对个数加上$\sum_i^{size[Tx]} \sum_j^{size[Ty]}[a[i]&gt;a[j]]$</p><p>前面的答案我们可以在自下而上合并中统计出来,但是考虑右边那个怎么算</p><p><a href="https://imgchr.com/i/iYut2D" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/09/iYut2D.md.png" alt="iYut2D.md.png"></a></p><p>这里还是不交换的情况,首先C区间肯定是会对A区间产生贡献(显然,这里的区间是值域区间),但是可能会忽略掉一些$Tx$在A区间中的数比$Ty$对应区间还要小的情况,所以我们还要加上$D$对$B$的贡献,以此类推,当然左区间也要递归</p><p>考虑交换的情况类似,反过来就好,不多说</p><p>然后这些可以在合并时计算出来</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1926081</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> RyeCatcher</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=gc()))ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=gc()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> sum[maxn&lt;&lt;<span class="hljs-number">2</span>],ls[maxn&lt;&lt;<span class="hljs-number">2</span>],rs[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> son[N&lt;&lt;<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],ss=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n,rot,rt[N&lt;&lt;<span class="hljs-number">2</span>],tot=<span class="hljs-number">0</span>;<br>ll val[N&lt;&lt;<span class="hljs-number">2</span>];<br>ll cnt1,cnt2,ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    read(x);<br>    ss++;<br>    <span class="hljs-keyword">if</span>(!x)&#123;<br>        x=ss;<br>        son[x][<span class="hljs-number">0</span>]=init();<br>        son[x][<span class="hljs-number">1</span>]=init();<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        val[ss]=x;<br>        x=ss;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">return</span> y;<br>    <span class="hljs-keyword">if</span>(!y)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">int</span> t=++tot;<br>    sum[t]=sum[x]+sum[y];<br>    cnt1+=<span class="hljs-number">1l</span>l*sum[ls[x]]*sum[rs[y]];<br>    cnt2+=<span class="hljs-number">1l</span>l*sum[rs[x]]*sum[ls[y]];<br>    ls[t]=merge(ls[x],ls[y]);<br>    rs[t]=merge(rs[x],rs[y]);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!now)now=++tot;<br>    sum[now]++;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t&lt;=mid)update(ls[now],l,mid);<br>    <span class="hljs-keyword">else</span> update(rs[now],mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(val[now])&#123;<br>        t=val[now];<br>        update(rt[now],<span class="hljs-number">1</span>,n);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    dfs(son[now][<span class="hljs-number">0</span>]);<br>    dfs(son[now][<span class="hljs-number">1</span>]);<br>    cnt1=cnt2=<span class="hljs-number">0</span>;<br>    rt[now]=merge(rt[son[now][<span class="hljs-number">0</span>]],rt[son[now][<span class="hljs-number">1</span>]]);<br>    ans+=min(cnt1,cnt2);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n);<br>    rot=init();<br>    dfs(rot);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="luogu2824排序"><a href="#luogu2824排序" class="headerlink" title="luogu2824排序"></a>luogu2824排序</h4><p><a href="https://www.luogu.org/problemnew/show/P2824" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2824</a></p><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>一种思路就是直接二分,然后线段树操作一波,但是这是离线的</p><p>线段树合并与分裂就可以在线地做这道题</p><p>我们一开始把所有单个元素看成一颗权值线段树,然后1操作和2操作不断合并线段树即可</p><p>但是有一些要注意的地方,就是左右端点可能恰在某些线段树表示区间的中间,我们可以通过$set$查找出这种区间,这时候要分裂出来才能合并,同时降序和升序在分裂时需要分类讨论,其实降序的话直接把那段反过来算就好了,但还是比较烦人</p><p>同时还学到了一个像是垃圾回收节约内存的操作:</p><p>用一个栈或队列记录可以用的空节点,但感觉效果不是很显著</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1926081</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::lower_bound;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> sum[N&lt;&lt;<span class="hljs-number">2</span>],ls[N&lt;&lt;<span class="hljs-number">2</span>],rs[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-comment">/*trash recycle*/</span><br><span class="hljs-keyword">int</span> st[N&lt;&lt;<span class="hljs-number">2</span>],top=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;st[++top]=x;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_node</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> x=st[top];top--;sum[x]=ls[x]=rs[x]=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> x;&#125;<br><span class="hljs-comment">/*segment &amp; set*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,rt,ty;<span class="hljs-comment">//ty==0 increasing  ty==1 decreasing</span><br>    Seg()&#123;l=r=rt=ty=<span class="hljs-number">0</span>;&#125;<br>    Seg(<span class="hljs-keyword">int</span> _l,<span class="hljs-keyword">int</span> _r,<span class="hljs-keyword">int</span> _rt,<span class="hljs-keyword">int</span> _ty)&#123;l=_l,r=_r,rt=_rt,ty=_ty;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Seg &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> r==b.r?l&lt;b.l:r&lt;b.r;<br>    &#125;<br>&#125;;<br><span class="hljs-built_in">set</span>&lt;Seg&gt;se;<br><span class="hljs-comment">/*Segment Tree*/</span><br><span class="hljs-keyword">int</span> pos;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    sum[now]=sum[ls[now]]+sum[rs[now]];<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">/*merge x and y to t*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">return</span> y;<br>    <span class="hljs-keyword">if</span>(!y)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">int</span> t=get_node();<br>    sum[t]=sum[x]+sum[y];<br>    ls[t]=merge(ls[x],ls[y]);<br>    rs[t]=merge(rs[x],rs[y]);<br>    del(x),del(y);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-comment">/*split now and put them to po*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;now,<span class="hljs-keyword">int</span> &amp;po,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!now)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span>(!po)po=get_node();<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        sum[now]-=k,sum[po]+=k;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-comment">//printf("~~%d %d %d %d~~\n",now,po,l,r);</span><br>    <span class="hljs-keyword">int</span> tt=sum[ls[now]],mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k&lt;tt)split(ls[now],ls[po],l,mid,k);<br>    <span class="hljs-keyword">else</span> ls[po]=ls[now],ls[now]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(tt&lt;k)&#123;<br>        split(rs[now],rs[po],mid+<span class="hljs-number">1</span>,r,k-tt);<br>    &#125;<br>    pushup(now),pushup(po);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">/*update*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!now)now=get_node();<br>    sum[now]++;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(pos&lt;=mid)update(ls[now],l,mid);<br>    <span class="hljs-keyword">else</span> update(rs[now],mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">/*query pos_th in an increasing sequence*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,tt=sum[ls[now]];<br><span class="hljs-comment">//printf("--%d %d %d %d %d--\n",now,l,r,tt,pos);</span><br>    <span class="hljs-keyword">if</span>(tt&gt;=pos)<span class="hljs-keyword">return</span> query(ls[now],l,mid);<br>    pos-=tt;<br>    <span class="hljs-keyword">return</span> query(rs[now],mid+<span class="hljs-number">1</span>,r);<br>&#125;<br>Seg tmp=Seg(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">set</span>&lt;Seg&gt;::iterator it,pit;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> op,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">int</span> x;<br>    tmp=Seg(<span class="hljs-number">0</span>,l,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    it=se.lower_bound(tmp);<br>    tmp=*it;x=<span class="hljs-number">0</span>;<span class="hljs-comment">//printf("%d %d\n",tmp.l,tmp.r);</span><br>    <span class="hljs-keyword">if</span>(tmp.l!=l)&#123;<br>    se.erase(it);<br>    <span class="hljs-keyword">if</span>(tmp.ty==<span class="hljs-number">0</span>)&#123;<br>        pos=l-tmp.l;<br>        split(tmp.rt,x,<span class="hljs-number">1</span>,n,pos);<br>        se.insert(Seg(tmp.l,l<span class="hljs-number">-1</span>,x,<span class="hljs-number">0</span>));<br>        se.insert(Seg(l,tmp.r,tmp.rt,<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>    pos=tmp.r-l+<span class="hljs-number">1</span>;<br>            split(tmp.rt,x,<span class="hljs-number">1</span>,n,pos);<br>            se.insert(Seg(tmp.l,l<span class="hljs-number">-1</span>,tmp.rt,<span class="hljs-number">1</span>));<br>            se.insert(Seg(l,tmp.r,x,<span class="hljs-number">1</span>));<br>&#125;<br>    &#125;<br>    <span class="hljs-comment">//puts("sss");</span><br>    tmp=Seg(<span class="hljs-number">0</span>,r,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    it=se.lower_bound(tmp);<br>    tmp=*it,x=<span class="hljs-number">0</span>;<span class="hljs-comment">//printf("%d %d\n",tmp.l,tmp.r);</span><br>    <span class="hljs-keyword">if</span>(tmp.r!=r)&#123;<br>    se.erase(it);<br>    <span class="hljs-keyword">if</span>(tmp.ty==<span class="hljs-number">0</span>)&#123;<br>        pos=r-tmp.l+<span class="hljs-number">1</span>;<br>        split(tmp.rt,x,<span class="hljs-number">1</span>,n,pos);<br>        se.insert(Seg(tmp.l,r,x,<span class="hljs-number">0</span>));<br>        se.insert(Seg(r+<span class="hljs-number">1</span>,tmp.r,tmp.rt,<span class="hljs-number">0</span>));<br>    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>pos=tmp.r-r;<br>            split(tmp.rt,x,<span class="hljs-number">1</span>,n,pos);<br>            se.insert(Seg(tmp.l,r,tmp.rt,<span class="hljs-number">1</span>));<br>            se.insert(Seg(r+<span class="hljs-number">1</span>,tmp.r,x,<span class="hljs-number">1</span>));<br>&#125;<br>    &#125;<br>    x=<span class="hljs-number">0</span>,it=se.lower_bound(Seg(<span class="hljs-number">0</span>,l,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(it!=se.end()&amp;&amp;(*it).r&lt;=r)&#123;<br>        tmp=*it;<br>        x=merge(x,tmp.rt);<br>        se.erase(it);<br>        it=se.lower_bound(Seg(<span class="hljs-number">0</span>,l,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>    &#125;<br>    se.insert(Seg(l,r,x,op));<br>    <span class="hljs-comment">//printf("**%d**\n",x);</span><br>    <span class="hljs-keyword">return</span> x;    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">int</span> op,l,r;<br>    <span class="hljs-keyword">for</span>(ri i=N;i&gt;=<span class="hljs-number">0</span>;i--)st[++top]=i;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(x);<span class="hljs-comment">//printf("%d\n",x);</span><br>        y=get_node();<br>        pos=x;<br>        update(y,<span class="hljs-number">1</span>,n);<br>        se.insert(Seg(i,i,y,<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-comment">//printf("()()(%d)()()\n",st[top]);</span><br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        read(op),read(l),read(r);<br>        solve(op,l,r);<br>        <span class="hljs-comment">//printf("()()(%d)()()\n",st[top]);</span><br>    &#125;<br>    read(x);<br>    y=solve(<span class="hljs-number">0</span>,x,x);<br>    pos=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query(y,<span class="hljs-number">1</span>,n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="luogu4197Peaks"><a href="#luogu4197Peaks" class="headerlink" title="luogu4197Peaks"></a>luogu4197Peaks</h4><p><a href="https://www.luogu.org/problemnew/show/P4197" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4197</a></p><h5 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h5><p>在线做法Kruskal重构树</p><p>离线有种简单易懂的线段树合并解法,首先将边和询问的困难度都各自从小到大排序一遍,然后不断加边,直至边的困难度超过当前询问就换到下一个询问</p><p><del>然而不知道为何疯狂RE，太菜了</del></p><p>UPDATE: 感谢Ebola巨佬,指出了merge那里的错误就不会RE了,同时对拍时发现犯了个SB的错误,我直接输出了离散化后的编号…终于A了</p><p>注意这时候一颗线段树是表示一个联通块,合并时是要合并所在联通块所表示的根节点,使用并查集完成</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*<br>  Code By RyeCatcher<br>  2018.10.9<br>*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FO(x) &#123;freopen(#x<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(#x<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout);&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE 1926081</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[SIZE],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,SIZE,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;<span class="hljs-string">'9'</span>||c&lt;<span class="hljs-string">'0'</span>)ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> st[N&lt;&lt;<span class="hljs-number">2</span>],top=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> sum[N&lt;&lt;<span class="hljs-number">2</span>],hi[<span class="hljs-number">100005</span>],fa[<span class="hljs-number">100005</span>];<br><span class="hljs-keyword">int</span> rt[<span class="hljs-number">100005</span>],ls[N&lt;&lt;<span class="hljs-number">2</span>],rs[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> n,m,q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dt</span>&#123;</span><br><span class="hljs-keyword">int</span> x,id;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Dt &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> x&lt;b.x;<br>&#125;<br>&#125;dt[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">for</span>(ri i=(N&lt;&lt;<span class="hljs-number">2</span>)<span class="hljs-number">-10</span>;i&gt;=<span class="hljs-number">1</span>;i--)st[++top]=i;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;st[++top]=x,sum[x]=ls[x]=rs[x]=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> x=st[top--];sum[x]=ls[x]=rs[x]=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> x;&#125;<br>gp_hash_table &lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; g;<span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br>ll f[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,dis;<br>    Edge()&#123;x=y=dis=inf;&#125;<br>    Edge(<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y,<span class="hljs-keyword">int</span> _d)&#123;x=_x,y=_y,dis=_d;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Edge &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> dis&lt;b.dis;<br>    &#125;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> pos;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> (fa[x]==x)?fa[x]:(fa[x]=get(fa[x]));&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!now)now=get();<br>    sum[now]++;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(pos&lt;=mid)update(ls[now],l,mid);<br>    <span class="hljs-keyword">else</span> update(rs[now],mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br><span class="hljs-comment">//printf("%d %d %d %d %d %d\n",now,l,r,k,sum[rs[now]]);</span><br>    <span class="hljs-keyword">if</span>(l==r)&#123;<span class="hljs-keyword">return</span> l;&#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,t=sum[rs[now]];<br>    <span class="hljs-keyword">if</span>(t&gt;=k)<span class="hljs-keyword">return</span> query(rs[now],mid+<span class="hljs-number">1</span>,r,k);<br>    <span class="hljs-keyword">if</span>(sum[ls[now]]&lt;k-t)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> query(ls[now],l,mid,k-t);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!x||!y)<span class="hljs-keyword">return</span> x+y;<br>    sum[x]+=sum[y];<br>    ls[x]=merge(ls[x],ls[y]);<br>    rs[x]=merge(rs[x],rs[y]);<br>    del(y);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">int</span> ans[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Query</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v,k,x,id;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Query &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x&lt;b.x;<br>    &#125;<br>&#125;qry[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tp=<span class="hljs-number">1</span>,x;<br>    <span class="hljs-keyword">int</span> np=<span class="hljs-number">1</span>,u,v;<br>    <span class="hljs-keyword">while</span>(tp&lt;=q)&#123;<br>    x=qry[tp].x;<br>    <span class="hljs-comment">//printf("**%d %d %d**\n",x,tp,qry[tp].id);</span><br>        <span class="hljs-keyword">while</span>(edge[np].dis&lt;=x&amp;&amp;np&lt;=m)&#123;<br>            u=edge[np].x,v=edge[np].y;<br>            <span class="hljs-comment">//printf("--%d %d %d\n--\n",u,v,edge[np].dis);</span><br>            u=get(u),v=get(v);<br>            <span class="hljs-keyword">if</span>(u!=v)&#123;<br>            merge(rt[u],rt[v]);        <br>            fa[v]=u;<br>        &#125;<br>            <span class="hljs-comment">//puts("xx");</span><br>            np++;<br>        &#125;<br>        <span class="hljs-comment">//printf("(%d)\n",n);</span><br>        x=query(rt[get(qry[tp].v)],<span class="hljs-number">1</span>,tot,qry[tp].k);<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span>)ans[qry[tp].id]=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> ans[qry[tp].id]=f[x];<br>        tp++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,z;<br>    init();<br>    <span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(ans));<br>    read(n),read(m),read(q);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(dt[i].x);<br>        dt[i].id=fa[i]=i;    <br>    &#125;<br>    <span class="hljs-built_in">std</span>::sort(dt+<span class="hljs-number">1</span>,dt+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    x=dt[i].x,y=dt[i].id;<br>    <span class="hljs-keyword">if</span>(!g[x])&#123;<br>    g[x]=++tot;<br>    f[tot]=x;<br>&#125;<br>hi[y]=g[x];<br><span class="hljs-comment">//pos=hi[y],update(rt[y],1,tot);</span><br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>pos=hi[i];<br>update(rt[i],<span class="hljs-number">1</span>,tot);<br>&#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        read(edge[i].x),read(edge[i].y),read(edge[i].dis);<br>    &#125;<br>    <span class="hljs-built_in">std</span>::sort(edge+<span class="hljs-number">1</span>,edge+<span class="hljs-number">1</span>+m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>        read(qry[i].v),read(qry[i].x),read(qry[i].k);<br>        qry[i].id=i;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::sort(qry+<span class="hljs-number">1</span>,qry+<span class="hljs-number">1</span>+q);<br>    solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 线段树合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转载]CF1028FMakeSymmetrical题解--性质+STL骚操作</title>
      <link href="/2018/10/08/%E8%BD%AC%E8%BD%BD-CF1028FMakeSymmetrical%E9%A2%98%E8%A7%A3-%E6%80%A7%E8%B4%A8-STL%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/10/08/%E8%BD%AC%E8%BD%BD-CF1028FMakeSymmetrical%E9%A2%98%E8%A7%A3-%E6%80%A7%E8%B4%A8-STL%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>集训时侯讲到这题,然而出题人简洁的题解跟没有差不多,然后上网看applese大佬的博客终于看懂了,不违反基本法还是贴[转载]吧</p><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF1028F" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF1028F</a></p><h3 id="转载来源"><a href="#转载来源" class="headerlink" title="转载来源"></a>转载来源</h3><p><a href="https://blog.csdn.net/effervescence/article/details/82142380" target="_blank" rel="noopener">https://blog.csdn.net/effervescence/article/details/82142380</a></p><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p> 给一个无限大的二维平面，$n(n≤2 \times 10^5)$次操作，<br> <br> (1)在平面上加一个点（保证加入前不存在）<br> <br> (2)在平面上删除一个点（保证删除时存在）<br> <br> (3)给出一个点，以原点和这个点连成的直线为对称轴，问你至少要加几个点可以使得这个平面对称。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先我们猜一个结论，就是一个以原点为圆心的圆上的整点是不会很多的（具体我不会证）。</p><p>然后又因为如果这个平面对称，那么两个对称点到原点的距离肯定是相等的。那么我们每次加入或删除一个点时，记这个点到原点的距离为d，那我们暴力枚举这个以d为半径，原点为圆心的圆上其他的点，算出他们的对称轴，把这个对称轴的数值加上或减去2，然后把这个点和原点连成的直线所形成的对称轴的数值加上或减去1，之后每次O(1)回答答案就行了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(3,<span class="hljs-meta-string">"Ofast"</span>,<span class="hljs-meta-string">"inline"</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">bool</span> Finish_read;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span>Finish_read=<span class="hljs-number">0</span>;x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=getchar();<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;<span class="hljs-keyword">if</span>(ch==EOF)<span class="hljs-keyword">return</span>;ch=getchar();&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();x*=f;Finish_read=<span class="hljs-number">1</span>;&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">print</span>(<span class="hljs-title">T</span> <span class="hljs-title">x</span>)&#123;</span><span class="hljs-keyword">if</span>(x/<span class="hljs-number">10</span>!=<span class="hljs-number">0</span>)print(x/<span class="hljs-number">10</span>);<span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">writeln</span>(<span class="hljs-title">T</span> <span class="hljs-title">x</span>)&#123;</span><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>);x=<span class="hljs-built_in">abs</span>(x);print(x);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">write</span>(<span class="hljs-title">T</span> <span class="hljs-title">x</span>)&#123;</span><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>);x=<span class="hljs-built_in">abs</span>(x);print(x);&#125;<br><span class="hljs-comment">/*================Header Template==============*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    Point(<span class="hljs-keyword">int</span> _x=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> _y=<span class="hljs-number">0</span>) &#123;<br>        x=_x,y=_y;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Point &amp;rhs) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> x==rhs.x?y&lt;rhs.y:x&lt;rhs.x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> Point <span class="hljs-title">F</span><span class="hljs-params">()</span> </span>&#123;<br>        Point p=Point(x,y);<br>        <span class="hljs-keyword">if</span>(x||y) &#123;<br>            <span class="hljs-keyword">int</span> g=__gcd(p.x,p.y);<br>            p.x/=g,p.y/=g;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> Point <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Point &amp;rhs) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> Point(x+rhs.x,y+rhs.y).F();<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">int</span> n,cnt;<br><span class="hljs-built_in">map</span>&lt;ll,<span class="hljs-built_in">set</span>&lt;Point&gt; &gt;circle;<br><span class="hljs-built_in">map</span>&lt;Point,<span class="hljs-keyword">int</span>&gt;exist;<br><span class="hljs-function">Point <span class="hljs-title">o</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    read(n);<br>    <span class="hljs-keyword">while</span>(n--) &#123;<br>        <span class="hljs-keyword">int</span> ty,x,y;<br>        read(ty),read(x),read(y);<br>        Point t=Point(x,y);<br>        ll d=<span class="hljs-number">1l</span>l*x*x+<span class="hljs-number">1l</span>l*y*y;<br>        <span class="hljs-keyword">if</span>(ty==<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:circle[d])<br>                exist[p+t]+=<span class="hljs-number">2</span>;<br>            circle[d].insert(t);<br>            exist[o+t]++,cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ty==<span class="hljs-number">2</span>) &#123;<br>            circle[d].erase(circle[d].find(t));<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:circle[d])<br>                exist[p+t]-=<span class="hljs-number">2</span>;<br>            exist[o+t]--,cnt--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ty==<span class="hljs-number">3</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,cnt-exist[o+t]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h3><p>如果您已经看懂applese大佬的博客那么您可以不用看下面了,这些是我对我在阅读时一些疑惑的<del>强行</del>解释</p><p>由于对称轴已经有一点是固定的,那么它经过的另一点(除原点)不同肯定直线也就不同,那么对于两点$A(x_a,y_a),B(x_b,y_b)$,很显然它们的对称轴经过中点$C((x_a+x_b)/2,(y_a+y_b)/2)$,于是它们的对称轴其实就可以用$C$点表示,但是为了方便起见不妨用$C`(x_a+x_b,y_a+y_b)$表示对称轴,但注意要保证$(x_a+x_b)$与$(y_a+y_b)$是互质的,否则就可能有些在一条对称轴上的点算不到</p><p>所以$exist[PT]$其实就是表示关于过$(0,0)$与$PT$两点为对称轴的点的个数,询问就是总的点数减去对称的点数就好了</p><h3 id="不含C-11特性代码"><a href="#不含C-11特性代码" class="headerlink" title="不含C++11特性代码"></a>不含C++11特性代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">int</span> n,tot;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b?gcd(b,a%b):a;&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pt</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    Pt(<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y)&#123;x=_x,y=_y;&#125;<br>    Pt <span class="hljs-keyword">operator</span> +(<span class="hljs-keyword">const</span> Pt &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">int</span> p=gcd(x+b.x,y+b.y);<br>        <span class="hljs-keyword">return</span> Pt((x+b.x)/p,(y+b.y)/p);<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Pt &amp;b)<span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> x==b.x?y&lt;b.y:x&lt;b.x;<br>&#125;<br>&#125;;<br><span class="hljs-built_in">map</span>&lt;ll,<span class="hljs-built_in">set</span>&lt;Pt&gt; &gt; c;<br><span class="hljs-built_in">map</span>&lt;Pt,<span class="hljs-keyword">int</span>&gt; g;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> op,x,y;<br>    Pt O=Pt(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);tot=<span class="hljs-number">0</span>;<br>    read(n);<br>    <span class="hljs-built_in">set</span>&lt;Pt&gt;::iterator k;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        read(op),read(x),read(y);<br>        Pt pt=Pt(x,y);<br>        ll dis=<span class="hljs-number">1l</span>l*x*x+<span class="hljs-number">1l</span>l*y*y;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span>(k=c[dis].begin();k!=c[dis].end();k++)&#123;g[*k+pt]+=<span class="hljs-number">2</span>;&#125;<br>            c[dis].insert(pt);<br>            tot++;g[O+pt]++;<br>            <span class="hljs-comment">//Pt y=O+pt;</span><br>            <span class="hljs-comment">//printf("%d %d\n",y.x,y.y);</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)&#123;<br>            c[dis].erase(c[dis].find(pt));<br>            <span class="hljs-keyword">for</span>(k=c[dis].begin();k!=c[dis].end();k++)g[*k+pt]-=<span class="hljs-number">2</span>;<br>            tot--;g[O+pt]--;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//Pt y=O+pt;</span><br>        <span class="hljs-comment">//printf("%d %d %d\n",y.x,y.y,g[y]);</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tot-g[O+pt]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> C++STL </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.6模拟赛]1.merchant题解--思维+二分</title>
      <link href="/2018/10/06/NOIP10-6%E6%A8%A1%E6%8B%9F%E8%B5%9B-1-merchant%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4-%E4%BA%8C%E5%88%86/"/>
      <url>/2018/10/06/NOIP10-6%E6%A8%A1%E6%8B%9F%E8%B5%9B-1-merchant%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4-%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)gugu(<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>考场上怕T2正解写挂其他两题没管只打了暴力,晚上发现这题思维挺妙的</p><p>同时想吐槽出题人似乎热衷卡常…我的巨大常数现在显露无疑QAQ</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题yy出了一个似乎比solution更好理解的解法,一开始有$n$条一次函数,就有$2^n$种函数集合,显然每个集合也是一个一次函数$T_i(x)=k_i x+b_i$</p><p>我们把这个集合分成两种$k_i&lt;=0$和$k_i&gt;0$,显然如果答案<strong>最后最大值的函数集合是第一种</strong>,那么显然肯定是在$x=0$取到的</p><p>所以我们单独把$x=0$拎出来考虑就可以不考虑第一种函数集合的贡献了</p><p>对于第二种$k_i&gt;0$的函数集合,应该很容易发现$max(T_i(x))$是单调递增的的图像,可以二分找到答案要求的点</p><p>然后这题就做完了</p><p>对于0的处理其实就是把$b_i$最大且大于0的拿出来看看是否大于等于S就好了,虽然最后这样的函数集合不一定是第一种$k_i&lt;=0$但是一定考虑进去了</p><p>二分的时候也是贪心把该点的处于前$m$大且大于0的单个一次函数值加起来判断一下就好了</p><p>这里有个骚操作nth_ment(l,pos,r,cmp),表示将容器中$[l,r)$种第pos个位置的元素变成第$pos$大/小(视cmp函数决定)，同时pos前都是大/小于第pos大/小的元素,pos后类似</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::nth_element;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">nc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">100000</span>],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=nc()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=nc()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br>ll v[maxn],ki[maxn],bi[maxn];<br><span class="hljs-keyword">int</span> n,m;ll s;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)v[i]=ki[i]*x+bi[i];<br>    nth_element(v+<span class="hljs-number">1</span>,v+m,v+n+<span class="hljs-number">1</span>,<span class="hljs-built_in">std</span>::greater&lt;ll&gt;());<br>    ll sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(sum&gt;=s)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i]&gt;<span class="hljs-number">0</span>)sum+=v[i];<br>        <span class="hljs-keyword">if</span>(sum&gt;=s)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>freopen(<span class="hljs-string">"merchant.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"merchant.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>    read(n),read(m),read(s);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(ki[i]),read(bi[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ok(<span class="hljs-number">0</span>))&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<br>    <span class="hljs-keyword">int</span> L=<span class="hljs-number">1</span>,R=<span class="hljs-number">1e9</span>,ans;<br>    <span class="hljs-keyword">while</span>(L&lt;=R)&#123;<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ok(mid))ans=mid<span class="hljs-number">-1</span>,R=mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> L=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.6模拟赛]2.equation题解--树+线段树</title>
      <link href="/2018/10/06/NOIP10-6%E6%A8%A1%E6%8B%9F%E8%B5%9B-2-equation%E9%A2%98%E8%A7%A3-%E6%A0%91-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2018/10/06/NOIP10-6%E6%A8%A1%E6%8B%9F%E8%B5%9B-2-equation%E9%A2%98%E8%A7%A3-%E6%A0%91-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><p>咕</p><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯:"></a>闲扯:</h3><p>终于在集训中敲出正解(虽然与正解不完全相同),开心QAQ</p><p>首先比较巧,这题是$Ebola$出的一场模拟赛的一道题的树上强化版,当时还口胡出了那题的题解</p><p>然而考场上只得了86最后一个substask被卡了,一开始以为毒瘤出题人卡常(虽然真卡了)卡线段树,题目时限1.5s,评测机上两个点擦线1500ms左右,剩下两个点不知道。然后本地测一下都是1900+ms!机子性能已经这样了吗….结果把快读换成$fread$,TM过了!最慢的1200+ms!!!这……无话可说,$getchar()$快读也卡讲究</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>首先最简单的处理不讲了.就是把每个点的未知数表示成$k_i x_1 + b_i$的形式,这DFS一遍就好了</p><p>然后观察到有一个1e3的子任务,想想暴力怎么做,我们对于操作1,相当于$(k_i+k_j)x_1+(b_i+b_j)=w$判断一下解得情况就好了,$O(1)$完成;</p><p>对于操作2,我们可以发现对于$x$的操作,只会对$x$的子树中的$k_ix_1+b_i$形式有影响(实际上只会影响$b_i$),于是$DFS$一遍子树即可,这样总的暴力时间复杂度是$O(nq)$</p><p>考虑优化暴力,</p><p>我们发现瓶颈是操作2,如果将$x$与其父亲的边权从$w_1$改为$w_2$,那么加入$x$本来形式是$k_ix_1+b_i$,这时候变成了$k_i x_1+b_i+w_2-w_1$,相当于加操作,当时在$x$的子树中与$x$的$k_i$(实际上显然只有-1,1两种取值)不同的点,$b$值却应该减去$w_2-w_1$,所以我们将标记开成一个二元组,一个记录标记的正负,另一个记录值,重载下运算符就很方便了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tag</span>&#123;</span><br>        <span class="hljs-keyword">int</span> o;<span class="hljs-comment">//标记的正负</span><br>        ll dt;<br>        Tag()&#123;o=dt=<span class="hljs-number">0</span>;&#125;<br>        Tag(<span class="hljs-keyword">int</span> o)&#123;o=dt=o;&#125;<br>        Tag(<span class="hljs-keyword">int</span> _o,ll _dt)&#123;o=_o,dt=_dt;&#125;<br>        Tag <span class="hljs-keyword">operator</span> +(<span class="hljs-keyword">const</span> Tag &amp;b)<span class="hljs-keyword">const</span>&#123;<br>            Tag tmp=*<span class="hljs-keyword">this</span>;<br>            <span class="hljs-keyword">if</span>(tmp.o==<span class="hljs-number">0</span>)tmp=b;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b.o==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> tmp;<br>            <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(o!=b.o)&#123;<br>                tmp.dt=dt-b.dt;<br>            &#125;<br>            <span class="hljs-keyword">else</span> tmp.dt=dt+b.dt;<br>            &#125;<br>            <span class="hljs-keyword">return</span> tmp; <br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><p>这样对于操作2,只用在子树加个标记就好了,因为dfs序是一段连续区间(我比较傻考场上是用树链剖分)使用线段树就好了</p><p>对于操作1,我们两次单点查询就好了,然后按暴力那样处理.</p><p>总的时间复杂度$O(q log N)$,常数稍大</p><p>当然标算std是将深度分奇偶考虑,然后树状数组维护差分标记,时间复杂度相同但是常数小的多</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这是考场代码换了快读,如果想看线段树部分直接跳到$niconicoi$那个$namespace$就好了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">abs</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">nc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">100000</span>],*p1=buf,*p2=buf;<br>    <span class="hljs-keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>,<span class="hljs-built_in">stdin</span>),p1==p2)?EOF:*p1++;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=nc()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=nc()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000005</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>    ll dis;<br>&#125;edge[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[N],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].dis=c;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Wt</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ki;<br>    ll bi;<br>    Wt()&#123;ki=bi=<span class="hljs-number">0</span>;&#125;<br>    Wt(<span class="hljs-keyword">int</span> _k,ll _b)&#123;ki=_k,bi=_b;&#125;<br>&#125;pt[N];<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-keyword">int</span> fafa[N],fa_id[N];<br><span class="hljs-keyword">namespace</span> wtf&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*orz*/</span><br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> x=pt[now].ki,y=pt[now].bi;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        fafa[v]=now;<br>        fa_id[v]=i;<br>        pt[v]=Wt(-x,edge[i].dis-y);<br>        pre_dfs(v,now);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">namespace</span> qwq&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> op,x,y;ll dd;<br>        ll p=edge[<span class="hljs-number">2</span>].dis;<br>        <span class="hljs-keyword">while</span>(q--)&#123;<br>            read(op),read(x),read(y);<br>            <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)&#123;<br>                read(dd);<br>                <span class="hljs-keyword">if</span>(x!=y)&#123;<br>                    <span class="hljs-keyword">if</span>(dd==p)&#123;<br>                        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"inf"</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(dd%<span class="hljs-number">2</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,dd/<span class="hljs-number">2</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>)&#123;<br>                        ll tt=<span class="hljs-number">2</span>*p-dd;<br>                        <span class="hljs-keyword">if</span>(tt%<span class="hljs-number">2</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,tt/<span class="hljs-number">2</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p=y;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> task_1&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> op,x,y;ll dd;<br>        <span class="hljs-keyword">int</span> kk,bb;<br>        <span class="hljs-keyword">while</span>(q--)&#123;<br>            read(op),read(x),read(y);<br>            <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)&#123;<br>                read(dd);<br>                kk=pt[x].ki+pt[y].ki;<br>                bb=pt[x].bi+pt[y].bi;<br>                dd=dd-bb;<br>                <span class="hljs-keyword">if</span>(kk==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(dd==<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"inf"</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dd%<span class="hljs-built_in">abs</span>(kk)!=<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,dd/kk);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                edge[fa_id[x]].dis=y;<br>                edge[fa_id[x]^<span class="hljs-number">1</span>].dis=y;<br>                pre_dfs(fafa[x],fafa[fafa[x]]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> niconiconi&#123;<br>    <span class="hljs-keyword">int</span> dep[N],top[N],son[N],size[N],dfn[N],rnk[N],tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(ll xxx)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!xxx)<span class="hljs-keyword">return</span> ;<br>print(xxx/<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">putchar</span>(xxx%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);   <br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>            v=edge[i].to;<br>            <span class="hljs-keyword">if</span>(v==fafa[now])<span class="hljs-keyword">continue</span>;<br>            dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>            dfs_1(v);<br>            size[now]+=size[v];<br>            <span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> v;top[now]=t;<br>        dfn[now]=++tot,rnk[tot]=now;<br>        <span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>        dfs_2(son[now],t);<br>        <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>            v=edge[i].to;<br>            <span class="hljs-keyword">if</span>(v==fafa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>            dfs_2(v,v);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tag</span>&#123;</span><br>        <span class="hljs-keyword">int</span> o;<span class="hljs-comment">//标记的正负</span><br>        ll dt;<br>        Tag()&#123;o=dt=<span class="hljs-number">0</span>;&#125;<br>        Tag(<span class="hljs-keyword">int</span> o)&#123;o=dt=o;&#125;<br>        Tag(<span class="hljs-keyword">int</span> _o,ll _dt)&#123;o=_o,dt=_dt;&#125;<br>        Tag <span class="hljs-keyword">operator</span> +(<span class="hljs-keyword">const</span> Tag &amp;b)<span class="hljs-keyword">const</span>&#123;<br>            Tag tmp=*<span class="hljs-keyword">this</span>;<br>            <span class="hljs-keyword">if</span>(tmp.o==<span class="hljs-number">0</span>)tmp=b;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b.o==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> tmp;<br>            <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(o!=b.o)&#123;<br>                tmp.dt=dt-b.dt;<br>            &#125;<br>            <span class="hljs-keyword">else</span> tmp.dt=dt+b.dt;<br>            &#125;<br>            <span class="hljs-keyword">return</span> tmp; <br>        &#125;<br>    &#125;;<br>Tag tag[N&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        tag[now]=Tag(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> L,R;<br>    Tag dta;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(tag[now].o==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ;<br>        tag[now&lt;&lt;<span class="hljs-number">1</span>]=tag[now&lt;&lt;<span class="hljs-number">1</span>]+tag[now];<br>        tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+tag[now];<br>        tag[now]=Tag(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>            tag[now]=tag[now]+dta;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pushdown(now);<br>        <span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        <span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    Wt pa,pb;<br><span class="hljs-keyword">int</span> t;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            <span class="hljs-comment">//int kkk=pt[rnk[l]].ki,bbb=pt[rnk[l]].bi;</span><br>            <span class="hljs-keyword">if</span>(tag[now].o!=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(tag[now].o!=pt[rnk[l]].ki)&#123;<br>                    pt[rnk[l]].bi-=tag[now].dt;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    pt[rnk[l]].bi+=tag[now].dt;<br>                &#125;<br>                tag[now]=Tag(<span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-comment">//pa.ki=pt[rnk[l]].ki;</span><br>            <span class="hljs-comment">//pa.bi=pt[rnk[l]].bi;</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pushdown(now);<br>        <span class="hljs-keyword">if</span>(t&lt;=mid)query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        <span class="hljs-keyword">else</span> query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> op,x,y;<br>        ll kk,bb,dd;<br>        dep[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        dfs_1(<span class="hljs-number">1</span>);<br>        dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        <span class="hljs-keyword">while</span>(q--)&#123;<br>            read(op),read(x),read(y);<br>            <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)&#123;<br>                read(dd);<br>                t=dfn[x];<span class="hljs-comment">//pa=Wt(0,0);</span><br>                query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>                t=dfn[y];<span class="hljs-comment">//pb=Wt(pa.ki,pa.bi),pa=Wt(0,0);</span><br>                query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>                <span class="hljs-comment">//printf("%d %d %d %d\n",pa.ki,pb.ki,pa.bi,pb.bi);</span><br>                kk=pt[x].ki+pt[y].ki;<br>                bb=pt[x].bi+pt[y].bi;<br>                dd=dd-bb;<br>                <span class="hljs-keyword">if</span>(kk==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(dd==<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"inf"</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dd%<span class="hljs-built_in">abs</span>(kk)!=<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"none"</span>);<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span>(dd==<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br>                    <span class="hljs-keyword">else</span> &#123;<br>                    dd=dd/kk;<br>                    <span class="hljs-keyword">if</span>(dd&lt;<span class="hljs-number">0</span>)dd=-dd,<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>);<br>print(dd);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>&#125;<br>                    <span class="hljs-comment">//printf("%lld\n",dd/kk);</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                dd=edge[fa_id[x]].dis;<br>                edge[fa_id[x]].dis=edge[fa_id[x]^<span class="hljs-number">1</span>].dis=y;<br>                dd=<span class="hljs-number">1l</span>l*y-dd;<br>                <span class="hljs-comment">//printf("%lld\n",dd);</span><br>                L=dfn[x],R=dfn[x]+size[x]<span class="hljs-number">-1</span>;<br>                <span class="hljs-comment">//t=dfn[x];pa=Wt(0,0);</span><br>                <span class="hljs-comment">//query(1,1,n);</span><br>                pa=pt[x];<br>                <span class="hljs-comment">//printf("%d\n",pa.ki);</span><br>                dta=Tag(pa.ki,dd);<br>                update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>                <span class="hljs-comment">//update_subtree()</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;<br>    freopen(<span class="hljs-string">"equation.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">"equation.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>    read(n),read(q);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        read(x),read(y);<br>        add_edge(i,x,y);<br>        add_edge(x,i,y);<br>    &#125;<br>    pt[<span class="hljs-number">1</span>].ki=<span class="hljs-number">1</span>,pt[<span class="hljs-number">1</span>].bi=<span class="hljs-number">0</span>;<br>    fafa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    pre_dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(q==<span class="hljs-number">0</span>)wtf::main();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)qwq::main();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2000</span>)task_1::main();<br>    <span class="hljs-keyword">else</span> niconiconi::main();<br>    fclose(<span class="hljs-built_in">stdin</span>);<br>    fclose(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.5模拟赛]3.c题解--思维</title>
      <link href="/2018/10/05/NOIP10-5%E6%A8%A1%E6%8B%9F%E8%B5%9B-3-c%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4/"/>
      <url>/2018/10/05/NOIP10-5%E6%A8%A1%E6%8B%9F%E8%B5%9B-3-c%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>这次不咕了</p><p><a href="https://www.luogu.org/problemnew/show/AT2389" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/AT2389</a></p><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>考场20分爆搜走人 \cy</p><p>话说这几天T3都很考验思维啊</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们先钦定一只鸡(虽然考试时是苹果但是我觉得杀鸡更亲切(因为我们某位同学))先必须活着,所以呢我们需要逆着倒推每一组关系,然后把为了保证我们钦定的鸡活着必须杀的鸡放进一个集合,为了方便表示用$f[now][i]=1/0$表示钦定第now只鸡活着第$i$只鸡最终有没有加入集合;</p><p>对于一对关系$(a,b)$,如果$f[now][a]=1$,那么$f[now][b]$显然必须置为1加入集合,因为a这只鸡为了保证now不被杀掉已经在一条边中被杀掉,为了保证当前这条边合法则必须杀掉b(注意关系是倒着枚举的)</p><p>但这是有个问题,就是如果$f[now][a]$&amp;$f[now][b]=1$说明关系矛盾,$now$必须死,为啥?</p><p><img src="https://s1.ax1x.com/2018/10/05/i8WxW6.png" alt="i8WxW6.png"></p><p>我们考虑没有这种情况,将鸡视为点,关系视为边,显然我们的集合实际上是一个以now为根节点的树,而且满足$x$到$fa[x]$的关系比$fa[x]$到$fa[fa[x]]$的边次序要早(但是在枚举时因为是倒着枚举是先构成前者)</p><p>如果这时候加入一条边连接两个已经在集合中的点$(a,b)$,由于1号边次序要比2,3边早,所以先必须在a,b中选一个杀死满足1号边的关系.但是我们为了让now不死,我们必须要让a点因为2号边死去,b因为3号边死去.出现了这种情况显然就不可能了,所以需要记录一下$now$存活是不可行的</p><p>最后假设已经遍历完,获得钦定每个点活着的时候要杀掉的鸡的集合(虽然不一定合法)</p><p>然后对于每一只鸡判断是否能与编号靠后的另一只鸡一起存活,怎么判断呢?</p><p>首先如果如果其中有只鸡本身无法存活则特判continue,但是还有种非法的情况,就是存在一只鸡为了满足$a$活必须死,又同时满足$b$活下来也必须死.这样的话$a,b$无法同时存活</p><p>这其实很显然的,边有先后顺序,你为了满足其中一只鸡另一只鸡就一定不可行,所以这种情况我们可以把两个鸡的集合并起来看看有没有1存在</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">bitset</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">405</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-built_in">bitset</span> &lt;maxn&gt; o[maxn];<br><span class="hljs-keyword">bool</span> ok[maxn];<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100005</span>],b[<span class="hljs-number">100005</span>],m,n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)read(a[i]),read(b[i]);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        o[i][i]=<span class="hljs-number">1</span>;flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri j=m;j&gt;=<span class="hljs-number">1</span>&amp;&amp;!flag;j--)&#123;<br>            x=o[i][a[j]],y=o[i][b[j]];<br>            <span class="hljs-keyword">if</span>(x&amp;y)&#123;<br>                ok[i]=<span class="hljs-number">1</span>;<br>                flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(x)&#123;o[i][b[j]]=<span class="hljs-number">1</span>;&#125;<br>            <span class="hljs-keyword">if</span>(y)&#123;o[i][a[j]]=<span class="hljs-number">1</span>;&#125;<br>        &#125;<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(ok[i])<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span>(ri j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(ok[j])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!((o[i]&amp;o[j]).any()))ans++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.5模拟赛]1.a题解--离散化+异或线段树</title>
      <link href="/2018/10/05/NOIP10-5%E6%A8%A1%E6%8B%9F%E8%B5%9B-1-a%E9%A2%98%E8%A7%A3-%E7%A6%BB%E6%95%A3%E5%8C%96-%E5%BC%82%E6%88%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2018/10/05/NOIP10-5%E6%A8%A1%E6%8B%9F%E8%B5%9B-1-a%E9%A2%98%E8%A7%A3-%E7%A6%BB%E6%95%A3%E5%8C%96-%E5%BC%82%E6%88%96%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><p>咕咕咕</p><p><a href="https://www.luogu.org/problemnew/show/CF817F" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF817F</a></p><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><p>在Yali经历几天折磨后信心摧残,T1数据结构裸题考场上连暴力都TM没打满</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>观察到点值巨大,离散化即可</p><p>但是注意到$1,l+1,r+1$都是会产生答案的,也需要离散化,同时注意数组大小</p><p>然后区间异或线段树,为了查询我们记录一个数组$sum0[now]$表示now区间0的个数</p><p>同时相应的记录的一个$sum1[now]$表示区间1的个数方便各种操作的转换</p><p>下传标记时需要注意的就不多说了,也不用注意挺多,还挺好码的</p><p>但是注意数组别开小了!!!我们一条区间最多拓展四个点!</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">400005</span>;<span class="hljs-comment">//数组一定要开大,线段树最多是平常的四倍</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> L,R,dta;<br><span class="hljs-keyword">int</span> pos=<span class="hljs-number">-1</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree</span>&#123;</span><br>    <span class="hljs-keyword">int</span> sum1[maxn&lt;&lt;<span class="hljs-number">2</span>],sum0[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> tag[maxn&lt;&lt;<span class="hljs-number">2</span>],<span class="hljs-built_in">set</span>[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>        sum0[now]=sum0[now&lt;&lt;<span class="hljs-number">1</span>]+sum0[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>        sum1[now]=sum1[now&lt;&lt;<span class="hljs-number">1</span>]+sum1[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-built_in">set</span>[now]=<span class="hljs-number">-1</span>,tag[now]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            sum0[now]=<span class="hljs-number">1</span>,sum1[now]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        pushup(now);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> ln,<span class="hljs-keyword">int</span> rn)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(tag[now])&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now]==<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]!=<span class="hljs-number">-1</span>)<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]!=<span class="hljs-number">-1</span>)<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//tag[now&lt;&lt;1]^=1,tag[now&lt;&lt;1|1]^=1;</span><br>                swap(sum1[now&lt;&lt;<span class="hljs-number">1</span>],sum0[now&lt;&lt;<span class="hljs-number">1</span>]);<br>                swap(sum1[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],sum0[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>            &#125;<br>            tag[now]=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now]!=<span class="hljs-number">-1</span>)&#123;<br>            tag[now&lt;&lt;<span class="hljs-number">1</span>]=tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]=<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-built_in">set</span>[now];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now]==<span class="hljs-number">1</span>)&#123;<br>                sum1[now&lt;&lt;<span class="hljs-number">1</span>]=ln,sum0[now&lt;&lt;<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>                sum1[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=rn,sum0[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                sum1[now&lt;&lt;<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>,sum0[now&lt;&lt;<span class="hljs-number">1</span>]=rn;<br>                sum1[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>,sum0[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=rn;<br>            &#125;<br>            <span class="hljs-built_in">set</span>[now]=<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_s1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>            <span class="hljs-built_in">set</span>[now]=<span class="hljs-number">1</span>;<br>            tag[now]=<span class="hljs-number">0</span>;<br>            sum0[now]=<span class="hljs-number">0</span>,sum1[now]=(r-l+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pushdown(now,mid-l+<span class="hljs-number">1</span>,r-mid);<br>        <span class="hljs-keyword">if</span>(L&lt;=mid)update_s1(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        <span class="hljs-keyword">if</span>(mid&lt;R)update_s1(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        pushup(now);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_s0</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>            <span class="hljs-built_in">set</span>[now]=<span class="hljs-number">0</span>;<br>            tag[now]=<span class="hljs-number">0</span>;<br>            sum0[now]=(r-l+<span class="hljs-number">1</span>),sum1[now]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pushdown(now,mid-l+<span class="hljs-number">1</span>,r-mid);<br>        <span class="hljs-keyword">if</span>(L&lt;=mid)update_s0(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        <span class="hljs-keyword">if</span>(mid&lt;R)update_s0(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        pushup(now);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_xor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now]!=<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-built_in">set</span>[now]^=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> tag[now]^=<span class="hljs-number">1</span>;<br>            swap(sum0[now],sum1[now]);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pushdown(now,mid-l+<span class="hljs-number">1</span>,r-mid);<br>        <span class="hljs-keyword">if</span>(L&lt;=mid)update_xor(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        <span class="hljs-keyword">if</span>(mid&lt;R)update_xor(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        pushup(now);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(sum0[now]==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ;<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            pos=l;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pushdown(now,mid-l+<span class="hljs-number">1</span>,r-mid);<br>        <span class="hljs-keyword">if</span>(sum0[now&lt;&lt;<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>)query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        <span class="hljs-keyword">if</span>(pos!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(sum0[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>)query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        pushup(now);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;T;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">OP</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ty;ll l,r;<br>&#125;op[maxn];<br><span class="hljs-keyword">int</span> n;<br>ll f[maxn&lt;&lt;<span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br>gp_hash_table &lt;ll,<span class="hljs-keyword">int</span>&gt; h;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>freopen(<span class="hljs-string">"a.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"a.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>    read(n);<br>f[++tot]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(op[i].ty),read(op[i].l),read(op[i].r);<br>        f[++tot]=op[i].l,f[++tot]=op[i].r;<br>f[++tot]=op[i].l+<span class="hljs-number">1</span>;<br>f[++tot]=op[i].r+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">std</span>::sort(f+<span class="hljs-number">1</span>,f+<span class="hljs-number">1</span>+tot);<br>    tot=<span class="hljs-built_in">std</span>::unique(f+<span class="hljs-number">1</span>,f+<span class="hljs-number">1</span>+tot)-(f+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br>        h[f[i]]=i;<br>    &#125;<br>    T.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,tot);<br><span class="hljs-comment">//tot=1000;</span><br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        L=h[op[i].l],R=h[op[i].r];<br>        <span class="hljs-comment">//L=op[i].l,R=op[i].r;</span><br>        <span class="hljs-comment">//printf("%d %d\n",L,R);</span><br>        <span class="hljs-keyword">if</span>(op[i].ty==<span class="hljs-number">1</span>)&#123;<br>            T.update_s1(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,tot);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op[i].ty==<span class="hljs-number">2</span>)&#123;<br>            T.update_s0(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,tot);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op[i].ty==<span class="hljs-number">3</span>)&#123;<br>            T.update_xor(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,tot);<br>        &#125;<br>        pos=<span class="hljs-number">-1</span>;<br>        T.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,tot);<br>        <span class="hljs-comment">//printf("--%d--\n",pos);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[pos]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.4模拟赛]3.z题解--思维</title>
      <link href="/2018/10/04/NOIP10-4%E6%A8%A1%E6%8B%9F%E8%B5%9B-3-z%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4/"/>
      <url>/2018/10/04/NOIP10-4%E6%A8%A1%E6%8B%9F%E8%B5%9B-3-z%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><p>咕咕</p><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯:"></a>闲扯:</h3><p>哈哈这道T3考场上又敲了5个namespace,300+行,有了前车之鉴还对拍过,本以为子任务分稳了</p><p>结果只有30分哈哈,明明用极限数据对拍过不知怎么回事最后数据又是读不全,玄学,要是NOIP这样就GG了</p><p>首先第一个子任务贪心模拟即可，但是第二个子任务就像NOID1T1，你啥也不能输出但是我输出了0哈哈，真的是傻到家了,第三个子任务简单考虑一下即可;第四个子任务已经想到了偏正解的做法,但是用了个很SB的方法维护,昨天的T3也是这样但是都GG了…感觉退役钦定了</p><p>感谢WYT大佬正解讲解,高一神仙tql</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>先考虑第四个子任务,我说一下我在考场上的做法，我们设$pos[i]$是第i个任务的坐标,同时先将区间长度排序离线处理</p><p>先考虑pos[1]&gt;0的情况,我们把相邻正负两点看成一对处理,所以我们可以一开始在负的点值那里加一个0点这样就凑成对了,考虑从一个负点右移到一个正点的时候,如果都不会出现不用右移的情况(也就是不会有直接覆盖正点的情况)答案就是上一次的总长度减去点个数乘以区间长度之差</p><p>但是如果出现了这种情况呢?首先我们离线处理是已经将区间长度从小到大排序,所以当前区间长度是这种情况下一个区间的长度肯定还会是这种情况。</p><p>所以遇到这种情况我们需要减去计算之前区间长度在这两点之间需要的移动距离,再将这两个踢出我们的考虑范围(我比较傻用了两个堆存储一个正点一个负点,由于是正值或负值是分别单调的只需要两个指针即可完成操作),同时点数减去2（成对考虑）,再次计算贡献即可</p><p>pos[1]&lt;0再分类讨论一下就好了</p><p>这种情况经过了对拍的检验应该是没什么问题的但是数据没读全也不知道咋回事</p><p>然后正解是怎么处理这个子任务的呢?我们可以把任务编号看成x轴,坐标位置看成y轴点出所有的点再将相邻两点连线是这个样子:</p><p><img src="https://s1.ax1x.com/2018/10/04/i8ZvoF.png" alt="i8ZvoF.png"></p><p>我们将相邻两点之间连线的长度叫做$p[i]$,当前区间长度为$L$,如果任意$p[i]&gt;L$那么答案就是$\sum (p[i]-L)$</p><p>但是如果存在$p[i]&lt;=L$呢,若$a,b$连线长度$p&lt;=L$,那么我们将这两点删去,将$a-1,b+1$之间连新的线</p><p><img src="https://s1.ax1x.com/2018/10/04/i8eEdO.png" alt="i8eEdO.png"></p><p>你会发现由于连线长度是单调的非常好处理,实际上我的做法也是在模拟类似的操作</p><p>再考虑没有第四个子任务的限制怎么做.首先我们可以预处理,对于一段连续的任务如果是单调的,那么我们只用保留头和尾就可以了,中间的显然不用管,那么这时候再仿照上面画出图像</p><p><img src="https://s1.ax1x.com/2018/10/04/i8eKSA.png" alt="i8eKSA.png"></p><p>会发现由于并没有任务4的限制预处理后还可能出现x这样的点,这时候连线长度就不是递增的了,怎么办呢?</p><p>我们把所有长度放入一个小根堆中,每次对于一个新区间长度L,如果堆顶长度p小于等于L,也就是说达到x-1时就已经覆盖了x,比如图中$x-1$到$x$这段折线,我们就把它相邻两段连线包括它本身换成另一条折线,这样显然是最优情况</p><p>所以我们还需要记录连线的前驱后继来个映射,还要用链表/map记录下对应位移序列之类的搞一搞,统计方案用上面一样的方法,不断更新连线段数和连线总长就好了</p><p>由于每段只会进堆一次,时间复杂度$O(NlogN)$</p><p>但是这道题细节巨坑…题解只说了在首尾要特判,但其实链表之类搞一搞真挺烦的,所以并没有写代码…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><p>这是标程代码…我太懒了并没有自己写一份</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n,m;<br>ll tot,ans[maxn];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; x;<br><span class="hljs-built_in">vector</span>&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; a;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(ll k)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!mp.empty()&amp;&amp;mp.begin()-&gt;second&lt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> tot-(mp.size()<span class="hljs-number">-1</span>)*k;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> tot-mp.size()*k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>priority_queue&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;,<span class="hljs-built_in">vector</span>&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; &gt; q;<br><span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;x.size();++i)&#123;<br>tot+=<span class="hljs-built_in">abs</span>(x[i]);<br>mp[i]=x[i];<br>q.push(make_pair(<span class="hljs-built_in">abs</span>(x[i]),i));<br>&#125;<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> id=q.top().second,tmp=q.top().first;q.pop();<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;::iterator p=mp.lower_bound(id);<br><span class="hljs-keyword">if</span>(p==mp.end()||p-&gt;first!=id||<span class="hljs-built_in">abs</span>(p-&gt;second)!=tmp)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">while</span>(t&lt;a.size()&amp;&amp;<span class="hljs-built_in">abs</span>(p-&gt;second)&gt;a[t].first)<br>ans[a[t].second]=calc(a[t].first),++t;<br><span class="hljs-keyword">if</span>(p!=mp.begin())<br><span class="hljs-keyword">if</span>(p!=prev(mp.end()))&#123;<br>tmp=p-&gt;second,tot-=<span class="hljs-built_in">abs</span>(p-&gt;second);<br>tmp+=prev(p)-&gt;second,tot-=<span class="hljs-built_in">abs</span>(prev(p)-&gt;second);<br>tmp+=next(p)-&gt;second,tot-=<span class="hljs-built_in">abs</span>(next(p)-&gt;second);<br>mp.erase(prev(p));<br>mp.erase(next(p));<br>p-&gt;second=tmp,tot+=<span class="hljs-built_in">abs</span>(tmp);<br>q.push(make_pair(<span class="hljs-built_in">abs</span>(tmp),id));<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>tot-=<span class="hljs-built_in">abs</span>(p-&gt;second);<br>mp.erase(p);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;second&gt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span>(p!=prev(mp.end()))&#123;<br>tmp=p-&gt;second,tot-=<span class="hljs-built_in">abs</span>(p-&gt;second);<br>tmp+=next(p)-&gt;second,tot-=<span class="hljs-built_in">abs</span>(next(p)-&gt;second);<br>mp.erase(next(p));<br><span class="hljs-keyword">if</span>(tmp)&#123;<br>p-&gt;second=tmp,tot+=<span class="hljs-built_in">abs</span>(tmp);<br>q.push(make_pair(<span class="hljs-built_in">abs</span>(tmp),id));<br>&#125;<br><span class="hljs-keyword">else</span><br>mp.erase(p);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>tot-=<span class="hljs-built_in">abs</span>(p-&gt;second);<br>mp.erase(p);<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(t&lt;a.size())<br>ans[a[t].second]=calc(a[t].first),++t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>freopen(<span class="hljs-string">"z.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"z.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,p,last=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;p);<br><span class="hljs-keyword">if</span>(p==last)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(!x.empty()&amp;&amp;(x.back()&lt;<span class="hljs-number">0</span>&amp;&amp;p&lt;last||x.back()&gt;<span class="hljs-number">0</span>&amp;&amp;p&gt;last))<br>x.back()+=p-last;<br><span class="hljs-keyword">else</span><br>x.push_back(p-last);<br>last=p;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,l;i&lt;m;++i)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;l);<br>a.push_back(make_pair(l,i));<br>&#125;<br>sort(a.begin(),a.end());<br>solve();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.4模拟赛]2.y题解--折半搜索+状压计数</title>
      <link href="/2018/10/04/NOIP10-4%E6%A8%A1%E6%8B%9F%E8%B5%9B-2-y%E9%A2%98%E8%A7%A3-%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2-%E7%8A%B6%E5%8E%8B%E8%AE%A1%E6%95%B0/"/>
      <url>/2018/10/04/NOIP10-4%E6%A8%A1%E6%8B%9F%E8%B5%9B-2-y%E9%A2%98%E8%A7%A3-%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2-%E7%8A%B6%E5%8E%8B%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><p>咕</p><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯:"></a>闲扯:</h3><p>这题暴力分似乎挺多,但是一些奇奇怪怪的细节没注意RE了,还是太菜了</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>首先我们考虑最naiive的状压DP ,$f[u][v][state]$表示u开头,v结尾是否存在一条表示为state的路径,这个好转移不讲了,但是由于d的范围时间复杂度过大,于是考虑折半搜索</p><p>我们把一条最终路径的路径分成两部分$p=(d+1)/2$(其实就是上取整),$q=d-p$,显然$p&gt;=q$</p><p>于是我们可以把一条路径长度看成两部分,一条从1开始,长度为p的路径,另一条以某点为开头,长度为q,终点恰好与第一条路径接上.</p><p>然后这时候我们就用$ff[state][x]$表示是否存在一条以x为开头,表示为state的路径,这个DP数组怎么得到呢?</p><p>我们枚举起点$st$,再用一个数组$f[state][x]$表示是否存在一条st开头,x结尾,状态为state的路径,这个非常好转移我们从小到达枚举状态再根据两点之间是否连边转移</p><p>于是如果$f[state]$中存在一个值为1的元素,那么$ff[state][st]=1$</p><p>由于是折半路径,我们只需要将路径状态压为一个p位二进制数就好了</p><p>注意最后路径是从1开始,我们方便起见倒着枚举起点,最后枚举长度为p的前一半状态,和长度为q的后一半状态,如果存在一点v,$ff[state_1][v]$&amp;$f[state_2][v]==1$,那么方案数加1</p><p>同时预防前导0还需要特殊处理</p><p>还发现DP数组都是0/1序列,使用bitset减少操作时间复杂度</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">bitset</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">95</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span><span class="hljs-number">-1</span>;<br><span class="hljs-built_in">bitset</span> &lt;maxn&gt; g0[maxn],g1[maxn],f[N],ff[N];<br><span class="hljs-keyword">int</span> p,q;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;N;i++)f[i].reset();<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n,m,d;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,z;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Luogu</span><br>    freopen(<span class="hljs-string">"y2.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">"y2.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    read(n),read(m),read(d);<br>    <span class="hljs-keyword">int</span> p=(d+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>,q=d-p;<br>    <span class="hljs-keyword">int</span> o=<span class="hljs-number">1</span>&lt;&lt;p,oo=<span class="hljs-number">1</span>&lt;&lt;q;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        read(x),read(y),read(z);<br>        <span class="hljs-keyword">if</span>(z==<span class="hljs-number">1</span>)g1[x][y]=g1[y][x]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> g0[x][y]=g0[y][x]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri now=n;now&gt;=<span class="hljs-number">1</span>;now--)&#123;<br>        clear();<br>        f[<span class="hljs-number">1</span>][now]=<span class="hljs-number">1</span>;<span class="hljs-comment">//避免前导0</span><br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;o;i++)&#123;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(f[i][j])&#123;<span class="hljs-comment">//now循环中,f[state][v]表示now开头,v结尾状态为state的路径是否存在 </span><br>                    f[i&lt;&lt;<span class="hljs-number">1</span>]|=g0[j],f[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]|=g1[j];<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-comment">//ff[state][u]表示从u开头,是否能走出一条状态为state的路径 </span><br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;o;i++)ff[i][now]=f[o|i].any();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;o;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;oo;j++)&#123;<br>            <span class="hljs-keyword">if</span>((ff[i]&amp;f[oo|j]).any())ans++;<br>        &#125;<br>        <span class="hljs-comment">//若存在点x f[state_1][x]=1并且ff[state_2][x]=1</span><br><span class="hljs-comment">//说明从x开头能走出一条state_2的路径</span><br><span class="hljs-comment">//从1开头,x结尾,又能走出一条state_1的路径,这样就能连起来成为一条合法的路径 </span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 计数 </tag>
            
            <tag> 折半搜索 </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP10.3模拟赛]3.w题解--神奇树形DP</title>
      <link href="/2018/10/03/NOIP10-3%E6%A8%A1%E6%8B%9F%E8%B5%9B-3-w%E9%A2%98%E8%A7%A3-%E7%A5%9E%E5%A5%87%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2018/10/03/NOIP10-3%E6%A8%A1%E6%8B%9F%E8%B5%9B-3-w%E9%A2%98%E8%A7%A3-%E7%A5%9E%E5%A5%87%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><p>咕</p><h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯:"></a>闲扯:</h3><p>这题考场上把子任务都敲满了,5个namespace,400行11k</p><p>结果爆0了哈哈,因为写了个假快读只能读入一位数,所以手测数据都过了,交上去全TLE了</p><p>把边分成三类:0. 需要染色的 1. 不需要染色的 2. 染不染色无所谓 </p><p>考场上首先发现一个性质,就是一定存在一种最优解没有染任何一条本来不需要的染色边。</p><p>为啥?其实也挺显然的,因为你染色跨过这条边还得染这条边一次,不如直接只染左右的联通块,这样总路径长度还能更小</p><p>但是第三种边的呢?有个子任务就是枚举它染不染。</p><p>然后链上的情况就搞了个贪心的做法,如果对于一条第三种情况的边,如果两边的联通块是需要染色的,显然选这条边是更优的.但是注意考虑多条这种边连在一起的情况.</p><p>然后树上的版本贪心似乎就GG了</p><p>然后晚上盯着毫无注释std和仅有三行的题解,画了一面的草稿纸,终于看懂了…</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>首先我们需要假如我们已经有了最优情况的一种边集,怎么求出最小操作次数,其实是边集的点集中度数为奇数的点的个数除以2。为什么?显然最优情况下,每一个奇数度数点恰好是一条操作路径的结尾，由于一条操作路径连接两个点所以除以2</p><p>然后对于一个以x为根的子树,如果已经取得了最优解,可以通过分情况考虑更新父亲,显然是具有最优子结构的.于是使用树形DP</p><p>定义$f[x][0/1]$表示在以x为根的子树中,不染色/染色x与其父亲相连的最优代价</p><p>(注意代价是一个二元组$cost(x,y)$代表奇数点个数和染色路径总长度,这里比较代价大小根据题意,就不赘述了)</p><p>为了分情况转移我们需要求出两个值,$npt$是x在x为根的子树中假如x不是任意一条染色路径的端点的最优代价；$pt$是x在x为根的子树中假如x是某一条染色路径的端点时的最优代价（注意这里的路径端点都是从子树引出来的路径）</p><p>怎么求出$npt$和$pt$呢?我们可以将所有$x$的儿子$v$回溯到$x$的过程中逐个统计,接下来比较神奇可以借助图像理解</p><p>$npt=min(npt+f[v][0],pt+f[v][1])$</p><p>解释: 画图,若$v$到其父亲$x$边没有染色,说明原来如果x不是路径端点的话现在还不会是端点;类似的,若$v$到父亲$x$的边染色了,并且$x$此时是一条路径的端点,那么这时候我们可以把路径延长到$v$的子树中,这样是解更优并且$x$这样就不会是路径端点了</p><p>$pt = min(npt+f[v][1],pt+f[v][0])$</p><p>解释:与上面类似就太懒不想打了,有问题可以luogu或QQ联系我</p><p>在考虑DP中$f$数组的转移</p><p>再强调一下定义:定义$f[x][0/1]$表示在以x为根的子树中,不染色/染色x与其父亲相连的最优代价</p><p>设$x$与其父亲相连的边的属性为$p$</p><p>首先根据在”闲扯”中的性质以及题意,若$p=1,f[now][1]=(inf,inf)$;若$p=0,f[now][0]=(inf,inf)$</p><p>然后现在先考虑$f[now][0]$,$f[now][0]=min(npt,cost(pt.x+1,pt.y))$  , 这里的$cost$可以理解为$make$_$pair$</p><p>解释:如果$x$不是染色路径的端点,而且x到父亲的边也不染色,那么显然代价不变.但是如果$x$是某一条路径的端点,那么这时候我们需要加上$x$这个点的贡献(它是个端点那肯定是奇数度数)</p><p>再考虑$f[now][1],f[now][1]=min(cost(npt.x+1,npt+1),cost(pt.x,pt.y+1))$</p><p>解释:如果$x$不是路径端点,那么$x$如果和父亲相连的边染色的需要新开一条路径,所以见上；如果$x$是路径端点,那么我们可以把这条路径引上去,x点的贡献就不用计算,只需要让路径长度加1就好了</p><p>然后就没了,代码很短但很难想</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to,w;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].w=x;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dat</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    Dat()&#123;x=y=inf;&#125;<br>    Dat(<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y)&#123;x=_x,y=_y;&#125;<br>    Dat <span class="hljs-keyword">operator</span> +(<span class="hljs-keyword">const</span> Dat &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> Dat(x+b.x,y+b.y);<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Dat &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x==b.x?y&lt;b.y:x&lt;b.x;<br>    &#125;<br>&#125;f[maxn][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    Dat npt=Dat(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),pt=Dat(inf,inf);<span class="hljs-comment">//npt--不是路径端点  pt是路径端点</span><br>    Dat pa=Dat(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),pb=Dat(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        dfs(v,now,edge[i].w);<br>        pa=min(npt+f[v][<span class="hljs-number">0</span>],pt+f[v][<span class="hljs-number">1</span>]);<br>        pb=min(npt+f[v][<span class="hljs-number">1</span>],pt+f[v][<span class="hljs-number">0</span>]);<br>        npt=pa,pt=pb;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)f[now][<span class="hljs-number">0</span>]=Dat(inf,inf);<span class="hljs-comment">//必须要翻转</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        f[now][<span class="hljs-number">0</span>]=min(npt,Dat(pt.x+<span class="hljs-number">1</span>,pt.y));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">0</span>)f[now][<span class="hljs-number">1</span>]=Dat(inf,inf);<span class="hljs-comment">//性质--翻转1边一定更不优</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        f[now][<span class="hljs-number">1</span>]=min(Dat(npt.x+<span class="hljs-number">1</span>,npt.y+<span class="hljs-number">1</span>),Dat(pt.x,pt.y+<span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,c,d;<br>    freopen(<span class="hljs-string">"w.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">"w.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        read(x),read(y),read(c),read(d);<br>        <span class="hljs-keyword">if</span>(d==<span class="hljs-number">2</span>)&#123;<br>            add_edge(x,y,<span class="hljs-number">2</span>),add_edge(y,x,<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            d=c^d;<br>            add_edge(x,y,d),add_edge(y,x,d);<br>        &#125;<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    Dat ans=min(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,ans.x/<span class="hljs-number">2</span>,ans.y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF992ENastyaAndKing-Shamans题解--神奇复杂度+线段树</title>
      <link href="/2018/10/02/CF992ENastyaAndKing-Shamans%E9%A2%98%E8%A7%A3-%E7%A5%9E%E5%A5%87%E5%A4%8D%E6%9D%82%E5%BA%A6-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2018/10/02/CF992ENastyaAndKing-Shamans%E9%A2%98%E8%A7%A3-%E7%A5%9E%E5%A5%87%E5%A4%8D%E6%9D%82%E5%BA%A6-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="CF992ENastyaAndKing-Shamans题解—神奇线段树"><a href="#CF992ENastyaAndKing-Shamans题解—神奇线段树" class="headerlink" title="CF992ENastyaAndKing-Shamans题解—神奇线段树"></a>CF992ENastyaAndKing-Shamans题解—神奇线段树</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/CodeForces-992E" target="_blank" rel="noopener">https://cn.vjudge.net/problem/CodeForces-992E</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先我们从$p=1$开始找比大于等于$[1,p]$这个前缀的元素下标$x$,同时判断$a[x]$是否合法,若不合法$p=x$继续找.但是有个性质就是$sum(1,x)&gt;= 2 * sum(1,p) $.非常显然因为$a[x]&gt;=sum(1,p)$</p><p>所以每次我们下一个要找的前缀都大于等于上一次的两倍,只用查找$ \log$ $max_w$次,同时线段树维护单点修改元素,区间查询前缀,时间复杂度$O(N log N$ $logMaxw)$</p><p>注意开long long ,查了好久的错</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,q;ll a[maxn];<br>ll sum[maxn&lt;&lt;<span class="hljs-number">2</span>],mx[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        sum[now]=mx[now]=a[l];<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    mx[now]=max(mx[now&lt;&lt;<span class="hljs-number">1</span>],mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> t;ll dta;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        a[l]=dta;<br>        mx[now]=sum[now]=dta;<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">else</span> update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    mx[now]=max(mx[now&lt;&lt;<span class="hljs-number">1</span>],mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> L,R;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        ans+=sum[now];<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)query_sum(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)query_sum(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query_exi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-comment">//printf("%d\n",mx[now]);</span><br>    <span class="hljs-keyword">if</span>(mx[now]&lt;dta)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>    <span class="hljs-comment">//printf("%d\n",l);</span><br>        ans=l;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//printf("%d %d\n",mx[now&lt;&lt;1],l);</span><br>    <span class="hljs-keyword">if</span>(L&lt;=mid&amp;&amp;mx[now&lt;&lt;<span class="hljs-number">1</span>]&gt;=dta)query_exi(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(ans!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span>(mid&lt;R&amp;&amp;mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]&gt;=dta)query_exi(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n),read(q);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(a[i]);<br>    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        read(t),read(dta);<br>        update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        <span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1"</span>);<br>&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            ans=<span class="hljs-number">0</span>;<br>            L=<span class="hljs-number">1</span>,R=p;<br>            query_sum(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<span class="hljs-comment">//puts("ss");</span><br>            dta=ans,ans=<span class="hljs-number">-1</span>;<span class="hljs-comment">//printf("%d %d %d\n",p,ans,dta);</span><br>            L=p+<span class="hljs-number">1</span>,R=n;<br>            query_exi(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>            <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ans==p+<span class="hljs-number">1</span>)&#123;<br>            p=ans;ans=<span class="hljs-number">0</span>;<br>&#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>L=p+<span class="hljs-number">1</span>,R=ans<span class="hljs-number">-1</span>;<br>p=ans,ans=<span class="hljs-number">0</span>;query_sum(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>&#125;<br>            <span class="hljs-keyword">if</span>(a[p]==dta+ans)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,p);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p==n)&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1016ERestInShades题解--二分+几何</title>
      <link href="/2018/10/02/CF1016ERestInShades%E9%A2%98%E8%A7%A3-%E4%BA%8C%E5%88%86-%E5%87%A0%E4%BD%95/"/>
      <url>/2018/10/02/CF1016ERestInShades%E9%A2%98%E8%A7%A3-%E4%BA%8C%E5%88%86-%E5%87%A0%E4%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="CF1016ERest-In-Shades题解—二分-几何"><a href="#CF1016ERest-In-Shades题解—二分-几何" class="headerlink" title="CF1016ERest In Shades题解—二分+几何"></a>CF1016ERest In Shades题解—二分+几何</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/CodeForces-1016E" target="_blank" rel="noopener">https://cn.vjudge.net/problem/CodeForces-1016E</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们将固定的点视作光源,实际上就是求点与轨迹端点连线之间在$x$轴上不被遮盖的长度,然后运用相似转化即可</p><p>维护每个线段之前有多少长度没被遮盖的前缀和,二分得到端点所在或最近的线段就好了</p><p>注意二分别写挂以及特判,还要处理两端多出来的部分</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll lon long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=x*<span class="hljs-number">10</span>+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-11</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br>    <span class="hljs-keyword">double</span> l,r;<br>&#125;seg[maxn];<br><span class="hljs-keyword">double</span> sum[maxn];<br><span class="hljs-keyword">double</span> sy,a,b;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf %lf %lf\n"</span>,&amp;sy,&amp;a,&amp;b);<br>    sy=-sy;<br>    read(n);<br>    sum[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(seg[i].l),read(seg[i].r);<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+(seg[i].r-seg[i].l);<br>    &#125;<br>    sum[n+<span class="hljs-number">1</span>]=sum[n];<br>    seg[<span class="hljs-number">0</span>].l=seg[<span class="hljs-number">0</span>].r=<span class="hljs-number">-1926081793.0</span>;<br>    seg[n+<span class="hljs-number">1</span>].l=seg[n+<span class="hljs-number">1</span>].r=<span class="hljs-number">1926081793.0</span>;<br>    read(q);<br>    <span class="hljs-keyword">double</span> x,y,xx,yy;<br>    <span class="hljs-keyword">int</span> L=<span class="hljs-number">0</span>,R=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> px,py;<span class="hljs-keyword">double</span> ans;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        read(x),read(y);<br>        xx=x-(x-a)*y/(y+sy),yy=x+(b-x)*y/(y+sy);<br>        L=<span class="hljs-number">0</span>,R=n+<span class="hljs-number">1</span>,px=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(yy&lt;seg[<span class="hljs-number">0</span>].l||xx&gt;seg[n].r)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"0.0000000000"</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>        <span class="hljs-keyword">if</span>(eps&lt;seg[<span class="hljs-number">0</span>].l-xx)px=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">while</span>(L&lt;=R)&#123;<br>            <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(eps&lt;xx-seg[mid].l)L=mid+<span class="hljs-number">1</span>,px=mid;<br>            <span class="hljs-keyword">else</span> R=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        L=<span class="hljs-number">0</span>,R=n+<span class="hljs-number">1</span>,py=n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(yy-seg[n].r&gt;eps)py=n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">while</span>(L&lt;=R)&#123;<br>            <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(seg[mid].r-yy&gt;eps)R=mid<span class="hljs-number">-1</span>,py=mid;<br>            <span class="hljs-keyword">else</span> L=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        ans=sum[py<span class="hljs-number">-1</span>]-sum[px]+max(<span class="hljs-number">1.0</span>*<span class="hljs-number">0</span>,seg[px].r-xx)+max(<span class="hljs-number">1.0</span>*<span class="hljs-number">0</span>,yy-seg[py].l);<br>        ans=ans*(y+sy)/y;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.10lf\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3747Kinoman题解--线段树</title>
      <link href="/2018/09/28/BZOJ3747Kinoman%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2018/09/28/BZOJ3747Kinoman%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3747" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3747</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>不敢相信这居然是线段树题…还是太菜了</p><p>我们钦定第$i$天的电影一定去看(也就是说区间右端点为$i$).那么对于第$i$天放映的电影记录其上一次放该电影的日期为第$lst[i]$天,那么显然这天放映的电影一个做出贡献的区间为$[lst[i]+1,i]$，当然第$i$天放映的那部电影对$[lst[lst[i]]+1,lst[i]]$的贡献就得减去</p><p>于是乎如果我们这时候查询$[1,i]$这个区间的最大值,就可以获得区间右端点为$i$的最大收益.所以我们对于每个$i$都试一遍就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> L,R;ll dta;<br>ll mx[maxn&lt;&lt;<span class="hljs-number">2</span>],tag[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(tag[now])&#123;<br>        mx[now&lt;&lt;<span class="hljs-number">1</span>]+=tag[now],mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tag[now];<br>        tag[now&lt;&lt;<span class="hljs-number">1</span>]+=tag[now],tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tag[now];<br>        tag[now]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        mx[now]+=dta,tag[now]+=dta;<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    pushdown(now);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    mx[now]=max(mx[now&lt;&lt;<span class="hljs-number">1</span>],mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;ans=max(ans,mx[now]);<span class="hljs-keyword">return</span> ;&#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;pushdown(now);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> f[maxn],w[maxn],lst[maxn],pos[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(f[i]);lst[i]=pos[f[i]],pos[f[i]]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)read(w[i]);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(lst[i])&#123;<br>            L=lst[lst[i]]+<span class="hljs-number">1</span>,R=lst[i],dta=-w[f[i]];<br>            update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        &#125;<br>        L=lst[i]+<span class="hljs-number">1</span>,R=i,dta=w[f[i]];<br>        update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        L=<span class="hljs-number">1</span>,R=i;<br>        query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF894CMacroAndGCDSequence题解--思维+暴力</title>
      <link href="/2018/09/27/CF894CMacroAndGCDSequence%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4-%E6%9A%B4%E5%8A%9B/"/>
      <url>/2018/09/27/CF894CMacroAndGCDSequence%E9%A2%98%E8%A7%A3-%E6%80%9D%E7%BB%B4-%E6%9A%B4%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF894C" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF894C</a></p><p>Chinese Round.英文题面略微暴力,特意发了一发翻译<del>变得更加暴力</del></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一道思维构造题,很容易发现集合中最小的元素$x$一定要满足$x|a[i]$，$a[i]$是集合中其他的元素</p><p>为啥?</p><p>因为$gcd(a_1,a_2…a_m)$显然是那个最小的元素,那么显然上述性质成立</p><p>于是判无解就很好判了</p><p>但怎么构造一组解呢?</p><p>到这里我思维就随题面一起江化了…</p><p>官方题解比较妙就是在集合的每一个元素之前都插入那个最小的元素然后输出</p><p>这样的话对于任意$GCD(a_i..a_j)$,要么是$i==j$时其本身,这样就与集合中对应的那个元素相同,要么就是那个最小的元素</p><p>思维真的江化了…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-keyword">int</span> s[maxn];<br><span class="hljs-keyword">int</span> n,mi,x;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b?gcd(b,a%b):a;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n);<br>    mi=inf;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(s[i]);<br>        mi=min(s[i],mi);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)x=s[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;s[i])x=gcd(x,s[i]);<br>        <span class="hljs-keyword">else</span> x=gcd(s[i],x);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x!=mi)&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,n*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d "</span>,s[i],x);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 蛤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu3959NOIp2017宝藏题解--状压DP</title>
      <link href="/2018/09/27/luogu3959NOIp2017%E5%AE%9D%E8%97%8F%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/"/>
      <url>/2018/09/27/luogu3959NOIp2017%E5%AE%9D%E8%97%8F%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3959" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3959</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先最后得到的一定是一颗生成树,从树高为h的节点x向深处扩展y的代价为(h+1) * dis(x,y)</p><p>我们以树高作为阶段,枚举已经扩展哪些节点的二进制状态x,又向深处扩展哪些节点的二进制状态y，设$f[dep][sta]$为已经挖到第dep层,当前已经挖了的宝藏用二进制表示下的状态为sta时的最小代价。状态转移方程为</p><p>$f[dep+1][x|y] = min(f[dep+1][x|y] , f[dep][x] + (dep+1) * cost(x,y))$,$y$满足$y$是$x$补集的子集</p><p>$cost(x,y)$是集合$x$扩展到集合$y$的最小距离,可以先通过计算点到集合的距离,再计算集合到集合的距离</p><p>这时候就有一个不怎么naive的问题,这个$x$到$y$的距离不一定就是$x$中最优情况下最深那一层,也就是dep层上的节点,而是可能是由其他层数上的节点连过来的,这样不又是不合法的转移吗?</p><p>这时候JYH大佬又跳了出来,说道:当前你这么不合法的枚举肯定比合法枚举不知道低到哪里去了(因为 * (dep+1)).而且层数是递增枚举的,枚举每一层时所有状态又会被枚举一遍,所以说你这个不是由最深层上的点扩展的状态一定在之前被枚举过,所以这么做是资瓷的</p><p>菜鸡RyeCatcher于是又开始%起了JYH这个OI又强还有妹子的巨佬</p><p>JYH巨佬很高兴又教了他几招:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(ri s=sta;s;s=(s<span class="hljs-number">-1</span>)&amp;sta) <span class="hljs-comment">//枚举sta子集</span><br><br>s= sta^U <span class="hljs-comment">//获得sta补集</span><br></code></pre></td></tr></table></figure><p>还教会他时间复杂度:</p><p>我们枚举了所有状态的补集的子集,相当于枚举了所有自己的子集</p><p>空集的子集只有一个 $C^0_N $</p><p>一个元素的子集有$C^1_N$个,这个又有$2^1$个子集</p><p>两个元素的子集有$C^2_N$个,这个又有$2^2$个子集</p><p>…</p><p>所有子集的子集个数就有$C^0_N \times 1 + C^1_N \times 2^1 + C^2_N \times 2^2 + … + C^N_N \times 2^N$</p><p>二项式定理可知这不就是$(2+1)^N$,加上钦定根节点和枚举层数,时间复杂度$O(3^N N^2)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">12</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e17</span>+<span class="hljs-number">19260817</span>;<br>ll f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">12</span>][<span class="hljs-number">13</span>];<br>ll ss_dis[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">12</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">12</span>],ps_dis[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">12</span>][<span class="hljs-number">13</span>],g[<span class="hljs-number">13</span>][<span class="hljs-number">13</span>];<span class="hljs-comment">//ps_dis 点到状态距离 ss_dis状态到状态最小距离</span><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> U,C;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;ll z;<br>    ll ans=inf;<br>    read(n),read(m);<br>    U=<span class="hljs-number">1</span>&lt;&lt;n;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;U;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;U;j++)ss_dis[i][j]=inf;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++)ps_dis[i][j]=f[i][j]=inf;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++)<span class="hljs-keyword">if</span>(i!=j)g[i][j]=inf;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        read(x),read(y),read(z);<br>        x--,y--; <span class="hljs-comment">//注意要-1</span><br>        g[x][y]=g[y][x]=min(g[x][y],z);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<span class="hljs-comment">//枚举起点</span><br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;U;j++)&#123;<span class="hljs-comment">//枚举状态</span><br>            <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<span class="hljs-comment">//枚举状态中的点</span><br>                <span class="hljs-keyword">if</span>(j&amp;(<span class="hljs-number">1</span>&lt;&lt;k))&#123;<br>                    ps_dis[j][i]=min(ps_dis[j][i],g[i][k]);                  <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;U;i++)&#123;<br>        C=i^(U<span class="hljs-number">-1</span>);<span class="hljs-comment">//补集 注意是U-1</span><br>        <span class="hljs-keyword">for</span>(ri j=C;j;j=(j<span class="hljs-number">-1</span>)&amp;C)&#123;<span class="hljs-comment">//补集的子集</span><br>            z=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>                <span class="hljs-keyword">if</span>(j&amp;(<span class="hljs-number">1</span>&lt;&lt;k))&#123;<br>                  <span class="hljs-keyword">if</span>(dis[i][k]==inf)z=inf;<br>                    <span class="hljs-keyword">else</span> z+=ps_dis[i][k];<br>                &#125;<br>            &#125;<br>            ss_dis[j][i]= (z&gt;=inf)? inf:z;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri r=<span class="hljs-number">0</span>;r&lt;n;r++)&#123;<span class="hljs-comment">//起点</span><br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;U;i++)&#123;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++)f[i][j]=inf;<br>        &#125;<br>        f[<span class="hljs-number">1</span>&lt;&lt;r][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri d=<span class="hljs-number">0</span>;d&lt;n;d++)&#123;<span class="hljs-comment">//树高或者层数</span><br>            <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;U;i++)&#123;<span class="hljs-comment">//子集</span><br>                C=i^(U<span class="hljs-number">-1</span>); <span class="hljs-comment">//注意是U-1</span><br>                <span class="hljs-keyword">if</span>(f[i][d]==inf)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(ri j=C;j;j=(j<span class="hljs-number">-1</span>)&amp;C)&#123;<br>                    <span class="hljs-keyword">if</span>(f[i][d]==inf)<span class="hljs-keyword">continue</span>;<br>                    f[i|j][d+<span class="hljs-number">1</span>]=min(f[i|j][d+<span class="hljs-number">1</span>],f[i][d]+<span class="hljs-number">1l</span>l*(d+<span class="hljs-number">1</span>)*ss_dis[j][i]);<span class="hljs-comment">//注意由j到i</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(ri d=<span class="hljs-number">0</span>;d&lt;n;d++)ans=min(ans,f[U<span class="hljs-number">-1</span>][d]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ2411Mondriaan&#39;sDream题解--状压DP</title>
      <link href="/2018/09/27/POJ2411Mondriaan-sDream%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/"/>
      <url>/2018/09/27/POJ2411Mondriaan-sDream%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/POJ-2411#author=goodlife2017" target="_blank" rel="noopener">https://cn.vjudge.net/problem/POJ-2411#author=goodlife2017</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>处理方法和玉米田类似,每行作为阶段,通过枚举相邻两行状态更新.</p><p>在这里怎么处理1 * 2的矩形呢?我们用1表示一个竖着的矩形的上部分,0表示其他情况,那么对于第$i$列状态x和第$i-1$列状态$y$,需满足以下条件才能转移:</p><ol><li>x&amp;y ==0 显然</li><li>x|y相邻的一段0必须有偶数个,不怎么显然。可以画一下图,或者将它们理解为横着的矩形</li></ol><p>预处理以下直接搞就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">13</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br>ll f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">11</span>][maxn];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">bool</span> ok[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">11</span>];<br>ll ans[<span class="hljs-number">13</span>][<span class="hljs-number">13</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,cnt,orz_jyh;<br>    <span class="hljs-keyword">int</span> sz;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;(n|m))&#123;<br>    <span class="hljs-keyword">if</span>((n&amp;<span class="hljs-number">1</span>)&amp;&amp;(m&amp;<span class="hljs-number">1</span>))&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<span class="hljs-keyword">continue</span>;&#125;<br>    <span class="hljs-keyword">if</span>(ans[n][m])&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans[n][m]);<span class="hljs-keyword">continue</span>;&#125;<br>        sz=<span class="hljs-number">1</span>&lt;&lt;m;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)&#123;<span class="hljs-comment">//连续有奇数个0的状态为0</span><br>        cnt=orz_jyh=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>                <span class="hljs-keyword">if</span>((i&gt;&gt;j)&amp;<span class="hljs-number">1</span>)orz_jyh|=cnt,cnt=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">else</span> cnt^=<span class="hljs-number">1</span>; <br>            &#125;<br>            ok[i] = cnt|orz_jyh?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>; <span class="hljs-comment">//最后一位不会更新orz_jyh</span><br>        &#125;<br>        <span class="hljs-comment">//memset(f,0,sizeof(f));</span><br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<span class="hljs-comment">//行数</span><br>            <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)&#123;<br>                f[i][k]=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;sz;j++)&#123;<br>                    <span class="hljs-keyword">if</span>((!(i&amp;j))&amp;&amp;ok[i|j])f[i][k]+=f[j][k<span class="hljs-number">-1</span>];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[<span class="hljs-number">0</span>][n]);<br>    ans[n][m]=f[<span class="hljs-number">0</span>][n];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2622关灯问题题解--状压DP</title>
      <link href="/2018/09/27/luogu2622%E5%85%B3%E7%81%AF%E9%97%AE%E9%A2%98%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/"/>
      <url>/2018/09/27/luogu2622%E5%85%B3%E7%81%AF%E9%97%AE%E9%A2%98%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2622" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2622</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题有点不一样,每个开关可以重复使用那么用每个开关作为阶段似乎不太好,那么我们按照题意设$f[sta]$为达到$sta$这个状态最少操作次数,我们枚举到达下一个状态用了哪个开关,假设用了某个开关后的状态为$x$,显然$f[x]=min(f[x],f[sta]+1)$</p><p>于是我们倒着枚举状态作为阶段就好了</p><p>但是我忽然发现这好像并不能保证无后效性……</p><p>所以请不要相信以上内容,还是写状态压缩的最短路去吧  逃)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> op[<span class="hljs-number">103</span>][<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,sz,sta;<br>    read(n),read(m);<span class="hljs-comment">//n 灯 m 开关</span><br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            read(op[i][j]);<br>        &#125;<br>    &#125;<br>    sz=<span class="hljs-number">1</span>&lt;&lt;n;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    f[sz<span class="hljs-number">-1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri k=sz<span class="hljs-number">-1</span>;k&gt;=<span class="hljs-number">0</span>;k--)&#123;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            sta=k;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(op[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>&amp;&amp;(k&amp;(<span class="hljs-number">1</span>&lt;&lt;j)))sta=sta^(<span class="hljs-number">1</span>&lt;&lt;j);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">-1</span>&amp;&amp;(!(k&amp;(<span class="hljs-number">1</span>&lt;&lt;j))))sta=sta|(<span class="hljs-number">1</span>&lt;&lt;j);<br>            &#125;<br>            f[sta]=min(f[sta],f[k]+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f[<span class="hljs-number">0</span>]==f[sz])<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1896互不侵犯题解--状压DP</title>
      <link href="/2018/09/27/luogu1896%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/"/>
      <url>/2018/09/27/luogu1896%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1896" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1896</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>做过玉米田的应该不难设计出状态转移与预处理</p><p>$f[sta][i][j]$表示第$i$行状态为$sta$,总共已经放了$j$个的方案数</p><p>$f[sta][i][j] = \sum f[p][i-1][j-num[sta]]$</p><p>$num[sta]$是$sta$二进制表示下$1$的个数,当然要保证$p,sta$都是合法的并且$p$与$sta$能够相邻</p><p>所以我们要预处理处每个状态本身是否合法,若状态$x$合法,我们再预处理出状态$x$中二进制下每个$1$左右都变成$1$的状态称其为$sta[x]$，实际上这两个是能同时预处理出来的</p><p>显然若$i$行状态为$x$,我们使用刷表法的话,第$i-1$的状态$y$必须满足$y$&amp;$sta[x]==0$并且$num[x]&lt;k,num[x]+num[y]&lt;k$的前提</p><p>棋子最多$n^2$个，数组别开小了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">19260817</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br>ll f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>][<span class="hljs-number">11</span>][<span class="hljs-number">85</span>];<span class="hljs-comment">//state - row - cnt</span><br><span class="hljs-comment">//放了几个棋子的数组别开小了</span><br><span class="hljs-keyword">int</span> n,k,sz;<br><span class="hljs-keyword">bool</span> ok[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> sta[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>],num[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,p,cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> flag;<br>    read(n),read(k);<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"1"</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"1"</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"orz"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    sz=<span class="hljs-number">1</span>&lt;&lt;n;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)&#123;<span class="hljs-comment">//预处理</span><br>        p=i,cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;j))&#123;<br>                cnt++;<br>                <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//第一列和第N列的需单独考虑</span><br>                    <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>)))&#123;<br>                        ok[i]=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    p=p|(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>));<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==n<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>)))&#123;<br>                        ok[i]=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    p=p|(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>));      <br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>)))&#123;<br>                        ok[i]=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>)))&#123;<br>                        ok[i]=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    p=p|(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>));<br>                    p=p|(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ok[i])<span class="hljs-keyword">continue</span>;<br>        sta[i]=p;<span class="hljs-comment">//1向左右扩展后的状态</span><br>        num[i]=cnt;<span class="hljs-comment">//二进制下一的个数</span><br>    &#125;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri r=<span class="hljs-number">1</span>;r&lt;=n;r++)&#123;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)&#123;<br>            <span class="hljs-keyword">if</span>(ok[i])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(num[i]&gt;k)<span class="hljs-keyword">continue</span>;<br>            x=sta[i];<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;sz;j++)&#123;<br>                <span class="hljs-keyword">if</span>(ok[j])<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(x&amp;j)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(num[i]+num[j]&gt;k)<span class="hljs-keyword">continue</span>;              <br>                <span class="hljs-keyword">for</span>(ri o=num[j]+num[i];o&lt;=k;o++)&#123;<br>                    f[i][r][o]+=f[j][r<span class="hljs-number">-1</span>][o-num[i]];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)ans+=f[i][n][k];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1879玉米田题解--状压DP</title>
      <link href="/2018/09/27/luogu1879%E7%8E%89%E7%B1%B3%E7%94%B0%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/"/>
      <url>/2018/09/27/luogu1879%E7%8E%89%E7%B1%B3%E7%94%B0%E9%A2%98%E8%A7%A3-%E7%8A%B6%E5%8E%8BDP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1879" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1879</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一类状压DP套路,将每一行视为一个阶段,通过状态可行性来由一行更新到另一行</p><p>那么我们先预处理出所有状态本身是否合法(即有没有相邻的两块草地)。如果第$i$行状态为$x$,第$i+1$行为$y$,那么显然x&amp;y为0时,这两行才是合法的。同时若题目给出的第$i$行田地的状态为$s$,那么$x|s==s$时这一行才是合法的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p=<span class="hljs-number">100000000</span>;<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">12</span>][<span class="hljs-number">13</span>];<br><span class="hljs-keyword">bool</span> ok[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">12</span>];<br><span class="hljs-keyword">int</span> ban[<span class="hljs-number">13</span>];<br><span class="hljs-keyword">int</span> n,m,sz;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>,ppp=<span class="hljs-number">0</span>,x,y;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            read(x);<br>            y=y*<span class="hljs-number">2</span>+x;<br>        &#125;<br>        ban[i]=y;<span class="hljs-comment">//该行状态</span><br>    &#125;<br>    ban[<span class="hljs-number">0</span>]=sz<span class="hljs-number">-1</span>;<br>    sz=<span class="hljs-number">1</span>&lt;&lt;m;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)&#123;<span class="hljs-comment">//预处理出每个状态本身是否合法</span><br>        cnt=<span class="hljs-number">0</span>,ppp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;j))cnt++; <br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">1</span>)ppp=<span class="hljs-number">1</span>;<span class="hljs-comment">//相邻的两个1</span><br>                cnt=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">1</span>)ppp=<span class="hljs-number">1</span>;<br>        ok[i]=ppp;<br>    &#125;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//f[i][j]表示j行状态为i的方案数</span><br>    <span class="hljs-comment">//printf("%d\n",ok[0]);</span><br>    <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++) <span class="hljs-keyword">if</span>(!ok[i]&amp;&amp;(i|ban[k])==ban[k])<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;sz;j++)&#123;<br>                <span class="hljs-keyword">if</span>(!(i&amp;j)&amp;&amp;!ok[j]&amp;&amp;(j|ban[k<span class="hljs-number">-1</span>])==ban[k<span class="hljs-number">-1</span>])&#123;<br>                    f[i][k]+=f[j][k<span class="hljs-number">-1</span>];<br>                    <span class="hljs-keyword">if</span>(f[i][k]&gt;p)f[i][k]%=p;<br>                &#125;<br>            &#125;<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;sz;i++)ans=(ans+f[i][n])%p;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU5418VictorAndWorld题解--最长哈密顿回路</title>
      <link href="/2018/09/27/HDU5418VictorAndWorld%E9%A2%98%E8%A7%A3-%E6%9C%80%E9%95%BF%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%9E%E8%B7%AF/"/>
      <url>/2018/09/27/HDU5418VictorAndWorld%E9%A2%98%E8%A7%A3-%E6%9C%80%E9%95%BF%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%9E%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/HDU-5418" target="_blank" rel="noopener">https://cn.vjudge.net/problem/HDU-5418</a></p><p>题意:有n个城市，在n个城市之间有m条带权双向边，若从1号城市去经过其它全部的2到n号城市并且最后回到1号城市的最短路径。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题与最长哈密顿回路不同的地方在于它没有每个点只能经过一次的限制,这样的话状态转移似乎比较麻烦而且很难保证没有后效性.</p><p>既然这样我们有没有方法将它转化成一个更好处理的模型呢.我们先用Floyd跑出两两之间的最短路,然后再跑一遍最长哈密顿路径</p><p>这时候就有个naive的问题,这个Floyd处理后的路径难道不会包含其他点吗,这样难道不会存在错误的状态转移吗?我一开始也想了好久.</p><p>这时候JYH大佬就跳了出来,解释道虽然会不合法地扩展,但是我们也会枚举到合法扩展的状态,显然合法扩展的状态比不合法扩展的状态不知道高到哪去了,于是当然资瓷Floyd处理了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">19</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> g[maxn][maxn];<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>][maxn];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(g));<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;n;i++)g[i][i]=<span class="hljs-number">0</span>;<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Floyd</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                g[i][j]=min(g[i][j],g[i][k]+g[k][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> T,sz;<br>    <span class="hljs-keyword">int</span> x,y,z,ans=<span class="hljs-number">0</span>;<br>    read(T);<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        read(n),read(m);        <br> clear();<br>        sz=<span class="hljs-number">1</span>&lt;&lt;n;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            read(x),read(y),read(z);<br>            x--,y--;<br>            g[x][y]=g[y][x]=min(g[x][y],z);<br>        &#125;<br>        Floyd();<br>        <span class="hljs-keyword">for</span>(ri p=<span class="hljs-number">1</span>;p&lt;sz;p+=<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//当前状态</span><br>            <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-keyword">if</span>((p&gt;&gt;i)&amp;<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//当前所在的点         </span><br>                <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;n;j++) <span class="hljs-keyword">if</span>((p&gt;&gt;j)&amp;<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//由哪个点转移到当前所在的点</span><br>                    f[p][i]=min(f[p][i],f[p^(<span class="hljs-number">1</span>&lt;&lt;i)][j]+g[j][i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        ans=inf;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;n;i++)ans=min(ans,f[sz<span class="hljs-number">-1</span>][i]+g[i][<span class="hljs-number">0</span>]);<span class="hljs-comment">//还要走回路</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU5124lines题解-堆+贪心的一个新方法</title>
      <link href="/2018/09/25/HDU5124lines%E9%A2%98%E8%A7%A3-%E5%A0%86-%E8%B4%AA%E5%BF%83%E6%96%B0%E7%AE%97%E6%B3%95/"/>
      <url>/2018/09/25/HDU5124lines%E9%A2%98%E8%A7%A3-%E5%A0%86-%E8%B4%AA%E5%BF%83%E6%96%B0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/HDU-5124" target="_blank" rel="noopener">https://cn.vjudge.net/problem/HDU-5124</a></p><h3 id="胡扯"><a href="#胡扯" class="headerlink" title="胡扯"></a>胡扯</h3><p>感觉说新方法好像有点不太好,但是翻了十几篇博客都是清一色离散化之类的…</p><p>为什么会做这道题呢?因为前几天做了套NOIp模拟赛,T1是<a href="https://cn.vjudge.net/problem/51Nod-1563" target="_blank" rel="noopener">坐标轴上的最大团</a>,愉快地转化成最多不相交区间问题贪心处理</p><p>但是我把大于等于号看反了，以为区间相交才连边，于是转化成了”让你找出被覆盖次数最多的点(线段)被覆盖的次数”，也就是这题</p><p>然后考场上yy出了一个堆+贪心的鬼畜做法,对拍过了,以为能AC,结果……爆0了，很angry，于是找到了这道题,用yy出来的新算法交了一发居然就A了，跑得还不错?要是手写堆的话可能更快</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我先以左端点为第一关键字,右端点为第二关键字排序,然后遍历所有区间$seg$</p><p>遍历中$pos$记录当前满足$seg[i].l&lt;=pos$所有区间的最大右端点值,如果新加入的区间左端点大于pos,pos置为$seg[i].r$,$cnt$重置为1</p><p>一个小根堆维护刚刚那些$seg[i].l&lt;=pos$所有区间的右端点值，如果当前新加入的区间左端点大于堆顶值,弹出堆顶，同时$cnt-1$，反复操作直到不满足大于或是堆为空,接着更新答案.</p><p>排序$NlogN​$,每个区间最多被弹出一次因此遍历一遍$NlogN​$,因此总时间复杂度$O(N logN)​$，本来想用Two Pointer但是好像不行</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::sort;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e17</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br>ll l,r;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Seg &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> l==b.l?r&lt;b.r:l&lt;b.l;<br>&#125;<br>&#125;seg[maxn];<br><span class="hljs-keyword">int</span> n;<br>priority_queue &lt;ll, <span class="hljs-built_in">vector</span>&lt;ll&gt; ,<span class="hljs-built_in">std</span>::greater&lt;ll&gt; &gt;q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ll x,len,l,r;<br><span class="hljs-keyword">int</span> T;<br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(l),read(r);<br>seg[i].l=l,seg[i].r=r;<br>&#125;<br>sort(seg+<span class="hljs-number">1</span>,seg+<span class="hljs-number">1</span>+n);<br>ll pos=-inf;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,lst=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(seg[i].l&gt;pos)&#123;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>pos=seg[i].r;<br>ans=max(ans,cnt);<br>cnt=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> cnt++;<br>q.push(seg[i].r);<br><span class="hljs-keyword">if</span>(seg[i].r&gt;pos)pos=seg[i].r;<br><span class="hljs-keyword">if</span>(q.size())lst=q.top();<br><span class="hljs-keyword">while</span>(seg[i].l&gt;lst&amp;&amp;q.size())&#123;<br>q.pop();cnt--;<br><span class="hljs-keyword">if</span>(!q.empty())lst=q.top();<br>&#125;<br>ans=max(ans,cnt);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>考试看错你会做的题的感觉真….难受</p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苟活者的日记</title>
      <link href="/2018/09/23/%E8%8B%9F%E6%B4%BB%E8%80%85%E7%9A%84%E6%97%A5%E8%AE%B0/"/>
      <url>/2018/09/23/%E8%8B%9F%E6%B4%BB%E8%80%85%E7%9A%84%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter the password" />    <label for="pass">Enter the password</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Hexo扩展及插件</title>
      <link href="/2018/09/22/%E4%B8%80%E4%BA%9BHexo%E6%89%A9%E5%B1%95%E5%8F%8A%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/09/22/%E4%B8%80%E4%BA%9BHexo%E6%89%A9%E5%B1%95%E5%8F%8A%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Welcome,password is "test" (without quote)" />    <label for="pass">Welcome,password is "test" (without quote)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/Nbam+ZFtM6+c9Yv8dfAamlORGCXO3fj1L8zut56yfpSu5Yq5TQoLObV0oag1tezlgp0j4S431VP200aN69Wix1uNX2jgmsHkQBSL5FfRWgCaxqMnaZzmLMG1X6t8XSgahsQSTKE2d+ksIRFfZ0sx37DJkV3MEsSJFgJGttcpuUGOyIWtRKacsDiYyl/O0UCcybfymQXRb182bQBIv4G7OtamyuQLq5Wkrpt1kRPnzbKtsMgmOl0O+rLuSbZDBXMLjJ8HeA6th6OwR/r6JsYJA1yXyPjxeGjNatGW+xbyT4tOQikE+chYr7hBYb02gRYd/5+7LkfA8AhciPTsz5IIRJFV0VDwVQau57Mw3F14kwlFoHCzs2UNcOUlx5czpwjCYRgffQWyeaMoPe6irfXFHmhF79ICYTd+XSwrdBE2pw/UZct0BkomS6RxlTkYB7L0E9alSGN4XvscZcaaJ3kd67K1+t3VgvH4kwqtZ/A97GGQ+FI6KEPaKOQkOpTv15L4tKPqB49JjZ19ejNG5SUovmn/Vzms/OtsqTBRR/RUtEAUNXDjboXOkIajdvMqnfvqd9JdwXTNWYM4Zghwqbvwkj3djwOpbCHhh1fktqiaHL9qyvE2KOtn5svjYO4KRydOEdg3noX6iwSUPocfilzS8yWgPp7WhJi5plBOCBXWJO1chu3qi7G9yQiyrR0zUThVDxpgMxM+Ve48swR4LK5HGEO0MyGsej0hGIG+u5fxyMusUoJEZbXMt3CHdcpwUTJkKS4KtdKXOZDshhg2mvnEGQfVBTPTHDQeygrVNmycw6IwqFCjlT7OO5UvonO/VgV81POAFagA+bcBOSdOoE45Z86w6KoEi0RGn/W5fiieV+rusldkyEs2ErA4cSYxUCnPzn8F+iUTMwUKunnd4mmZuxnhRQqN5BtUlU+KicHypcR+Cz7IysIUcIJsYvlG+eSVlnSxSsng6C3z7YJPcmBSvkdBDyt0MDKm9R+9v0PjjHky9R1vMKjHkyTJ4eiHguuoUDEYH+WyuOGCpMKiRE1v6zQMbDSEui4Dob+Tvp+C/aACVM6yhsQNtC/qi1Wncrd/ixSoZjdeRQv4Mo9RYC6/ROao8uohCuzJ0fdDUTK5sohnAuVFF3Dn3AcTDcxCRGiwenBBZenVTCRtkG2QOvjmFXVxkVTUwU0EYL/i9hSM1My6gOLUFGG9mPGYRO9oBC99r7sn0HNiwUh4rQQemuexQvdib8cHa4NUmBZNa2j+kj9idRGhmbzBBUx7vZPxVhmL8BCJvR/FtROpE0grvFyv5gDiTzZCfp4/oR8HosWs0f8K8h68wNOBJAWl/+RgXu5fXyjWcOSopt7CyS6K2Z2+l3oLCOrPTIEs6TTbTVPP3kxxKjrPVjoXQ0HoH8/92DGc26eFCdJTV9KfOOJX4x5rwaqsa1ISJLuAzqLlXTmRPVrnwJQCJ3b4Ylvp9wGbgq7yzMR6/Lbf4rTDbgezxP2Ko2o987985i1Cd1BGp/7pEbpsvX9nRcV1WRIPGxGqjZhhjmzfuAzXjA9MONUH4bUzhKtktp5JBF/5HCm0ihLh1aQW2iD7//Uehw8BLoenv7q/v89kKPIptLtD7/pVFKB+s8c/iXpQBQvUEmSQZQ+wHjScMkMCMId6T2BC+/Fj/Yw/4+LuY3HDc+kux/nBKFkVGhylMmV7ZkSuU0vxqwhf7mP/3AwACCwF9vdkjBF17mHE4SEoYnSHfh7a7pImKUUFdTQF0gf2F4W8m/ODQ6tb79kfcZYtPtzrl0ZcAZvpihnLeEAijQcmS6no6MoT3MLGiSpC3gFQg32O3WrefAk90U2NEpNbmKAsjqa/btpyqxzw5j5Injy+ipv721UwKVPYEnysH233jra0+tZ2US2jxV9mbRbRQDOObD9xR5lvjomr81ju0L+1IgEoVmxcPOquU40ODGHHYjSX0KEpS+YCiDEgj+BALRhnbnKVugtI098c4TNycSWVHT72sYJQQGyDcoFAnwR01RBXl+SKZfyN1kXvoZd3qTo3TWNDywUeYc37+ZL+f5mpc0QAl09DnCQ2IFTVO6id5+syXn9KQr+vYtJErcAHKHF62ZufIClYHo7y9Ulbb42gyrpPHag4D95ydt4cTlHZ/3r/hQpoOadLWU1BRjgskV9dfymyqtrcDOubZgvCiSddYbKMv9au8aDr7kRve9IlbwlWp78RRilmFqKUVk/3ehyqdmFM8CVibqkTK/Su/o80lgYLY5n1tvJNlx8qvhTtndvFOFqk8TTtDIY+zEHOUW4DGjuTcG1XIbd8Ovbe7517d694nDXvIXLT/zbr5PB2SFDyo9BzBS9+fCH85AaJpOwu+0oLh7Q4HFP2XhoBx6bFuMFXHalZa8qZ5XeR7heWbQGmo5Qm1oGTFF5xek3MMsj/B4BaVmkNRZzKv68vqs8jCLaf3+v1P8HrLGGXZdJGZ6mE=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Hexo教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo折腾记--小白修改新主题</title>
      <link href="/2018/09/20/Hexo%E6%8A%98%E8%85%BE%E8%AE%B0-%E4%BF%AE%E6%94%B9%E6%96%B0%E4%B8%BB%E9%A2%98/"/>
      <url>/2018/09/20/Hexo%E6%8A%98%E8%85%BE%E8%AE%B0-%E4%BF%AE%E6%94%B9%E6%96%B0%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果您曾经来过我的博客,就会发现我抛弃了Next主题换了个更简洁的主题,这个主题叫BlueLake,基于Hexo-Maupassant主题定制,您如果感兴趣可以到这里了解详情:<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">https://github.com/chaooo/hexo-theme-BlueLake</a> </p><p>但是为了让这个主题适应一个OIer的作风,我0前端经验只能靠F12(也就是审查元素)和网上博客与问答以及丰富的瞎搞经验魔改了一些配置,在此做一些记录,可能有些幼稚请谅解,以便对这个主题同样感兴趣但不知道从何下手的OIer或其他人能改出自己想要的效果.</p><p>开启本地搜索(个人认为这个json本地搜索非常好用)等github文档里已经有的操作就不再赘述了，这里假设您已经有了Hexo搭建博客经验,以及更改基本配置的姿势水平,如果您没有,建议您可以先按照网上一大堆Next入门教程搭建一个Next主题的博客</p><p>然而一开始不小心npm了一些奇奇怪怪的插件(可能是jade版本不兼容)导致博客崩了,于是重装了一遍,续了不少时间,因此建议除非你足够大佬知道自己在做什么,魔改博客前务必保留备份</p><p>目前Github上我的Branch 暂无pull new request(感觉pq了还是会被拒),换掉原来的文件之后就是我博客中的这种效果</p><p><a href="https://github.com/Rye-Catcher/hexo-theme-BlueLake/tree/Rye-Catcher-ForOI" target="_blank" rel="noopener">https://github.com/Rye-Catcher/hexo-theme-BlueLake/tree/Rye-Catcher-ForOI</a></p><h3 id="配置Mathjax"><a href="#配置Mathjax" class="headerlink" title="配置Mathjax"></a>配置Mathjax</h3><p>这个主题有个比较鬼畜的地方就是它本身是在layout/_partial中是有Mathjax文件的,但是并没有在配置中加载相关配置,于是我与Maupassant对比文件,同时感谢一位大佬的博客:<a href="http://wudaijun.com/2017/12/hexo-with-mathjax/,成功让博文渲染Mathjax" target="_blank" rel="noopener">http://wudaijun.com/2017/12/hexo-with-mathjax/,成功让博文渲染Mathjax</a></p><p>首先我在BlueLake目录_config配置文件下加入这段代码,来开启Mathjax</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">mathjax:<br>  enable: <span class="hljs-literal">true</span><br>  per_page: <span class="hljs-literal">true</span><br>  cdn: <span class="hljs-comment">//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></code></pre></td></tr></table></figure><p>结果并没有发生什么,然后在博客指引下更改<code>_partial/after_footer.jade</code>,发现并没有问题,有</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">if page.mathjax<br>  include mathjax.jade<br></code></pre></td></tr></table></figure><p>然后与Maupassant主题文件夹对比,发现layout/Index.jade中少了一句话,在<code>include _partial/paginator</code>下加一句<code>include _partial/mathjax</code>就好了,但是jade对缩进极为严格,一定要与前面一句话的缩进一致</p><p>然后hexo clean ,hexo g,hexo s,就发现已经渲染了数学公式了</p><h3 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h3><p>像之前的Next主题下博客一样,我还是保留了留言板,结果留言板加载出来居然和”关于”页面效果一样也加载了我的个人信息?!这个看起来很别扭,我研究了layout/page.jade之后想吐槽这个作者真是偷懒,直接把每个类型为page的界面都加载了个人信息,就是这些:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jade">.author-page<br>        a.photo(href=&quot;javascript:;&quot;)<br>          img(src=&apos;#&#123;theme.about.photo_url&#125;&apos;)<br>        .author<br>          p<br>            i.fa.fa-user name：<br>            | #&#123;config.author&#125;<br>          each item in theme.about.items<br>            p<br>              i(class=&quot;fa fa-&quot; + item.label) #&#123;item.label&#125;：<br>              a(href=item.url,target=&quot;_blank&quot;)= item.title<br></code></pre></td></tr></table></figure><p>咋搞呢,我们在layout目录下再创立一个jade文件<code>page_233.jade</code>或其他名字的玩意,把page.jade中的代码复制进去,然后去掉上述关于个人信息的代码就行了,注意缩进</p><p>然后把新页面(e.g 留言版)的<code>front-matter</code>(这是啥?<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter.html</a>)</p><p>中加上<code>layout: page_233</code>(就是刚刚那个玩意的名字)</p><p>这时候套路操作一波后,发现那个新页面就没了作者信息了</p><h3 id="修改代码高亮"><a href="#修改代码高亮" class="headerlink" title="修改代码高亮"></a>修改代码高亮</h3><p>这个主题的代码高亮真是无力吐槽,在source/css中找到了一个叫highlight.jade的玩意,感觉就是配置代码高亮的,于是用F12和RGB颜色参照表魔改一番,想改成VScode那种很舒服的风格,结果虽然不尽人意,但是比之前的不知道高到哪去了</p><p>这里有一份我的配置(包括下面的背景图片和标题配置在style.css/styl中)使用方法:<a href="https://github.com/Rye-Catcher/BlueLake-OI-HighLight-Style" target="_blank" rel="noopener">https://github.com/Rye-Catcher/BlueLake-OI-HighLight-Style</a></p><p>怎么修改呢?F12大法好,F12你觉得不好的地方,可以直接线上修改来看看效果,然后到/source/css/highlight.styl和/public/css/highlight.css中运用耐心和ctrl+F找到对应的代码进行修改</p><p>颜色编码对照:<a href="https://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">https://www.114la.com/other/rgb.htm</a></p><h3 id="背景图片设置"><a href="#背景图片设置" class="headerlink" title="背景图片设置"></a>背景图片设置</h3><p>感觉背景并不是很好看,修改后尺寸感人而且不会随屏幕滚动,咋办?还是F12，找到背景配置是在/source/css/style.styl中,通过F12中的信息ctrl+F找到background相关代码,修改即可</p><p>修改哪些参数?参考了这篇博客<a href="https://blog.csdn.net/m0_38099607/article/details/71122165" target="_blank" rel="noopener">https://blog.csdn.net/m0_38099607/article/details/71122165</a></p><p>在style.styl找到这么一大段话:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jade">body<br>  font-family: &quot;Source Code Pro&quot;, Tahoma, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei Light&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans CN&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif<br>  -webkit-font-smoothing: antialiased<br>  -moz-osx-font-smoothing: grayscale<br>  font-size: 14px<br>  color: #333<br>  width:100%<br>  height:100%<br>  background: #D8E2EB url(../img/bg.jpg) no-repeat //top center<br>  background-attachment: fixed           //这里在你的文件中应该是没有的<br>  background-size: 100%<br></code></pre></td></tr></table></figure><p>实际上你把background下面部分加上上述代码,同时去掉top,center这样就好了</p><p>注意别忘了在public/css/sytle.css中也要修改</p><p>如果你要我现成的(和上面链接一样):<a href="https://github.com/Rye-Catcher/BlueLake-OI-HighLight-Style" target="_blank" rel="noopener">https://github.com/Rye-Catcher/BlueLake-OI-HighLight-Style</a></p><h3 id="LOGO字体设置"><a href="#LOGO字体设置" class="headerlink" title="LOGO字体设置"></a>LOGO字体设置</h3><p>一开始LOGO字体(也就是左上方你大写的名字)默认是宋体,感觉有点老气,怎么修改呢?F12</p><p>发现还是在style.styl中</p><p>ctrl+F找到LOGO,就是这么一大段话:</p><figure class="hljs highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-id">#logo</span><br>  <span class="hljs-attribute">font</span>: bold <span class="hljs-number">42px</span>/<span class="hljs-number">1.2</span> <span class="hljs-string">"Comic Sans MS"</span> //<span class="hljs-string">"宋体"</span><br>  <span class="hljs-attribute">white-space</span> nowrap<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFF</span><br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#113f6e</span><br></code></pre></td></tr></table></figure><p>然后像我那么改就好了(注意public/css/style.css中也要改),当然你也可以换成你喜欢的字体</p><p>如果你要想我现成的:<a href="https://github.com/Rye-Catcher/BlueLake-OI-HighLight-Style" target="_blank" rel="noopener">https://github.com/Rye-Catcher/BlueLake-OI-HighLight-Style</a></p><h3 id="本地搜索配置"><a href="#本地搜索配置" class="headerlink" title="本地搜索配置"></a>本地搜索配置</h3><p>你会发现默认的本地搜索是会把你的关键字放到文章内容去匹配的,这样结果会非常多,如果我们只希望匹配标题和标签的话,在主文件夹(不是主题内)_config文件中本地搜索配置(如果你没有说明你还没配置,看BlueLake文档)改成像我这样就好了</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#self-search</span><br><span class="hljs-attr">jsonContent:</span><br><span class="hljs-attr">  meta:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  pages:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  posts:</span><br><span class="hljs-attr">    title:</span> <span class="hljs-literal">true</span>  <span class="hljs-string">//标题</span><br><span class="hljs-attr">    date:</span> <span class="hljs-literal">true</span>   <span class="hljs-string">//日期</span><br><span class="hljs-attr">    path:</span> <span class="hljs-literal">true</span>   <span class="hljs-string">//路径</span><br><span class="hljs-attr">    text:</span> <span class="hljs-literal">false</span>   <span class="hljs-string">//文本内容</span><br><span class="hljs-attr">    raw:</span> <span class="hljs-literal">false</span> <br><span class="hljs-attr">    content:</span> <span class="hljs-literal">false</span> <br><span class="hljs-attr">    slug:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    updated:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    link:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    permalink:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    excerpt:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    categories:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    tags:</span> <span class="hljs-literal">true</span>  <span class="hljs-string">//标签</span><br></code></pre></td></tr></table></figure><h3 id="修改tab大小"><a href="#修改tab大小" class="headerlink" title="修改tab大小"></a>修改tab大小</h3><p>这个主题的tab键大小有点扎心(之前Next主题也是),作为一名tab选手怎么能容忍大小不是4的tab呢?于是F12缩进处,发现并没有tab相关参数,于是突发奇想加一个tab参数,结果下方出现了一个tab-size的提示</p><p>于是在highlight.styl 中ctrl+F,找到这一段代码:</p><figure class="hljs highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-class">.gutter</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span>//<span class="hljs-number">#f7f8f8</span><br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e6e6e6</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.3em</span> <span class="hljs-number">15px</span><br>  <span class="hljs-selector-class">.line</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#f7f8f8</span>//<span class="hljs-number">#aaaaaa</span><br><span class="hljs-selector-class">.line</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f7f8f8</span>//<span class="hljs-number">#333</span><br>  <span class="hljs-attribute">tab-size</span>: <span class="hljs-number">4</span>          //加上这句话<br>  &amp;<span class="hljs-selector-class">.marked</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span>//<span class="hljs-number">#f5e3de</span><br></code></pre></td></tr></table></figure><p>在那个位置加上<code>tab-size: 4</code>就好了</p><p>当然在public/css/highlight.css中也要修改,找到这段话(别找错了!)</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">figure.highlight .line,<br>.codeblock .line &#123;<br>  font-size: 13px;<br>  tab-size: 4;   //加上这句话<br>  color: #f7f8f8;<br>&#125;<br></code></pre></td></tr></table></figure><p>也加上那句话就好了</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>本来想搞个像Next主题一样的标签页,但是我对前端一无所知,不知道哪位大佬可来帮我QAQ</p><p>准备pull request</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/20/hello-world/"/>
      <url>/2018/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UOJ#38奇数国题解--线段树+欧拉函数</title>
      <link href="/2018/09/19/UOJ-38%E5%A5%87%E6%95%B0%E5%9B%BD%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
      <url>/2018/09/19/UOJ-38%E5%A5%87%E6%95%B0%E5%9B%BD%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>luogu1967货车运输题解--树链剖分</title>
      <link href="/2018/09/18/luogu1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93%E9%A2%98%E8%A7%A3-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/09/18/luogu1967%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93%E9%A2%98%E8%A7%A3-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p>  <a href="https://www.luogu.org/problemnew/show/P1967" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1967</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>  NOIp的一道裸题,直接在最大生成树上剖分取最小值一下就完事了，非常好写,常数也比较小，然而题解里有许多我没见过的船新操作,先挖个坑等有时间再看</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>树链剖分又在第一遍挂了,忘了写top[now]=t;</p></li><li><p>注意题目说明并<strong>没有保证是联通的</strong>!!!然后成功被Hack了.这真的要警惕,指不定哪天毒瘤出题人就在这里把你正解卡成60(flag++)</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long ong </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::sort;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm=<span class="hljs-number">50005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y,c;<br>Edge(<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y,<span class="hljs-keyword">int</span> _c)&#123;x=_x,y=_y,c=_c;&#125;<br>Edge()&#123;x=y=c=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Edge &amp;b)<span class="hljs-keyword">const</span> &#123;<br><span class="hljs-keyword">return</span> c&gt;b.c;<br>&#125; <br>&#125;edge[maxm];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dat</span>&#123;</span><br><span class="hljs-keyword">int</span> ver,dis;<br>Dat(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)&#123;ver=x,dis=y;&#125;<br>Dat()&#123;;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;Dat&gt;g[maxn]; <br><span class="hljs-keyword">int</span> pa[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(pa[x]!=x)pa[x]=get(pa[x]);<span class="hljs-comment">//return pa[x]==x?pa[x]:pa[x]=get(pa[x]);</span><br><span class="hljs-keyword">return</span> pa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>,x,y,xx,yy,c;<br>sort(edge+<span class="hljs-number">1</span>,edge+<span class="hljs-number">1</span>+m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)pa[i]=i;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-comment">//printf("%d\n",edge[i].c);</span><br><span class="hljs-keyword">int</span> x=edge[i].x,y=edge[i].y;<br>xx=get(x),yy=get(y);<br><span class="hljs-keyword">if</span>(xx==yy)<span class="hljs-keyword">continue</span>;<br>c=edge[i].c;<br><span class="hljs-comment">//printf("%d %d %d\n",x,y,c);</span><br>g[x].push_back(Dat(y,c));<br>g[y].push_back(Dat(x,c));<br>pa[xx]=yy;<br>cnt++;<br><span class="hljs-keyword">if</span>(cnt==n<span class="hljs-number">-1</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> dep[maxn],son[maxn],top[maxn],size[maxn],dfn[maxn],fa[maxn],rnk[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> w[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;g[now].size();i++)&#123;<br>v=g[now][i].ver;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>w[v]=g[now][i].dis;<br>dfs_1(v);<br>size[now]+=size[v];<br><span class="hljs-keyword">if</span>(!son[now]||size[v]&gt;size[son[now]])son[now]=v;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;dfn[now]=++tot,rnk[tot]=now,top[now]=t;<br><span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>dfs_2(son[now],t);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;g[now].size();i++)&#123;<br>v=g[now][i].ver;<br><span class="hljs-keyword">if</span>(v==fa[now]|v==son[now])<span class="hljs-keyword">continue</span>;<br>dfs_2(v,v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mi[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>mi[now]=w[rnk[l]];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>mi[now]=min(mi[now&lt;&lt;<span class="hljs-number">1</span>],mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> L,R;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> mi[now];<br>&#125;<br><span class="hljs-keyword">int</span> ans=inf,mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans=min(ans,query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid));<br><span class="hljs-keyword">if</span>(mid&lt;R)ans=min(ans,query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r));<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">int</span> ans=inf;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>L=dfn[top[x]],R=dfn[x];<br>ans=min(ans,query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n));<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])swap(x,y);<br>L=dfn[x]+<span class="hljs-number">1</span>,R=dfn[y];<br><span class="hljs-keyword">if</span>(L&gt;R)<span class="hljs-keyword">return</span> ans;<br>ans=min(ans,query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n));<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> q,x,y,z;<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y),read(z);<br>edge[i]=Edge(x,y,z);<br>&#125;<br>kruskal();<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-comment">//不一定联通</span><br><span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>      dep[i]=<span class="hljs-number">1</span>,fa[i]=<span class="hljs-number">0</span>;<br>      dfs_1(i);<br>      dfs_2(i,i);<br>    &#125;<br>    &#125;<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>read(q);<br><span class="hljs-keyword">while</span>(q--)&#123;<br>read(x),read(y);<br><span class="hljs-keyword">int</span> tmp=query_path(x,y);<br><span class="hljs-keyword">if</span>(!tmp)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tmp);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2486[SDOI2011]染色题解--树链剖分+Trick</title>
      <link href="/2018/09/18/luogu2486-SDOI2011-%E6%9F%93%E8%89%B2%E9%A2%98%E8%A7%A3-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86-Trick/"/>
      <url>/2018/09/18/luogu2486-SDOI2011-%E6%9F%93%E8%89%B2%E9%A2%98%E8%A7%A3-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86-Trick/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>  <a href="https://www.luogu.org/problemnew/show/P2486" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2486</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>  看上去又是一道强行把序列上问题搬运到树上的裸题,然而分析之后发现并不然…</p><p>  首先我们考虑如何在序列上维护信息:从最简单的想起,如果两个相邻的元素合并,显然是这两个元素所含颜色段个数(其实就是1)加起来,如果两个元素颜色相同就减1;那么两个分别含有两个元素的相邻区间合并,还是把这两个区间所含颜色段个数加起来,如果左区间最右边的颜色等于右区间最左边的颜色就减去1.</p><p>  如此我们已经得到线段树维护信息的方法,记录区间所含颜色段个数,区间最左边颜色及区间最右边颜色,当然为了$pushdown$我们还得维护一个$tag$数组表示覆盖标记,然后按上面方法就好了</p><p>  但是在树链剖分查询两点之间时就与序列上不同了.有一个问题,就是当前链最左边的颜色如果和上面那条链最右边的颜色相等的话,需要将贡献减1.有一个$naiive$的方法是每次查询链时再查一下上面那条链最右边的颜色(其实就是单点查询$fa[top[x]]$的颜色),然后这个方法看起来不优美,其实有个更妙的方法</p><p>  我们每次查完一条链后记录该链最左边的颜色,同时将该链最右边的颜色与上一次记录的值比较。看起来很容易但有个问题就是你可能是从$LCA$两个不同的子树上向LCA跳,然后从 @ qscqesze_lca 的题解中学到了一个小trick轻易解决了这个问题,请看代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> col[maxn];<br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],size[maxn],dfn[maxn],rnk[maxn],tot=<span class="hljs-number">0</span>,top[maxn],son[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>dep[v]=dep[now]+<span class="hljs-number">1</span>,fa[v]=now;<br>dfs_1(v);<br>size[now]+=size[v];<br><span class="hljs-keyword">if</span>(!son[now]||size[v]&gt;size[son[now]])son[now]=v;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;top[now]=t,dfn[now]=++tot,rnk[tot]=now;<br><span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>dfs_2(son[now],t);<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>dfs_2(v,v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> num[maxn&lt;&lt;<span class="hljs-number">2</span>],lc[maxn&lt;&lt;<span class="hljs-number">2</span>],rc[maxn&lt;&lt;<span class="hljs-number">2</span>],tag[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> L,R,dta;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>tag[now]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>num[now]=<span class="hljs-number">1</span>;<br>lc[now]=rc[now]=col[rnk[l]];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>num[now]=num[now&lt;&lt;<span class="hljs-number">1</span>]+num[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]-(rc[now&lt;&lt;<span class="hljs-number">1</span>]==lc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);<br>lc[now]=lc[now&lt;&lt;<span class="hljs-number">1</span>],rc[now]=rc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag[now]!=<span class="hljs-number">-1</span>)&#123;<br>tag[now&lt;&lt;<span class="hljs-number">1</span>]=tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=tag[now];<br>lc[now&lt;&lt;<span class="hljs-number">1</span>]=lc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=lc[now];<br>rc[now&lt;&lt;<span class="hljs-number">1</span>]=rc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=rc[now];<br>num[now&lt;&lt;<span class="hljs-number">1</span>]=num[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>tag[now]=<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>num[now]=<span class="hljs-number">1</span>;<br>lc[now]=rc[now]=dta;<br>tag[now]=dta;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>pushdown(now);<br><span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>num[now]=num[now&lt;&lt;<span class="hljs-number">1</span>]+num[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]-(rc[now&lt;&lt;<span class="hljs-number">1</span>]==lc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);<br>lc[now]=lc[now&lt;&lt;<span class="hljs-number">1</span>],rc[now]=rc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> chain_lc,chain_rc;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L==l)chain_lc=lc[now];<br><span class="hljs-keyword">if</span>(R==r)chain_rc=rc[now];<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> num[now];<br>&#125;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>pushdown(now);<br><span class="hljs-keyword">if</span>(L&lt;=mid&amp;&amp;mid&lt;R)ans=query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid)+query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r)-(rc[now&lt;&lt;<span class="hljs-number">1</span>]==lc[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L&lt;=mid)ans=query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mid&lt;R)ans=query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-comment">//num[now]=num[now&lt;&lt;1]+num[now&lt;&lt;1|1]-(rc[now&lt;&lt;1]==lc[now&lt;&lt;1|1]?1:0);</span><br><span class="hljs-comment">//lc[now]=lc[now&lt;&lt;1],rc[now]=rc[now&lt;&lt;1|1];</span><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>dta=c;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>L=dfn[top[x]],R=dfn[x];<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])swap(x,y);<br>L=dfn[x],R=dfn[y];<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> lst_1,lst_2;<span class="hljs-comment">//lst_1总是你当前正在查询的链的上一条链的最左边颜色 </span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>lst_1=lst_2=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<br>   &#123;swap(x,y),swap(lst_1,lst_2);&#125;<span class="hljs-comment">//非常高明的一个trick,不用刻意查询链top父亲的颜色 </span><br>L=dfn[top[x]],R=dfn[x];<br>ans+=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">if</span>(lst_1==chain_rc)ans--;<br>lst_1=chain_lc;<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dfn[x]&lt;dfn[y])<br>&#123;swap(x,y),swap(lst_1,lst_2);&#125;<br>L=dfn[y],R=dfn[x];<br>ans+=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">if</span>(chain_rc==lst_1)ans--;<br><span class="hljs-keyword">if</span>(chain_lc==lst_2)ans--;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z;<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(col[i]);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>dfs_1(<span class="hljs-number">1</span>);<br>dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br><span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'C'</span>)&#123;<br>read(x),read(y),read(z);<br>update_path(x,y,z);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>read(x),read(y);<br>query_path(x,y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4092[HEOI2016]树题解--树链剖分</title>
      <link href="/2018/09/18/luogu4092-HEOI2016-%E6%A0%91%E9%A2%98%E8%A7%A3-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/09/18/luogu4092-HEOI2016-%E6%A0%91%E9%A2%98%E8%A7%A3-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p>  <a href="https://www.luogu.org/problemnew/show/P4092" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4092</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="瞎扯—-O-Q-log-3-N-解法"><a href="#瞎扯—-O-Q-log-3-N-解法" class="headerlink" title="瞎扯—$O(Q \log^3 N)$解法"></a>瞎扯—$O(Q \log^3 N)$解法</h4><p>  这道先yy出了一个$O(Q \log^3 N)$,的做法，先树链剖分。</p><p>  对于加标记操作，找到那个点所在的链，将其$top$标记一下，然后该点到根节点区间和+1.</p><p>  对于查询操作，先看这个点所在链有没有标记，如果没有，就一直向上跳直到找到一条标记了的链，然后在那条链上根据到根节点区间和进行倍增/二分</p><p>  然后出去吃饭的时候忽然想到了$O(Q \log^2 N)$的解法,于是刚刚这个解法刚打完还没有查错，放在这做一个参考</p><p>  代码：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>     x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>     <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>     x=c<span class="hljs-number">-48</span>;<br>     <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>     x=ne?-x:x;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>     <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>     edge[++num_edge].ne=h[f];<br>     edge[num_edge].to=t;<br>     h[f]=num_edge;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],size[maxn],son[maxn],top[maxn],dfn[maxn],rnk[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>     <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>         v=edge[i].to;<br>         <span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>         fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>         dfs_1(v);<br>         size[now]+=size[v];<br>         <span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>     &#125;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>     <span class="hljs-keyword">int</span> v;top[now]=t;<br>     dfn[now]=++cnt,rnk[cnt]=now;<br>     <span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>     dfs_2(son[now],t);<br>     <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>         v=edge[i].to;<br>         <span class="hljs-keyword">if</span>(v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>         dfs_2(v,v);<br>     &#125;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> sum[maxn&lt;&lt;<span class="hljs-number">2</span>],tag[maxn&lt;&lt;<span class="hljs-number">2</span>],L,R,dta,ok[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>     <span class="hljs-keyword">if</span>(l==r)&#123;<br>        sum[now]=ok[rnk[l]];<br>        <span class="hljs-keyword">return</span> ;<br>     &#125;<br>     <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>     build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>     build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> ln,<span class="hljs-keyword">int</span> rn)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(tag[now])&#123;<br>        sum[now&lt;&lt;<span class="hljs-number">1</span>]+=tag[now]*ln;<br>        sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tag[now]*rn;<br>        tag[now&lt;&lt;<span class="hljs-number">1</span>]+=tag[now];<br>        tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tag[now];<br>        tag[now]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        sum[now]+=dta*(r-l+<span class="hljs-number">1</span>);<br>        tag[now]+=dta;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    pushdown(now,mid-l+<span class="hljs-number">1</span>,r-mid);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>   <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>       <span class="hljs-keyword">return</span> sum[now];<br>   &#125; <br>   <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br>   pushdown(now,mid-l+<span class="hljs-number">1</span>,r-mid);<br>   <span class="hljs-keyword">if</span>(L&lt;=mid)ans+=query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>   <span class="hljs-keyword">if</span>(mid&lt;R)ans+=query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>   sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    dta=<span class="hljs-number">1</span>;ok[top[x]]=<span class="hljs-number">1</span>;<span class="hljs-comment">//该条链上有一个标记的点</span><br>    <span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br>       <span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>       L=dfn[top[x]],R=dfn[x];<br>       update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[x]&lt;dfn[y])swap(x,y);<br>    L=dfn[x],R=dfn[y];<br>    update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp,val,p=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>,len,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br>        <span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>        len=dfn[x]-dfn[top[x]];<br>        <span class="hljs-keyword">if</span>(ok[top[x]])&#123;<br>             L=dfn[top[x]],R=dfn[x],<br>             tmp=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>             p=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>,flag=<span class="hljs-number">0</span>;<br>             <span class="hljs-keyword">while</span>(k!=<span class="hljs-number">0</span>)&#123;<br>             L=dfn[x+p+k],R=dfn[x];<br>             <span class="hljs-keyword">if</span>(query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n)&gt;tmp)flag=<span class="hljs-number">1</span>,k=k&gt;&gt;<span class="hljs-number">1</span>;<br>             <span class="hljs-keyword">else</span> p=p+k,k=k&lt;&lt;<span class="hljs-number">1</span>;<br>             <span class="hljs-keyword">while</span>(p+k&gt;len)k=k&gt;&gt;<span class="hljs-number">1</span>;<br>             &#125;<br>             <span class="hljs-keyword">if</span>(flag)<span class="hljs-keyword">return</span> ans+dfn[x+p]-dfn[x];<br>        &#125;<br>        ans+=len;<br>        x=fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[x]&gt;dfn[y])swap(x,y);<br>    L=dfn[x],R=dfn[y],len=dfn[y]-dfn[x];<br>    tmp=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    p=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cout&lt;&lt;y&lt;&lt;endl;</span><br>    <span class="hljs-keyword">if</span>(x==y)<span class="hljs-keyword">return</span> ans;<br>    <span class="hljs-keyword">while</span>(k!=<span class="hljs-number">0</span>)&#123;<br>        L=dfn[x+p+k],R=dfn[x];<br>        <span class="hljs-keyword">if</span>(query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n)&gt;tmp)k=k&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> p=p+k,k=k&lt;&lt;<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//if(y==3)cout&lt;&lt;k&lt;&lt;' '&lt;&lt;p&lt;&lt;endl;</span><br>        <span class="hljs-keyword">while</span>(p+k&gt;len)k=k&gt;&gt;<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans+dfn[x+p]-dfn[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br>     <span class="hljs-keyword">int</span> x,y,z;<br>     read(n),read(q);<br>     <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        read(x),read(y);<br>        add_edge(x,y);<br>        add_edge(y,x);<br>     &#125;<br>     dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>     dfs_1(<span class="hljs-number">1</span>);<br>     dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>     ok[dfn[<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>     build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>     <span class="hljs-keyword">while</span>(q--)&#123;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br>         <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'C'</span>)&#123;<br>             read(x);<br>             <span class="hljs-comment">//cout&lt;&lt;x&lt;&lt;"-----"&lt;&lt;endl;</span><br>             update_path(<span class="hljs-number">1</span>,x);<br>         &#125;<br>         <span class="hljs-keyword">else</span>&#123;<br>             read(x);<br>             <span class="hljs-comment">//cout&lt;&lt;x&lt;&lt;"***"&lt;&lt;endl;</span><br>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,solve(x,<span class="hljs-number">1</span>));<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="O-Q-log-2-N-解法"><a href="#O-Q-log-2-N-解法" class="headerlink" title="$O(Q \log^2 N)$解法"></a>$O(Q \log^2 N)$解法</h4><p>  首先我想到了一个错误的解法，就是因为链是线段树上一个连续的区间，每个$[dfn[x],dfn[top[x]]]$线段树区间有个$mx$值,表示,$x$到$top[x]$路径中距离它最近标记的祖先，加标记时比较原有标记深度与新标记深度然后更新。查询的时候查询$x$到$top[x]$的区间最大之就可以了，如果没有，就一直往上跳直至找到</p><p>  然而这个解法有个错误我SB地没有发现，就是你更新区间最大值时，$x$上的祖先节点也会被更新到（因为深度更小），再次感谢wjyyy和creed_两位大佬指出我的错误</p><p>  正解应该是更新子树，将子树的最大值更新，查询照样，相比于我错误的代码只需改一句话</p><p>  代码：</p><figure class="hljs highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>     x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>     <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>     x=c<span class="hljs-number">-48</span>;<br>     <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>     x=ne?-x:x;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>     <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>     edge[++num_edge].ne=h[f];<br>     edge[num_edge].to=t;<br>     h[f]=num_edge;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> dep[maxn],fa[maxn],size[maxn],son[maxn],top[maxn],dfn[maxn],rnk[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>     <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>         v=edge[i].to;<br>         <span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>         fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>         dfs_1(v);<br>         size[now]+=size[v];<br>         <span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>     &#125;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>     <span class="hljs-keyword">int</span> v;top[now]=t;<br>     dfn[now]=++cnt,rnk[cnt]=now;<br>     <span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>     dfs_2(son[now],t);<br>     <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>         v=edge[i].to;<br>         <span class="hljs-keyword">if</span>(v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>         dfs_2(v,v);<br>     &#125;<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mx[maxn&lt;&lt;<span class="hljs-number">2</span>],L,R,dta;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>     <span class="hljs-keyword">if</span>(l==r)&#123;<br>        <span class="hljs-keyword">if</span>(rnk[l]==<span class="hljs-number">1</span>)mx[now]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> mx[now]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> ;<br>     &#125;<br>     <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>     build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>     build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>     <span class="hljs-keyword">if</span>(dep[mx[now&lt;&lt;<span class="hljs-number">1</span>]]&gt;dep[mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]])&#123;<br>           mx[now]=mx[now&lt;&lt;<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span> mx[now]=mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>     <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        <span class="hljs-keyword">if</span>(dep[mx[now]]&lt;dep[dta])&#123;<br>           mx[now]=dta;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">if</span>(dep[mx[now&lt;&lt;<span class="hljs-number">1</span>]]&gt;dep[mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]])&#123;<br>           mx[now]=mx[now&lt;&lt;<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span> mx[now]=mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>   <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>       <span class="hljs-keyword">return</span> mx[now];<br>   &#125; <br>   <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>,tmp;<br>   <span class="hljs-keyword">if</span>(L&lt;=mid)&#123;<br>      <span class="hljs-keyword">int</span> tmp=query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>      <span class="hljs-keyword">if</span>(dep[ans]&lt;dep[tmp])ans=tmp;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(mid&lt;R)&#123;<br>      <span class="hljs-keyword">int</span> tmp=query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>      <span class="hljs-keyword">if</span>(dep[ans]&lt;dep[tmp])ans=tmp;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dta=x;<br>    <span class="hljs-comment">//L=R=dfn[x];</span><br>    L=dfn[x],R=dfn[x]+size[x];<br>    update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(top[x]!=<span class="hljs-number">1</span>)&#123;<br>       L=dfn[top[x]],R=dfn[x];<br>       ans=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>       <span class="hljs-keyword">if</span>(ans!=<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ans;<br>       x=fa[top[x]];<br>    &#125;<br>    L=dfn[<span class="hljs-number">1</span>],R=dfn[x];<br>    ans=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br>     <span class="hljs-keyword">int</span> x,y,z;<br>     read(n),read(q);<br>     <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        read(x),read(y);<br>        add_edge(x,y);<br>        add_edge(y,x);<br>     &#125;<br>     dep[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>,dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>     dfs_1(<span class="hljs-number">1</span>);<br>     dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>     build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>     <span class="hljs-keyword">while</span>(q--)&#123;<br>         <span class="hljs-comment">//cout&lt;&lt;q&lt;&lt;endl;</span><br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br>         <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'C'</span>)&#123;<br>             read(x);<br>             update_path(x);<br>         &#125;<br>         <span class="hljs-keyword">else</span>&#123;<br>             read(x);<br>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query_path(x));<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU2196Computer--二次扫描与换根</title>
      <link href="/2018/09/18/HDU2196Computer-%E4%BA%8C%E6%AC%A1%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%8D%A2%E6%A0%B9/"/>
      <url>/2018/09/18/HDU2196Computer-%E4%BA%8C%E6%AC%A1%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%8D%A2%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/HDU-2196" target="_blank" rel="noopener">https://cn.vjudge.net/problem/HDU-2196</a></p><p>给定一棵树,求离每个节点最远的点的距离是多少</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>前置技能: 二次扫描与换根</p><p>不清楚的可以看一看之前POJ3585的博客或是自行了解</p><p>首先考虑先$O(N)$钦定点以之为根树形DP怎么做</p><p>太容易了,$f[now]$表示以$now$为根的子树中距$now$最远的距离</p><p>$f[now]=max(f[now],f[son]+dis(now,son))$</p><p>行吧,那又用二次扫描与换根做呢</p><p>我们发现$son$这个节点的答案要么是$f[now]$,要么就是往上向父亲那边走走到的最远距离</p><p>于是我们就想办法把这个向上能走的最远距离$q[now]$搞出来</p><p>$q[son]=max(q[now],f[now])+dis(now,son)$</p><p>很好理解吧,因为$now$如果为根最长路要么从上面走要么是子树中的</p><p>等等,不对啊,如果这个$f[now]$它恰好就是从$f[son]$转移过来的呢,那么不就GG了吗</p><p>于是我们再记录一个$now$为根子树中距$now$次远的距离,也就是距离次大值$g[now]$</p><p>如果$f[now]$由$f[son]$转移过来,那么</p><p>$q[son]=max(q[now],g[now])+dis(now,son)$</p><p>最后每个点的答案就是$max(f[now],q[now])$</p><p>注意得到次大值时要注意,判完小于最大值后判断是否能更新次大值</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to,dis;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].dis=c;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> f[maxn],g[maxn],t[maxn];<span class="hljs-comment">//f--最大值 g--次大值,都是向下走到的最远距离</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v,x;<br>    <span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>,pp=<span class="hljs-number">0</span>;<span class="hljs-comment">//p--max pp--smaller than max</span><br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        dfs_1(v,now);<br>        x=f[v]+edge[i].dis;<br>        <span class="hljs-keyword">if</span>(p&lt;x) pp=p,p=x,t[now]=v;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pp&lt;x) pp=x;<span class="hljs-comment">//这一句话千万不要忘了加</span><br>    &#125;<br>    f[now]=p,g[now]=pp;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];   <span class="hljs-comment">//向上走到的最远距离</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v,x;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(v==t[now])x=g[now];<br>        <span class="hljs-keyword">else</span> x=f[now];<br>        q[v]=max(q[now],x)+edge[i].dis;<br>        dfs_2(v,now);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n)!=EOF)&#123;<br>        <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*(n+<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>            read(x),read(y);<br>            add_edge(i,x,y);<br>            add_edge(x,i,y);<br>        &#125;<br>        f[<span class="hljs-number">1</span>]=g[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        dfs_1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        q[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,max(f[i],q[i]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 二次扫描与换根 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ3585AccumulationDegree--二次扫描与换根</title>
      <link href="/2018/09/18/POJ3585AccumulationDegree-%E4%BA%8C%E6%AC%A1%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%8D%A2%E6%A0%B9/"/>
      <url>/2018/09/18/POJ3585AccumulationDegree-%E4%BA%8C%E6%AC%A1%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%8D%A2%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/POJ-3585" target="_blank" rel="noopener">https://cn.vjudge.net/problem/POJ-3585</a></p><p>找到一个点,如果其成为河水发源地,使整棵树的流量最大,有些河道会限制流量</p><p><del>真- 网络流</del></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>学到了一个船新骚操作—二次扫描与换根!</p><p>首先我们来$naive$的做法,枚举每个点作为发源地,然后进行一次树形DP</p><p>$f[now]$表示在$now$为根的子树中的最大流量,那么根据题目定义</p><p>$f[now] = \sum min(f[son],infc(now,son))$</p><p>特殊地,如果$son$的度数为$1$(相当于叶节点)那么$f[now]+= infc(now,son)$</p><p>然而这样的时间复杂度是$O(N^2)$</p><p>然后二次扫描与换根法让我们只用两次遍历就能得出所有节点为根时的解</p><p>核心思想是理解子节点到父节点中哪些信息被更改与转移,不同于之前的DP,这回我们的信息自顶向下转移</p><p>显然$son$对$f[now]$,做出的贡献是$min(f[son],infc(now,son))$</p><p>所以以$now$为根的树中除去$son$的子树剩下的流量就是$ans[now]-min(f[son],infc(now,son))$,</p><p>又因为假如以$son$为根那么答案显然是原来$DFS$中求得$son$子树的解$f[son]$加上父亲节点水流到它的贡献</p><p>于是$ans[son]=f[son]+min(infc(now,son),ans[now]-min(infc(now,son),f[son])) $</p><p>特殊地,如果$now$是度数为1(相当叶节点),那么$ans[son]=f[son]+infc(now,son)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to,dis;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    edge[num_edge].dis=c;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> deg[maxn];<br><span class="hljs-keyword">int</span> f[maxn],n,d[maxn],ans=-inf;<br><span class="hljs-keyword">int</span> infc[maxn];<span class="hljs-comment">//流量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br>    d[now]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        flag=<span class="hljs-number">1</span>;<br>        infc[v]=edge[i].dis;<br>        dfs_1(v,now);<br>        <span class="hljs-keyword">if</span>(deg[v]==<span class="hljs-number">1</span>)d[now]+=infc[v];<br><span class="hljs-keyword">else</span> d[now]+=min(d[v],infc[v]);<br>&#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(deg[now]==<span class="hljs-number">1</span>)f[v]=d[v]+infc[v];<br>        <span class="hljs-keyword">else</span> f[v]=d[v]+min(infc[v],f[now]-min(infc[v],d[v]));<br>        dfs_2(v,now);<br>    &#125;<br>    ans=max(ans,f[now]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T;<br><span class="hljs-keyword">int</span> x,y,z;<br>    read(T);<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        read(n);<br>        num_edge=<span class="hljs-number">0</span>,ans=-inf;<br>        <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(h));<br>        <span class="hljs-built_in">memset</span>(deg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(deg));<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            read(x),read(y),read(z);<br>            deg[x]++,deg[y]++;<br>            add_edge(x,y,z);<br>            add_edge(y,x,z);<br>        &#125;<br>        dfs_1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        f[<span class="hljs-number">1</span>]=d[<span class="hljs-number">1</span>];<br>        dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 二次扫描与换根 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu3360偷天换日--树上背包DP</title>
      <link href="/2018/09/18/luogu3360%E5%81%B7%E5%A4%A9%E6%8D%A2%E6%97%A5-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85DP/"/>
      <url>/2018/09/18/luogu3360%E5%81%B7%E5%A4%A9%E6%8D%A2%E6%97%A5-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3360" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3360</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>如果你做过<a href="https://www.luogu.org/problemnew/show/P1270这个的话发现这题只是在叶节点处加了个简单的背包" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1270这个的话发现这题只是在叶节点处加了个简单的背包</a>…</p><p>首先发现这是一颗二叉树,这就资瓷了,转移时我们直接枚举给左子树分配多少时间就好了,然后到叶节点时跑个01背包就没事了</p><p>但是这个毒瘤输入让人不得不怀疑是<del>UWaA</del> UVA原题,我们选择像DFS那样的顺序搞就好了</p><p>但还是有几个坑….</p><p>你通过走廊的时间是要算来回的,所以要乘以2</p><p>讨论区里有人反映初始时间要$-1s$,因为你要续一秒在警察来之前跑出去</p><p>枚举转移时别忘了花费的时间</p><p><del>我不会告诉你这三个坑我全都踩到了</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> ls[maxn],rs[maxn];<br><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">605</span>];<br><span class="hljs-keyword">int</span> s,tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> w[maxn],c[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;<br>    read(x),read(y);<br>    x*=<span class="hljs-number">2</span>;<span class="hljs-comment">//来回算两次 </span><br>    <span class="hljs-keyword">if</span>(y)&#123;<br>        <span class="hljs-comment">/*for(ri i=x;i&lt;=s;i++)&#123;<br>            f[now][i]=min((i-x)/5,y);<br>        &#125;*/</span><br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=y;i++)&#123;<br>            read(c[i]),read(w[i]);<br>            <span class="hljs-comment">//printf("%d %d\n",w[i],c[i]);</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=y;i++)&#123;<br>            <span class="hljs-keyword">for</span>(ri j=s;j&gt;=x+w[i];j--)<br>                f[now][j]=max(f[now][j],f[now][j-w[i]]+c[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">int</span> i,j;<br>        ls[now]=++tot;<br>        init(tot);<br>        rs[now]=++tot;<br>        init(tot);<br>        <span class="hljs-keyword">for</span>(ri k=s;k&gt;=x;k--)&#123;<br>            <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=k-x;i++)&#123;<span class="hljs-comment">//还要通过这条通道所以还要减去x!!! </span><br>                j=k-x-i;<span class="hljs-comment">//又查了好久的错... </span><br>                f[now][k]=max(f[now][k],f[ls[now]][i]+f[rs[now]][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(s);s--;<span class="hljs-comment">//必须续一秒啊  </span><br>    init(++tot);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[<span class="hljs-number">1</span>][s]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
            <tag> 背包DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2014选课--树上背包DP</title>
      <link href="/2018/09/18/luogu2014%E9%80%89%E8%AF%BE-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85DP/"/>
      <url>/2018/09/18/luogu2014%E9%80%89%E8%AF%BE-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2014" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2014</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>巧妙的树上背包,$f[now][p]$表示$now$节点选了$p$门课所得最大收益</p><p>将$now$节点的每个子节点$v$看成一组物品,一组物品有$size[v]$个物品,每个物品的体积为$1$,选了$j$个物品的价值为$f[v][j]$</p><p>于是这样写状态转移</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(ri i=m;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//不懂为什么倒序循环的可以去看看我的背包DP题解</span><br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=i;j++)&#123;<br>                f[now][i]=max(f[now][i],f[now][i-j]+f[v][j]);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>当然不要忘记把取$now$节点的贡献加入$f$中</p><p>同时注意到一开始形态可能是个森林,按照套路搞个$n+1$的虚点就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1305</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> f[maxn][maxn],n,m;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    f[now][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        dfs(v);<br>        <span class="hljs-keyword">for</span>(ri i=m;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=i;j++)&#123;<br>                f[now][i]=max(f[now][i],f[now][i-j]+f[v][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(now!=n+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(ri i=m;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            f[now][i]=f[now][i<span class="hljs-number">-1</span>]+a[now];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,k,y;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(k),read(x);<br>        a[i]=x;<br>        <span class="hljs-keyword">if</span>(!k) add_edge(n+<span class="hljs-number">1</span>,i);<br>        <span class="hljs-keyword">else</span> add_edge(k,i);<br>    &#125;<br>    dfs(n+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[n+<span class="hljs-number">1</span>][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
            <tag> 背包DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA1292StrategicGame--树形DP</title>
      <link href="/2018/09/18/UVA1292StrategicGame-%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2018/09/18/UVA1292StrategicGame-%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/UVA1292" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/UVA1292</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这不跟没有<del>刘醒</del>上司的舞会一样的套路么,怎么一个普及+,一个提高+.也是挺服luogu评分</p><p>$f[now][1/0]$表示取/不取$now$在$now$为根的子树中的最大值</p><p>转移照样简单</p><p>$f[now][0]=\sum max(f[son][0],f[son][1]) $,$son$是$now$的儿子节点</p><p>$f[now][1]= \sum f[son][0]+ 1$</p><p>当然我们先要找出个入度为0的点钦定为根</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n,f[maxn][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> deg[maxn],root;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    f[now][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    f[now][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-comment">//printf("%d %d\n",now,v);</span><br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        dfs(v);<br>        f[now][<span class="hljs-number">0</span>]+=f[v][<span class="hljs-number">1</span>];<br>        f[now][<span class="hljs-number">1</span>]+=min(f[v][<span class="hljs-number">1</span>],f[v][<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,s;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n)!=EOF)&#123;<br>    num_edge=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(deg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(deg));<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(h));<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d:(%d)"</span>,&amp;x,&amp;y);x++;<br>            <span class="hljs-comment">//printf("%d %d\n",x,y);</span><br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=y;j++)&#123;<br>                read(s);s++;<br>                add_edge(x,s);<br>                deg[s]++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n+<span class="hljs-number">1</span>;i++)<span class="hljs-keyword">if</span>(!deg[i])&#123;root=i;<span class="hljs-keyword">break</span>;&#125;<br>        dfs(root);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,min(f[root][<span class="hljs-number">1</span>],f[root][<span class="hljs-number">0</span>]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1122最大子树和--树形DP</title>
      <link href="/2018/09/18/luogu1122%E6%9C%80%E5%A4%A7%E5%AD%90%E6%A0%91%E5%92%8C-%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2018/09/18/luogu1122%E6%9C%80%E5%A4%A7%E5%AD%90%E6%A0%91%E5%92%8C-%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1122" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1122</a></p><p><del>真 - 搜索剪枝题</del></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题也很好想,枚举每个节点与它儿子节点之间连的枝是剪还是不剪就好了</p><p>$f[now] = \sum max(f[son],0)$</p><p>但这题有个需要注意的地方,就是你可能将一个节点与它父亲之间相连的枝条剪掉以获得最大答案,由于$f[now]$指在$now$为根的子树范围内的最大答案,所以$ans=max(ans,f[now])$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">16005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn],f[maxn],n;<br><span class="hljs-keyword">int</span> ans=-inf;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>f[now]=a[now];<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dfs(v,now);<br>f[now]+=max(f[v],<span class="hljs-number">0</span>);<br>&#125;<br>ans=max(ans,f[now]);<span class="hljs-comment">//也可能把它与父亲相连的枝剪掉</span><br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(a[i]);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1352没有上司的舞会--树形DP</title>
      <link href="/2018/09/18/luogu1352%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A-%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2018/09/18/luogu1352%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A-%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1352" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1352</a></p><p><del>下属不允许啵上司嘴</del></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>经典的树形DP入门题,有了之前的经验很容易设计出状态,$f[now][1/0]​$表示取/不取$now​$节点并且以$now​$的子树中的快乐总和最大值,显然这是一个最优子结构,根据题意状态转移方程也不难想出</p><p>$f[now][0]=\sum max(f[son][0],f[son][1]) $,$son$是$now$的儿子节点</p><p>$f[now][1]= \sum f[son][0]+ a[now]$,因为取了这个点它的下属都不能取</p><p>于是直接$DFS$自底向上递推就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> a[maxn],deg[maxn],root;<br><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<br>f[now][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>f[now][<span class="hljs-number">1</span>]=a[now];<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br>dfs(v);<br>f[now][<span class="hljs-number">0</span>]+=max(f[v][<span class="hljs-number">0</span>],f[v][<span class="hljs-number">1</span>]);<br>f[now][<span class="hljs-number">1</span>]+=f[v][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(y,x);<br>deg[x]++;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!deg[i])&#123;root=i;<span class="hljs-keyword">break</span>;&#125;<br>dfs(root);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,max(f[root][<span class="hljs-number">1</span>],f[root][<span class="hljs-number">0</span>]));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置UOJ数据的正确姿势</title>
      <link href="/2018/09/17/%E9%85%8D%E7%BD%AEUOJ%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/09/17/%E9%85%8D%E7%BD%AEUOJ%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<p>最近瞎搞用开源UOJ搭了个OJ,在题目配置方面搞了挺久,一开始看vfleaking的文档还折腾了SVN,特意写下这篇文章为后来人少走弯路</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>拥有管理权限并设置好题面,支持$LaTex$和Markdown</p><h3 id="Step-2-设置数据"><a href="#Step-2-设置数据" class="headerlink" title="Step 2 设置数据"></a>Step 2 设置数据</h3><h4 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h4><p><a href="https://vfleaking.github.io/uoj/problem/" target="_blank" rel="noopener">https://vfleaking.github.io/uoj/problem/</a></p><p><a href="https://universaloj.github.io/post/%E9%A2%98%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0.html" target="_blank" rel="noopener">https://universaloj.github.io/post/%E9%A2%98%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0.html</a></p><h4 id="传统题上传数据格式"><a href="#传统题上传数据格式" class="headerlink" title="传统题上传数据格式"></a>传统题上传数据格式</h4><p>假如输入输出文件名是<code>abc.in/out</code>,那么您的.zip压缩包需要这些东西（不要建子目录!!!)</p><ul><li>所有<code>abc1.in/out</code>,<code>abc2.in/out</code>…</li><li>一个<code>problem.conf</code>,格式:</li></ul>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">use_builtin_judger on<br>use_builtin_checker ncmp  <span class="hljs-comment">//如果是字符串或浮点数等比较方式(第二个参数)请阅读参考网站相关资料</span><br>n_tests <span class="hljs-number">10</span><br>n_ex_tests <span class="hljs-number">0</span><br>n_sample_tests <span class="hljs-number">0</span>  <span class="hljs-comment">//一般的如果我们不需要样例数据(1_sample_test.in/out)和额外数据(ex_abc1.in/out)的话,把那两个参数置为0就好了</span><br>input_pre abc    <span class="hljs-comment">//输入文件前缀,比如"abc"</span><br>input_suf in<br>output_pre abc   <span class="hljs-comment">//输出文件前缀,比如"abc"</span><br>output_suf out<br>time_limit <span class="hljs-number">1</span><br>memory_limit <span class="hljs-number">512</span><br>output_limit <span class="hljs-number">64</span>  <span class="hljs-comment">//time_limit单位是秒,memory_limit单位是MB,output_limit是输出文件限制,单位是MB</span><br></code></pre></td></tr></table></figure><p>  上述参数代表什么意思请看参考网站</p><ul><li>一份<code>std.cpp</code>,需要文件输入输出</li><li>一份<code>val.cpp</code>,检验hack数据是否合法,但是现在我也不会用,你可以随意写但是不能为空也不能编译错误,以后会补上怎么认真写<code>val.cpp</code>这个坑</li></ul><h4 id="非传统题上传数据格式"><a href="#非传统题上传数据格式" class="headerlink" title="非传统题上传数据格式"></a>非传统题上传数据格式</h4><p>  坑,待填</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>上传数据等待完成后点击与SVN仓库同步即可,如果您没有认真地写<code>val.cpp</code>的话请在右边取消Hack</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开源UOJ教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF340B-MaximalAreaQuadrilateral-思维&amp;计算几何</title>
      <link href="/2018/09/15/CF340B-MaximalAreaQuadrilateral-%E6%80%9D%E7%BB%B4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
      <url>/2018/09/15/CF340B-MaximalAreaQuadrilateral-%E6%80%9D%E7%BB%B4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF340B" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF340B</a></p><p>$n$个点,找出能围成的四边形最大面积,$n&lt;=300$</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题像我这种菜鸡只会$O(N^4)$枚举啊,正解人太傻根本想不到</p><p>相比于朴素枚举,我们换个思路,先枚举对角线,再一遍$O(N)$枚举计算与对角线形成的三角形面积</p><p>我们用叉积计算所以有正有负,如果你会计算几何基础的话，那你肯定明白其实我们只需要将最小负叉积三角形面积相反数加上最大最大正叉积三角形面积就是对于一条固定对角线构成的四边形最大面积</p><p>这样就做到$O(N^3)$,由于是不满的对于时限绰绰有余</p><p>还要注意判断是否点都在一边的情况,判断$mi,mx​$是否同号即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125; <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">305</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> px[maxn],py[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vec</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y;<br>Vec(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)&#123;x=px[b]-px[a],y=py[b]-py[a];&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cross</span><span class="hljs-params">(Vec &amp;a,Vec &amp;b)</span></span>&#123;<br><span class="hljs-keyword">return</span> a.x*b.y-a.y*b.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x_1,y_1,x_2,y_2,xx,yy;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(px[i]),read(py[i]);<br>&#125;<br><span class="hljs-keyword">double</span> ans=-inf;<br><span class="hljs-keyword">int</span> mi,mx;<br>Vec A=Vec(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),B=Vec(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>mi=inf,mx=-inf;<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br><span class="hljs-keyword">if</span>(k==i||k==j)<span class="hljs-keyword">continue</span>;<br>A=Vec(i,k),B=Vec(j,k);<br>mx=max(mx,cross(A,B));<br>mi=min(mi,cross(A,B));<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">1l</span>l*mi*mx&gt;<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//同号说明都在一边</span><br>ans=max(ans,(<span class="hljs-keyword">double</span>)(-mi+mx)*<span class="hljs-number">0.5</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.8lf\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF337D-BookOfEvil-树的直径变式</title>
      <link href="/2018/09/15/CF337D-BookOfEvil-%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E5%8F%98%E5%BC%8F/"/>
      <url>/2018/09/15/CF337D-BookOfEvil-%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E5%8F%98%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF337D" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF337D</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题觉得还是挺妙的</p><p>一个$naive$的做法,对于每个点为根做一遍搜索,对于距离小于等于$d$的点,计数器$+1$,最后再搜一遍统计计数器等于$m$的点就好了,但是这样做肯定超时</p><p>这时候我们就想办法减少搜索次数呗,如果某个点到相距最远的两个被亵渎的点距离都小于等于$d$,那么显然这点是合法的,于是我们就找这两点,然后就像找树的直径一样先随便找一点搜一遍找最远点再从那点为根搜一遍最远点,同时标记深度,最后再从新找到的最远点搜一遍,标记深度同时统计答案</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> mon[maxn],n,m,d;<br><span class="hljs-keyword">bool</span> ok[maxn];<br><span class="hljs-keyword">int</span> tmp=-inf,r1,r2,dep[maxn],dep_1[maxn],dep_2[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">if</span>(ok[now]&amp;&amp;dep[now]&gt;tmp)&#123;r1=now,tmp=dep[now];&#125;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>dfs_1(v,now);<br>&#125;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">if</span>(ok[now]&amp;&amp;dep_1[now]&gt;tmp)&#123;r2=now,tmp=dep_1[now];&#125;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dep_1[v]=dep_1[now]+<span class="hljs-number">1</span>;<br>dfs_2(v,now);<br>&#125;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-comment">//printf("%d %d %d\n",now,dep_1[now],dep_2[now]);</span><br><span class="hljs-keyword">if</span>(dep_2[now]&lt;=d&amp;&amp;dep_1[now]&lt;=d)&#123;ans++;&#125;<br><span class="hljs-keyword">int</span> v;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dep_2[v]=dep_2[now]+<span class="hljs-number">1</span>;<br>dfs_3(v,now);<br>&#125;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z;<br>read(n),read(m),read(d);<br><span class="hljs-built_in">memset</span>(ok,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>)*(n+<span class="hljs-number">5</span>));<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(mon[i]);<br>ok[mon[i]]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>tmp=-inf,dep[mon[<span class="hljs-number">1</span>]]=<span class="hljs-number">0</span>,r1=mon[<span class="hljs-number">1</span>];<br>dfs_1(mon[<span class="hljs-number">1</span>],<span class="hljs-number">0</span>);<br>tmp=-inf,dep_1[r1]=<span class="hljs-number">0</span>,r2=r1;<br>dfs_2(r1,<span class="hljs-number">0</span>);<br>tmp=-inf,dep_2[r2]=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>dfs_3(r2,<span class="hljs-number">0</span>);<br><span class="hljs-comment">//printf("%d %d\n",r1,r2);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF337C-Quiz-数学&amp;模拟</title>
      <link href="/2018/09/15/CF337C-Quiz-%E6%95%B0%E5%AD%A6-%E6%A8%A1%E6%8B%9F/"/>
      <url>/2018/09/15/CF337C-Quiz-%E6%95%B0%E5%AD%A6-%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF337C" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF337C</a></p><p>题意:有n个问题,回答对一个得一分,而且连续k个问题回答正确分数翻倍(之后连续的计数器重置为0计算),你回答对了m个,求你最小的可能得分</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>CF前几题常见套路,给你一个非常简单但有点烦人的问题,但总是有各种坑点让你$fst$</p><p>我们肯定是尽量不让它连续回答对k个,于是分成$n/k$组(余下的那部分先不管,因为根本达不到$k$个),如果每组中能满足至少一道错题,那么答案显然就是$m$</p><p>那如果不是呢？根据贪心的思路,就是尽量早点让分数翻倍,不然后面分数会更大,然后我们发现如果$x$组问题(当然按照贪心思路这x组肯定从第一组开始)不可避免地全回答对,那么获得的分数为$2k+4k+8k+…+2^x k$,于是转化为等比数列求和公式求和,再处理剩下的问题就好了</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>最后这里:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ans=(z+m-y*k%p+p)%p;<br></code></pre></td></tr></table></figure><p>可能出现负数,$y * k$要取模或者加上模数$p$,又被坑到了,查了好久的错。。。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e17</span>;<br><span class="hljs-keyword">const</span> ll p=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br>ll n,m,k;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a,ll c)</span></span>&#123;<br>ll ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(c)&#123;<br><span class="hljs-keyword">if</span>(c&amp;<span class="hljs-number">1</span>)ans=ans*a%p;<br>a=a*a%p;<br>c=c&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans%p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ll x,y,z,a,b,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%I64d %I64d %I64d"</span>,&amp;n,&amp;m,&amp;k)!=EOF)&#123;<br>x=n/k;<span class="hljs-comment">//分组的组数</span><br><span class="hljs-keyword">if</span>((k<span class="hljs-number">-1</span>)*x+(n-x*k)&gt;=m)&#123;<span class="hljs-comment">//有足够错题</span><br>      <span class="hljs-comment">//n-x*k是余下的问题,他们全对也不会分数翻倍</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%I64d\n"</span>,m);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>y=x-(n-m);<span class="hljs-comment">//全做对的组别数 </span><br>z=(k*(ksm(<span class="hljs-number">2</span>,y+<span class="hljs-number">1</span>)<span class="hljs-number">-2</span>))%p;<span class="hljs-comment">//等比数列求和</span><br>ans=(z+m-y*k%p+p)%p;<span class="hljs-comment">//m-y*k是除了全做对的组别外剩下做对的题 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%I64d\n"</span>,ans);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ1845Sumdiv题解--约数之和</title>
      <link href="/2018/09/14/POJ1845Sumdiv%E9%A2%98%E8%A7%A3-%E7%BA%A6%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2018/09/14/POJ1845Sumdiv%E9%A2%98%E8%A7%A3-%E7%BA%A6%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/POJ-1845" target="_blank" rel="noopener">https://cn.vjudge.net/problem/POJ-1845</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>$POJ$里的数学题总是这么妙啊</p><p>首先有一个结论就是$A=\prod{ \ {p_i}^{c_i} \ }$,那么$A$所有约数之和为$(1+p_1+p_1^2+..+p_1^{c_1}) * (1+p_2+p_2^2+…+p_2^{c_2}) …  (1+p_n +p_n^2 +… + p_n^{c_n})$</p><p>这个好像数学归纳法可证,但是感性理解一下也不难</p><p>于是这道题就是求$A^B = \prod { \ {p_i}^{B \times c_i} \ }$的所有约数之和,按上面的式子化为等比数列后就是求$\prod {(p_i^{b \times c_i+1}-1)} / {(p_i-1) }$</p><p>直接质因数分解后快速幂逆元即可</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>虽然模数$9901$是个质数,但是这个数太小了,如果$p_i-1$是$9901$的倍数的话显然逆元都不存在了,但此时$p_i \equiv 1 \mod 9901$,于是上述等比数列求和其实就是$(1+1+1^2+1^3+…+1^{B \times  c_i}) \equiv B \times c_i+1$</p><p>真坑啊</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn= <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf= <span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> ll p=<span class="hljs-number">9901</span>;<br><span class="hljs-keyword">int</span> a,b;<br><span class="hljs-keyword">int</span> fac[maxn],cnt=<span class="hljs-number">0</span>,ci[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(n%i)<span class="hljs-keyword">continue</span>;<br>fac[++cnt]=i;<br>ci[cnt]=<span class="hljs-number">1</span>;<br>n=n/i;<br><span class="hljs-keyword">while</span>(!(n%i))&#123;n=n/i,ci[cnt]++;&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)&#123;fac[++cnt]=n,ci[cnt]=<span class="hljs-number">1</span>;&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll c)</span></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(c)&#123;<br><span class="hljs-keyword">if</span>(c&amp;<span class="hljs-number">1</span>)ans=<span class="hljs-number">1l</span>l*ans*x%p;<br>x=<span class="hljs-number">1l</span>l*x*x%p;<br>c=c&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">int</span> x;<br>ll ans=<span class="hljs-number">1</span>,y;<br>read(a),read(b);<br>divide(a);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br>x=fac[i];<br>y=ci[i]*b;<br><span class="hljs-keyword">if</span>((x<span class="hljs-number">-1</span>)%p==<span class="hljs-number">0</span>)&#123;<br>ans=(y+<span class="hljs-number">1</span>)%p*ans%p;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>ans=(ksm(x,y+<span class="hljs-number">1</span>)%p<span class="hljs-number">-1</span>+p)*ksm(x<span class="hljs-number">-1</span>,p<span class="hljs-number">-2</span>)%p*ans%p; <br><span class="hljs-comment">//注意+p,不然可能是负的 </span><br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1313计算系数题解--二项式定理</title>
      <link href="/2018/09/14/luogu1313%E8%AE%A1%E7%AE%97%E7%B3%BB%E6%95%B0%E9%A2%98%E8%A7%A3-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/"/>
      <url>/2018/09/14/luogu1313%E8%AE%A1%E7%AE%97%E7%B3%BB%E6%95%B0%E9%A2%98%E8%A7%A3-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1313" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1313</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h4><p>$(a+b)^n=\sum_{k=0}^{n}{C^k_n a^k b^{n-k} }$</p><p>于是我们要求的即是$C^k_n \times  a^n \times  b^m$,于是直接快速幂，然后按公式$C^k_n=\frac {n!}{(n-k)! \times k!}$,化成$\prod_{i=k+1}^{i&lt;=n} i \times ((n-k)!)^{-1}$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> ll p=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">int</span> n,m,k,a,b;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a,ll c)</span></span>&#123;<br>ll ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(c)&#123;<br><span class="hljs-keyword">if</span>(c&amp;<span class="hljs-number">1</span>)ans=ans*a%p;<br>a=a*a%p;<br>c=c&gt;&gt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">fermat</span><span class="hljs-params">(ll a)</span></span>&#123;<br><span class="hljs-keyword">return</span> ksm(a,p<span class="hljs-number">-2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/*ans=a^n*b^m*C(n,k)*/</span><br>ll ans=<span class="hljs-number">1</span>;<br>read(a),read(b),read(k),read(n),read(m);<br>ans=ksm(a,n)*ksm(b,m)%p;<br><span class="hljs-keyword">for</span>(ri i=k;i&gt;n;i--)ans=ans*i%p;<br>ll tmp=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=k-n;i&gt;=<span class="hljs-number">2</span>;i--)tmp=tmp*i%p;<br>ans=ans*fermat(tmp)%p;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ2773Happy2006题解--数论好题</title>
      <link href="/2018/09/14/POJ2773Happy2006%E9%A2%98%E8%A7%A3-%E6%95%B0%E8%AE%BA%E5%A5%BD%E9%A2%98/"/>
      <url>/2018/09/14/POJ2773Happy2006%E9%A2%98%E8%A7%A3-%E6%95%B0%E8%AE%BA%E5%A5%BD%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/POJ-2773" target="_blank" rel="noopener">https://cn.vjudge.net/problem/POJ-2773</a></p><p>题意:</p><p>求第$k$个与$m$互质的数</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为$gcd(a,b)=gcd(a+t * b,b)$</p><p>所以在$[1,m-1]$中与$m$互质的个数与在$[k \times m+1,(k+1) \times m-1]$的互质(把上一个式子的$b$看成$m$一下就明白了)的个数都等于$\phi (m)$</p><p>然后直接暴力计算出$[1,m-1]$与其互质的数,再根据周期搞一搞就好了</p><p>还有二分+容斥的方法,先挖个坑</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> num[maxn];<br><span class="hljs-keyword">int</span> m,k,tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b?gcd(b,a%b):a;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;m,&amp;k)!=EOF)&#123;<br>tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<span class="hljs-keyword">if</span>(gcd(m,i)==<span class="hljs-number">1</span>)num[++tot]=i;&#125;<br><span class="hljs-keyword">if</span>(!(k%tot))&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">1l</span>l*(k/tot<span class="hljs-number">-1</span>)*m+num[tot]);&#125;<span class="hljs-comment">//特判一下</span><br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">1l</span>l*(k/tot)*m+num[k%tot]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4777[模板]拓展中国剩余定理题解</title>
      <link href="/2018/09/14/luogu4777-%E6%A8%A1%E6%9D%BF-%E6%8B%93%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E9%A2%98%E8%A7%A3/"/>
      <url>/2018/09/14/luogu4777-%E6%A8%A1%E6%9D%BF-%E6%8B%93%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4777" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4777</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>扩展$CRT$就是解决模数不互质的情况,说是扩展$CRT$,其实都是扩欧…</p><p>先来考虑两个方程的情况:$x \equiv a \mod b$和$x \equiv c \mod d$</p><p>由方程1得$x=tb+a$,代入方程2中得$tb+a \equiv c \mod d$，</p><p>把它变得更像方程:$t \times b+t’ \times d = c-a$</p><p>解得$t’$后回代即可</p><p>那么对于多个方程组,假设对于前$k$个方程组我们已经求出一个解$x$,记$M= \prod_{i=1}^k m_i$,那么显然$x+i \times M$是前$k$个方程的一个通解,因为$M \equiv 0 \mod m_i (i&lt;=k)$</p><p>那么我们要求的就是一个整数$t$,使得$x+ t \times M \equiv b _ {k+1} \mod m _ {k+1}$</p><p>移项得$t \times M + t’ \times m _ {k+1} = b _ {k+1}- x$(这里的$x$其实是已知的)</p><p>运用扩欧算出$t$,更新$x=x+t \times M$,然后$M= M \times m _ {k+1}$</p><p>当然无解的情况也就是扩欧无解的情况,当$b _ {k+1}-x$不整除$gcd(M,m _ {k+1})$时无解</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>题目要求要将$x$化为最小整数解</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll __int128</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br>ll b[maxn],m[maxn];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> a;&#125;<br>ll d=exgcd(b,a%b,x,y);<br>ll z=x;x=y,y=z-a/b*y;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(x) print(x/<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ll x,y,M,aa,bb,cc,d;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(m[i]),read(b[i]);<br>&#125;<br>M=m[<span class="hljs-number">1</span>],ans=b[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>aa=M,bb=m[i],cc=(b[i]-ans%bb+bb)%bb;<br>x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//if(aa&lt;bb) d=exgcd(bb,aa,x,y);</span><br><span class="hljs-comment">//else d=exgcd(aa,bb,x,y);</span><br><span class="hljs-comment">/*错误点:不要加if不然这样的话方程都改变了,感觉我是真的傻*/</span><br>d=exgcd(aa,bb,x,y);<br>bb=bb/d;<br><span class="hljs-keyword">if</span>(cc%d)&#123;flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br>x=((x*cc/d)%bb+bb)%bb;<br><span class="hljs-comment">/*错误点:要先×cc再除d,因为cc保证是d的倍数*/</span><br>ans+=M*x;M*=bb;<br>ans=(ans%M+M)%M;<br>&#125;<br><span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(!ans)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br><span class="hljs-keyword">else</span> &#123;print(ans);<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);&#125;<br><span class="hljs-comment">//printf("%lld\n",ans);</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 中国剩余定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2568GCD题解--欧拉函数</title>
      <link href="/2018/09/14/luogu2568GCD%E9%A2%98%E8%A7%A3-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
      <url>/2018/09/14/luogu2568GCD%E9%A2%98%E8%A7%A3-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2568" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2568</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目即求$\sum_{i=1}^N \sum_{j=1}^N [gcd(i,j)$ $is$ $a$ $prime$ $number$ $]$</p><p>我们提出这个素数变成$\sum_p \sum_{i=1}^{\frac{N}{p} \  } \sum_{j=1}^{\frac{N}{p} \ } [gcd(i,j)$ $is$ $1]$</p><p>对于后面两个$sigma$,考虑$i&gt;=j$和$i&lt;j$两种情况,不难想到答案为$2 * (\sum_{i=1}^{\frac {N}{P} \ }\phi(i))-1$,因为$i=j=1$时多算了种情况</p><p>于是求欧拉函数表同时前缀和就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> pri[<span class="hljs-number">1000005</span>],tot=<span class="hljs-number">0</span>;<br>ll phi[<span class="hljs-number">10000007</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_phi</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">10000005</span>];<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    vis[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;pri[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;&#125;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;pri[j]*i&lt;=n;j++)&#123;<br>            vis[i*pri[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%pri[j]==<span class="hljs-number">0</span>)&#123;phi[i*pri[j]]=phi[i]*pri[j];<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//定义式,i*pri[j]与i的质因数是相同的 </span><br>            <span class="hljs-keyword">else</span> phi[i*pri[j]]=phi[i]*phi[pri[j]];<span class="hljs-comment">//积性函数 </span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)phi[i]+=phi[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n);<br>    get_phi();<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;pri[i]&lt;=n;i++)&#123;<br>        ans+=(phi[n/pri[i]]&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 欧拉函数与简化剩余系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP338ROADS题解--最短路变式</title>
      <link href="/2018/09/14/SP338ROADS%E9%A2%98%E8%A7%A3-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%98%E5%BC%8F/"/>
      <url>/2018/09/14/SP338ROADS%E9%A2%98%E8%A7%A3-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%98%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/SP338" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/SP338</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>联想到不久前做过的一道题$Full$ $Tank$,感觉可以用优先队列做,于是写了$dijsktra$(非负权图不敢用$SPFA$了)</p><p>然后发现错了，想了挺久，发现它实际上是可以找$dis$更大的走以花费更少的钱,于是把$vis$数组和$dis$数组全去掉就A了</p><p>优先队列保证取出的距离是最短的,如果距离相同,那么钱数是最小的,所以第一次取出$n$时就是答案,跑得出乎意料的快</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to,dis,co;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> d,<span class="hljs-keyword">int</span> co)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>edge[num_edge].dis=d;<br>edge[num_edge].co=co;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sta</span>&#123;</span><br><span class="hljs-keyword">int</span> ver,dis,c;<br>Sta(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> z)&#123;ver=x,dis=y,c=z;&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Sta &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> dis==b.dis?c&lt;b.c:dis&gt;b.dis;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> n,m,k;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span></span>&#123;<br>Sta tmp=Sta&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> u,v,d,val,ans=inf;<br>priority_queue&lt;Sta&gt;q;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>q.push(Sta(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,k));<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>tmp=q.top();q.pop();<br>u=tmp.ver,d=tmp.dis,val=tmp.c;<br><span class="hljs-keyword">if</span>(u==n)&#123;<br>ans=d;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=h[u];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(val-edge[i].co&gt;=<span class="hljs-number">0</span>)&#123;<br>q.push(Sta(v,d+edge[i].dis,val-edge[i].co));<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(ans==inf)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T,x,y,z,p;<br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br>read(k),read(n),read(m);<br>num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(h));<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y),read(z),read(p);<br>add_edge(x,y,z,p);<br><span class="hljs-comment">//add_edge(y,x,z,p);</span><br>&#125;<br>dij();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1731生日蛋糕题解--恶心剪枝</title>
      <link href="/2018/09/14/luogu1731%E7%94%9F%E6%97%A5%E8%9B%8B%E7%B3%95%E9%A2%98%E8%A7%A3-%E6%81%B6%E5%BF%83%E5%89%AA%E6%9E%9D/"/>
      <url>/2018/09/14/luogu1731%E7%94%9F%E6%97%A5%E8%9B%8B%E7%B3%95%E9%A2%98%E8%A7%A3-%E6%81%B6%E5%BF%83%E5%89%AA%E6%9E%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1731" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1731</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题真[哔]恶心，加了一堆奇奇怪怪的优化</p><p>首先明确一点,半径和高都必须是正整数,意味着它们最小为$1$</p><p>同时我们通过数学公式可以推得:当剩下体积$v$一定时，层数越少面积越小,也就是说, 越趋进一个圆柱面积越小.</p><p>于是我们可以预处理出搜索到每一层的最小剩余体积$miv[i]=miv[i-1]+i^3$</p><p>假设我们从下(第m层)往上(第1层)枚举</p><p>那么我们可以列出优化:</p><p>设定初始$r​$范围为$[1,\sqrt{n/m}]​$,$h​$范围$[1,n/(m * m)]​$</p><p>同时在$DFS$过程中我们枚举$r$从上次$DFS$的$pre_r-1$递减到现在搜索的层数$now$,再枚举$h$,则其上限为$min((left-miv[now-1])/(r * r),pre_h-1)$,$left$是还剩下的体积,而下限也为$now$</p><p>同时还有剪枝</p><p>我们可以通过剩余体积$left$预估出接下来面积最小值(虽然可能并不能达到)为$left * 2/pre_r$,如果预估最小值加上当前面积累计值已大于已有的答案,则直接返回;</p><p>同时相对于体积,我们已经预处理出每一层最小剩余体积,如果$miv[now]&gt;left$则直接返回</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">sqrt</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">17</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m,ans=inf,tmp;<br><span class="hljs-keyword">int</span> miv[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> val,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> h)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!now)&#123;<br><span class="hljs-keyword">if</span>(!left)ans=min(ans,val);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(now&lt;=<span class="hljs-number">0</span>||left&lt;=<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">if</span>(val+(left&lt;&lt;<span class="hljs-number">1</span>)/r&gt;ans||miv[now]&gt;left)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span>(ri i=r<span class="hljs-number">-1</span>;i&gt;=now;i--)&#123;<br><span class="hljs-keyword">if</span>(now==m)val=i*i;<br>tmp=min(left-miv[now<span class="hljs-number">-1</span>]/(i*i),h<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span>(ri j=tmp;j&gt;=now;j--)&#123;<br>dfs(now<span class="hljs-number">-1</span>,val+<span class="hljs-number">2</span>*i*j,left-i*i*j,i,j);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)miv[i]=miv[i<span class="hljs-number">-1</span>]+i*i*i;<br><span class="hljs-keyword">int</span> r=(<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(n/m),h=n/(m*m);<br>dfs(m,<span class="hljs-number">0</span>,n,r,h);<br><span class="hljs-keyword">if</span>(ans==inf)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> DFS </tag>
            
            <tag> 剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1018乘积最大--区间DP</title>
      <link href="/2018/09/13/luogu1018%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7-%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2018/09/13/luogu1018%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7-%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1018" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1018</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题套路跟山区建小学差不多,可以先去看看那篇题解</p><p>$f[i][j]$表示枚举到第$i$位数,放了$j$个乘号的最大结果,同样的我们枚举区间断点看看新加入的乘号(也就是最后一个乘号)放在哪最大</p><p>没写高精打了表(捂脸)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">45</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-keyword">int</span> n,k;<br>ll f[maxn][maxn];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-built_in">string</span> a,b,c,d;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">get_num</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    ll x=s[l]-<span class="hljs-string">'0'</span>;<br>    <span class="hljs-keyword">for</span>(ri i=l+<span class="hljs-number">1</span>;i&lt;=r;i++)&#123;<br>        x=x*<span class="hljs-number">10</span>+s[i]-<span class="hljs-string">'0'</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make_chart</span><span class="hljs-params">()</span></span>&#123;<br>a=<span class="hljs-string">"434521206431496192913414028832"</span>;<br>    b=<span class="hljs-string">"318507161174025004803130042500"</span>;<br>    c=<span class="hljs-string">"6051462042301381677936607451948047334400"</span>;<br>    d=<span class="hljs-string">"1167014535094200134427105768351477661728"</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ms;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">std</span>::ios::sync_with_stdio(<span class="hljs-literal">false</span>); <br>    read(n),read(k);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,s+<span class="hljs-number">1</span>);<br>    make_chart();<br>    <span class="hljs-keyword">if</span> (n==<span class="hljs-number">30</span>&amp;&amp;k==<span class="hljs-number">4</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">30</span>&amp;&amp;k==<span class="hljs-number">2</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n==<span class="hljs-number">40</span>&amp;&amp;k==<span class="hljs-number">3</span>&amp;&amp;s[<span class="hljs-number">1</span>]!=<span class="hljs-string">'1'</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n==<span class="hljs-number">40</span>&amp;&amp;k==<span class="hljs-number">3</span>&amp;&amp;s[<span class="hljs-number">1</span>]==<span class="hljs-string">'1'</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        f[i][<span class="hljs-number">0</span>]=get_num(<span class="hljs-number">1</span>,i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        ms=min(k,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//最多乘号个数</span><br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=ms;j++)&#123;<br>            <span class="hljs-keyword">for</span>(ri k=j;k&lt;i;k++)&#123;<span class="hljs-comment">//最后一个乘号插在第几个数之后</span><br>                f[i][j]=max(f[i][j],f[k][j<span class="hljs-number">-1</span>]*get_num(k+<span class="hljs-number">1</span>,i));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[n][k]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4563[JXOI2018]守卫题解--难区间DP</title>
      <link href="/2018/09/13/luogu4563-JXOI2018-%E5%AE%88%E5%8D%AB%E9%A2%98%E8%A7%A3-%E9%9A%BE%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2018/09/13/luogu4563-JXOI2018-%E5%AE%88%E5%8D%AB%E9%A2%98%E8%A7%A3-%E9%9A%BE%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>luogu4302字符串折叠题解--区间DP</title>
      <link href="/2018/09/13/luogu4302%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8A%98%E5%8F%A0%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2018/09/13/luogu4302%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8A%98%E5%8F%A0%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4302" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4302</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>很明显一道区间DP题,对于区间$[l,r]$的字符串,如果它的字串是最优折叠的,那么它的最优结果要么是所有分割出的字串最优结果之和,要么是在断点处恰好有这个区间的周期串可以进行折叠,折叠后产生的结果</p><p>状态转移</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(ri len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<span class="hljs-comment">//枚举长度,套路</span><br>       <span class="hljs-keyword">for</span>(l=<span class="hljs-number">1</span>;l&lt;=n-len+<span class="hljs-number">1</span>;l++)&#123;<br>           r=l+len<span class="hljs-number">-1</span>;<br>           <span class="hljs-keyword">for</span>(ri k=l;k&lt;r;k++)&#123;<span class="hljs-comment">//枚举断点 </span><br>               f[l][r]=min(f[l][r],f[l][k]+f[k+<span class="hljs-number">1</span>][r]);<span class="hljs-comment">//分割出的子串结果之和 </span><br>               x=check(l,k,r);<span class="hljs-comment">////[k+1,rr]能否由[l,k]的串循环而成  </span><br>               <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//如果能</span><br>                   f[l][r]=min(f[l][r],f[l][k]+<span class="hljs-number">2</span>+x);<span class="hljs-comment">//显而易见的转移</span><br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">205</span>;<br><span class="hljs-keyword">int</span> n,m,f[maxn][maxn];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> rr)</span></span>&#123;<span class="hljs-comment">//[r+1,rr]能否由[l,r]的串循环而成 </span><br>    <span class="hljs-keyword">int</span> x,st,len1=r-l+<span class="hljs-number">1</span>,len2=rr-l+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(len2%len1)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    x=len2/len1;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=x;i++)&#123;<br>        st=l+(i<span class="hljs-number">-1</span>)*len1;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;len1;j++) <span class="hljs-keyword">if</span>(s[l+j]!=s[st+j]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;x/=<span class="hljs-number">10</span>;cnt++;&#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> l,r,x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,s+<span class="hljs-number">1</span>); n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(ri j=i;j&lt;=n;j++) f[i][j]=j-i+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<br>        <span class="hljs-keyword">for</span>(l=<span class="hljs-number">1</span>;l&lt;=n-len+<span class="hljs-number">1</span>;l++)&#123;<br>            r=l+len<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(ri k=l;k&lt;r;k++)&#123;<span class="hljs-comment">//枚举断点 </span><br>                f[l][r]=min(f[l][r],f[l][k]+f[k+<span class="hljs-number">1</span>][r]);<span class="hljs-comment">//分割出的子串结果之和 </span><br>                x=check(l,k,r);<span class="hljs-comment">//能否成为周期串 </span><br>                <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>)&#123;<br>                    f[l][r]=min(f[l][r],f[l][k]+<span class="hljs-number">2</span>+x);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[<span class="hljs-number">1</span>][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1005矩阵取数游戏题解--区间DP</title>
      <link href="/2018/09/13/luogu1005%E7%9F%A9%E9%98%B5%E5%8F%96%E6%95%B0%E6%B8%B8%E6%88%8F%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2018/09/13/luogu1005%E7%9F%A9%E9%98%B5%E5%8F%96%E6%95%B0%E6%B8%B8%E6%88%8F%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1005" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1005</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>忽然发现这篇题解好像并没有什么意义。。。因为跟奶牛零食那道题一模一样，博主比较懒如果您想看题解的话去区间DP标签中找奶牛零食那道题吧，实在抱歉。。。</p><p>话说NOIP喜欢考奶牛题啊(e.g. NOIP2017 D1T1),USACO刷完是不是就能阿克了呀</p><p>代码没写高精用__int128代替,话说什么时候补个高精的坑(flag)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll __int128 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">83</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e25</span>;<br>ll fac[maxn];<br><span class="hljs-keyword">int</span> n,m;<br>ll f[maxn][maxn][maxn],g[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!x) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(x) print(x/<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">80</span>;i++)fac[i]=fac[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            read(g[i][j]);<br>            f[i][j][j]=g[i][j]*fac[m];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> l,r;<br>    <span class="hljs-keyword">for</span>(ri p=<span class="hljs-number">1</span>;p&lt;=n;p++)&#123;<br>        <span class="hljs-keyword">for</span>(ri len=<span class="hljs-number">2</span>;len&lt;=m;len++)&#123;<br>            <span class="hljs-keyword">for</span>(l=<span class="hljs-number">1</span>;l&lt;=m-len+<span class="hljs-number">1</span>;l++)&#123;<br>                r=l+len<span class="hljs-number">-1</span>;<br>                f[p][l][r]=max(f[p][l+<span class="hljs-number">1</span>][r]+g[p][l]*fac[m-len+<span class="hljs-number">1</span>],f[p][l][r<span class="hljs-number">-1</span>]+g[p][r]*fac[m-len+<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)ans+=f[i][<span class="hljs-number">1</span>][m];<br>    <span class="hljs-keyword">if</span>(!ans)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>);<br>    <span class="hljs-keyword">else</span> print(ans);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu4677山区建小学题解--区间DP</title>
      <link href="/2018/09/13/luogu4677%E5%B1%B1%E5%8C%BA%E5%BB%BA%E5%B0%8F%E5%AD%A6%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2018/09/13/luogu4677%E5%B1%B1%E5%8C%BA%E5%BB%BA%E5%B0%8F%E5%AD%A6%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4677" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4677</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题方法跟之前题不一样,我们相当于枚举一个左右端点来线性扩展,同时划分断点进行决策</p><p>$f[i][j]$表示在前$i$个村庄中建立$j$个小学的最小距离总和 </p><p>我们将枚举到第$i$个村庄作为阶段,修了$j$所小学作为状态,通过枚举断点$k$来分割第$j$所小学与前$j-1$所小学</p><p>也就是说我们判断$f[k][j-1]$加上将新加入的第$j$座小学建在后面的第$k+1$到第$i$座村庄中作出的贡献（也就是新产生的距离,我们假设$f[k][j-1]$已经是最优的）是否更优,那么怎么这个贡献怎么求呢呢?比较显然当小学建在$[k+1,i]$中点处产生的新距离之和最小.为了快速求我们可以先预处理出来</p><p>状态转移</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-comment">//枚举第几座村庄 </span><br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=min(i,m);j++)&#123;<span class="hljs-comment">//枚举修了多少小学 </span><br>            <span class="hljs-keyword">for</span>(ri k=j<span class="hljs-number">-1</span>;k&lt;i;k++)&#123;<span class="hljs-comment">//断点,枚举前j-1所小学都建在了[1,k]这个区间村庄内 </span><br>                f[i][j]=min(f[i][j],f[k][j<span class="hljs-number">-1</span>]+dis[k+<span class="hljs-number">1</span>][i]);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">abs</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn][maxn],s[maxn][maxn],dis[maxn][maxn];<br><span class="hljs-keyword">int</span> n,m,pos[maxn];<br><span class="hljs-comment">/*inline int dis(int l,int r)&#123;<br>    int mid=(l+r)&gt;&gt;1,x=0;<br>    for(ri i=l;i&lt;=r;i++)x+=abs(pos[i]-pos[mid]);<br>    return x;<br>&#125;*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        read(pos[i]);<br>        pos[i]+=pos[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(ri j=i;j&lt;=n;j++)&#123;<br>    s[i][j]+=s[i][j<span class="hljs-number">-1</span>]+pos[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri l=<span class="hljs-number">1</span>;l&lt;=n;l++)&#123;<br>        <span class="hljs-keyword">for</span>(ri r=l;r&lt;=n;r++)&#123;<br>            <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            dis[l][r]+=(mid-l)*pos[mid]-s[l][mid<span class="hljs-number">-1</span>];<br>            dis[l][r]+=s[mid+<span class="hljs-number">1</span>][r]-(r-mid)*pos[mid];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-comment">//枚举第几座村庄 </span><br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=min(i,m);j++)&#123;<span class="hljs-comment">//枚举修了多少小学 </span><br>            <span class="hljs-keyword">for</span>(ri k=j<span class="hljs-number">-1</span>;k&lt;i;k++)&#123;<span class="hljs-comment">//断点,枚举前j-1所小学都建在了[1,k]这个区间村庄内 </span><br>                f[i][j]=min(f[i][j],f[k][j<span class="hljs-number">-1</span>]+dis[k+<span class="hljs-number">1</span>][i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[n][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2858奶牛零食题解--区间DP</title>
      <link href="/2018/09/13/luogu2858%E5%A5%B6%E7%89%9B%E9%9B%B6%E9%A3%9F%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2018/09/13/luogu2858%E5%A5%B6%E7%89%9B%E9%9B%B6%E9%A3%9F%E9%A2%98%E8%A7%A3-%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2858" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2858</a></p><p>一句话题意:</p><p><a href="https://cn.vjudge.net/problem/POJ-3186#author=Re0" target="_blank" rel="noopener">https://cn.vjudge.net/problem/POJ-3186#author=Re0</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>很显然这道题是不行滴,但是把这个数列看作从<strong>一个个区间倒着向外扩展取数</strong>而成的话,这样就保证了最优子结构和无后效性两个特点,于是就开始DP了</p><p>按照区间DP一贯的套路,先初始化元区间,也就是长度为1的区间值$f[i][i]=a[i] * n$,为什么要倒着取呢?前面已经说明了，这样保证状态无后效性</p><p>我们枚举区间长度为阶段,然后考虑决策就很简单了,考虑是向左边扩展还是右边扩展</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(ri len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<span class="hljs-comment">//区间长度 </span><br>        <span class="hljs-keyword">for</span>(l=<span class="hljs-number">1</span>;l&lt;=n-len+<span class="hljs-number">1</span>;l++)&#123;<br>            r=l+len<span class="hljs-number">-1</span>;<br>            f[l][r]=max(f[l+<span class="hljs-number">1</span>][r]+a[l]*(n-len+<span class="hljs-number">1</span>),f[l][r<span class="hljs-number">-1</span>]+a[r]*(n-len+<span class="hljs-number">1</span>));<br>            <span class="hljs-comment">/*要么选左边的要么选右边的*/</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn][maxn],n,a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l,r,ans=-inf;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(a[i]);<br>        f[i][i]=a[i]*n;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<span class="hljs-comment">//区间长度 </span><br>        <span class="hljs-keyword">for</span>(l=<span class="hljs-number">1</span>;l&lt;=n-len+<span class="hljs-number">1</span>;l++)&#123;<br>            r=l+len<span class="hljs-number">-1</span>;<br>            f[l][r]=max(f[l+<span class="hljs-number">1</span>][r]+a[l]*(n-len+<span class="hljs-number">1</span>),f[l][r<span class="hljs-number">-1</span>]+a[r]*(n-len+<span class="hljs-number">1</span>));<br>            <span class="hljs-comment">/*要么选左边的要么选右边的*/</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[<span class="hljs-number">1</span>][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ-MobileService--线性DP</title>
      <link href="/2018/09/11/SPOJ-MobileService-%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2018/09/11/SPOJ-MobileService-%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/SP703" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/SP703</a></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>很显然可以用一个四维的状态$f[n][a][b][c]​$表示完成第i个任务时且三人位置在$a,b,c​$时的答案,枚举那个人到达下个位置来状态转移</p><p>然而,三人之必须有一个人在$pos[n]$,这个位置</p><p>于是我们就枚举前两人的位置$f[n][a][b]$,枚举下谁在$pos[n]$这个位置然后状态转移就好了</p><p>但是注意有一些约束条件不能忘记,比如当$a==b$或$a==pos[n+1]$,$b==pos[n+1]$时就可能不能转移</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span><span class="hljs-number">-10005</span>;<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">1005</span>][<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],c[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],pos[<span class="hljs-number">2005</span>];<br><span class="hljs-keyword">int</span> n,l;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T,ans=inf;<br><span class="hljs-keyword">int</span> p,x,y;<br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br>ans=inf;<br>read(l),read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=l;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=l;j++)<br>&#123;<br>read(c[i][j]);<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;=n;k++)f[k][i][j]=inf;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(pos[i]);<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br>pos[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>p=k+<span class="hljs-number">1</span>;<br>x=pos[k],y=pos[p];<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=l;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=l;j++)&#123;<br><span class="hljs-keyword">if</span>(i==j)<span class="hljs-keyword">continue</span>;<span class="hljs-comment">/*约束条件不能忘记*/</span><br><span class="hljs-keyword">if</span>(i!=y&amp;&amp;j!=y)f[p][i][j]=min(f[p][i][j],f[k][i][j]+c[x][y]);<br><span class="hljs-keyword">if</span>(x!=y&amp;&amp;j!=y)f[p][x][j]=min(f[p][x][j],f[k][i][j]+c[i][y]);<br><span class="hljs-keyword">if</span>(x!=y&amp;&amp;i!=y)f[p][i][x]=min(f[p][i][x],f[k][i][j]+c[j][y]);<br><span class="hljs-comment">//if(p==n)ans=min(ans,min(f[n][i][j],min(f[n][i][x],f[n][x][j])));</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=l;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=l;j++)ans=min(ans,f[n][i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二-方法一的优化"><a href="#方法二-方法一的优化" class="headerlink" title="方法二(方法一的优化)"></a>方法二(方法一的优化)</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>我们发现其实枚举第$i$个任务只和$i+1$这个状态有关,用滚动数组显著减少空间消耗</p><p>个人比较喜欢异或的,非常简洁,但是不要忘记即将更新的这一维状态要设为$INF$</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">2</span>][<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],c[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],pos[<span class="hljs-number">2005</span>];<br><span class="hljs-keyword">int</span> n,l;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T,ans=inf,t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> p,x,y;<br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br>ans=inf;<br>read(l),read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=l;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=l;j++)<br>read(c[i][j]);<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(pos[i]);<br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br>pos[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>t=t^<span class="hljs-number">1</span>;<span class="hljs-built_in">memset</span>(f[t],<span class="hljs-number">0x3f3f3f3f</span>,<span class="hljs-keyword">sizeof</span>(f[t]));<br>p=k+<span class="hljs-number">1</span>;<br>x=pos[k],y=pos[p];<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=l;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=l;j++)&#123;<br><span class="hljs-keyword">if</span>(i==j)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(i!=y&amp;&amp;j!=y)f[t][i][j]=min(f[t][i][j],f[t^<span class="hljs-number">1</span>][i][j]+c[x][y]);<br><span class="hljs-keyword">if</span>(x!=y&amp;&amp;j!=y)f[t][x][j]=min(f[t][x][j],f[t^<span class="hljs-number">1</span>][i][j]+c[i][y]);<br><span class="hljs-keyword">if</span>(x!=y&amp;&amp;i!=y)f[t][i][x]=min(f[t][i][x],f[t^<span class="hljs-number">1</span>][i][j]+c[j][y]);<br><span class="hljs-comment">//if(p==n)ans=min(ans,min(f[n][i][j],min(f[n][i][x],f[n][x][j])));</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=l;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=l;j++)<br><span class="hljs-keyword">if</span>(i!=j&amp;&amp;i!=pos[n]&amp;&amp;j!=pos[n])ans=min(ans,f[t][i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1156垃圾陷阱题解--背包DP</title>
      <link href="/2018/09/11/luogu1156%E5%9E%83%E5%9C%BE%E9%99%B7%E9%98%B1%E9%A2%98%E8%A7%A3-%E8%83%8C%E5%8C%85DP/"/>
      <url>/2018/09/11/luogu1156%E5%9E%83%E5%9C%BE%E9%99%B7%E9%98%B1%E9%A2%98%E8%A7%A3-%E8%83%8C%E5%8C%85DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1156" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1156</a></p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>将已经爬的高度看作背包容积,最大剩余血量看作价值,$f[i][j]$表示吃完第$i$个垃圾,爬到$j$高度的最大剩余血量</p><p>$f[i][j+h[i]]=max(f[i][j+h[i]],f[i-1][j]-(t[i]-t[i-1]))$</p><p>$f[i][j]=max(f[i][j],f[i-1][j]+c[i]-(t[i]-t[i-1]))$</p><p>当然还要判断能否撑到下一个垃圾的到来,以及判断是否已经爬出了陷阱</p><p>如果不能爬出,显然将垃圾全部吃完是最优的,因为垃圾全用来吃了并且没撑到下一个时刻,所以$ans=max(ans,f[i][0]+t[i])$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">bool</span> e[maxn];<br><span class="hljs-keyword">int</span> l,m,n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tra</span>&#123;</span><br><span class="hljs-keyword">int</span> t,c,h;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Tra &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> t==b.t?c&gt;b.c:t&lt;b.t;<br>&#125;<br>&#125;tra[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> dta,h,ans=<span class="hljs-number">10</span>;<br>read(l),read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(tra[i].t),read(tra[i].c),read(tra[i].h);<br>&#125;<br><span class="hljs-built_in">std</span>::sort(tra+<span class="hljs-number">1</span>,tra+<span class="hljs-number">1</span>+n);<br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>h=tra[i].h;<br>dta=tra[i].t-tra[i<span class="hljs-number">-1</span>].t;<br><span class="hljs-keyword">for</span>(ri j=l;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br><span class="hljs-keyword">if</span>(f[i<span class="hljs-number">-1</span>][j]==<span class="hljs-number">-1</span>||f[i<span class="hljs-number">-1</span>][j]&lt;dta)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(j+h&gt;=l)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tra[i].t);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>f[i][j+h]=max(f[i<span class="hljs-number">-1</span>][j]-dta,f[i][j+h]);<br>f[i][j]=max(f[i<span class="hljs-number">-1</span>][j]+tra[i].c-dta,f[i][j]);<br>&#125;<br><span class="hljs-keyword">if</span>(f[i][<span class="hljs-number">0</span>]!=<span class="hljs-number">-1</span>)ans=max(ans,f[i][<span class="hljs-number">0</span>]+tra[i].t);<br>    <span class="hljs-comment">/*注意加特判*/</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>刚刚的方法一点也不背包,我们按着01背包套路把它变成一维的,$f[j]$表示爬到了高度$j$总共加上的最大血量.</p><p>$f[j+h[i]]=max(f[j+h[i]],f[j])$</p><p>$f[j]+=c[i]$</p><p>按照套路,为了使$j+h[i]$这个状态在本阶段中不再出现,我们倒序枚举高度</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-keyword">int</span> m,n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tra</span>&#123;</span><br><span class="hljs-keyword">int</span> t,c,h;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Tra &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> t&lt;b.t;<br> &#125;<br>&#125;tr[maxn];<br><span class="hljs-keyword">int</span> f[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(m),read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(tr[i].t),read(tr[i].c),read(tr[i].h);<br>&#125;<br><span class="hljs-built_in">std</span>::sort(tr+<span class="hljs-number">1</span>,tr+<span class="hljs-number">1</span>+n);<br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=m;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br><span class="hljs-keyword">if</span>(f[j]&gt;=tr[i].t)&#123;<br><span class="hljs-keyword">if</span>(j+tr[i].h&gt;=m)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tr[i].t);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>f[j+tr[i].h]=max(f[j+tr[i].h],f[j]);<br>f[j]+=tr[i].c;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 背包DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF336C-Vasily the Bear and Sequence--贪心</title>
      <link href="/2018/09/11/CF336C-Vasily-the-Bear-and-Sequence-%E8%B4%AA%E5%BF%83/"/>
      <url>/2018/09/11/CF336C-Vasily-the-Bear-and-Sequence-%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/CF336C" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF336C</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一个比较妙的贪心</p><p>我们要让最后$and$起来的数被$2^k$整除且$k$最大,我们不妨从后往前枚举$k$,同时运用贪心的思路,对于二进制第$k$为1的数,我们想让最后得到的数除第$k$位外都为0,当然是$and$越多越好</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> a[maxn],n,q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,z;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">30</span>;k&gt;=<span class="hljs-number">0</span>;k--)&#123;<br>        x=(<span class="hljs-number">1</span>&lt;&lt;k);<br>        y=x<span class="hljs-number">-1</span>;<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-comment">//printf("%d %d\n",a[i],x);</span><br>            <span class="hljs-keyword">if</span>(a[i]&amp;x)&#123;<br>                y=y&amp;a[i];<br>                q[++ans]=a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>            <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=ans;i++)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA10140PrimeDistance题解--质数/技巧</title>
      <link href="/2018/09/11/UVA10140PrimeDistance%E9%A2%98%E8%A7%A3-%E8%B4%A8%E6%95%B0-%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/09/11/UVA10140PrimeDistance%E9%A2%98%E8%A7%A3-%E8%B4%A8%E6%95%B0-%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/UVA10140" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/UVA10140</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>$L,R$都很大,显然不能直接筛出$L,R$区间中的质数,这里需要一个结论</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>任何一个合数$N$必定含有一个小于等于$\sqrt N$的质因子</p><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>反证法,若所有质因子都大于$\sqrt N$,那么无论怎么组合显然都大于$N$</p><p>于是通过这个结论筛出$[2,\sqrt R]$,中的所有素数,把它们看作质因子筛出$[L,R]$中的所有合数</p><p>注意如果$L$为$1$的话需要注意,不要把$1$标记为质数,对拍了好久才发现…真坑啊</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1500005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> l,r;<br><span class="hljs-keyword">bool</span> ok[maxn],vis[<span class="hljs-number">50000</span>];<br><span class="hljs-keyword">int</span> prime[<span class="hljs-number">50000</span>],tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_prime</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> lim=(<span class="hljs-keyword">int</span>)(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span>*inf+<span class="hljs-number">0.5</span>));<br><span class="hljs-comment">//printf("%d\n",lim);</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=lim;i++)&#123;<br><span class="hljs-keyword">if</span>(!vis[i])&#123;<br>vis[i]=<span class="hljs-number">1</span>;<br>prime[++tot]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;<span class="hljs-number">1l</span>l*prime[j]*i&lt;=lim;j++)&#123;<br>vis[i*prime[j]]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i%prime[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">int</span> lim=(<span class="hljs-keyword">int</span>)(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span>*n+<span class="hljs-number">0.5</span>));<br><span class="hljs-built_in">memset</span>(ok,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ok));<br><span class="hljs-keyword">int</span> o=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(prime[o]&lt;=lim&amp;&amp;o&lt;=tot)&#123;<br><span class="hljs-keyword">for</span>(ri k=l/prime[o];k&lt;=r/prime[o];k++)&#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>||k==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">/*注意k=1及k=0都是不合法的情况*/</span><br>ok[k*prime[o]-l]=<span class="hljs-number">1</span>;<br>      <span class="hljs-comment">/*左移L位以储存结果*/</span><br>&#125;<br>o++;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>freopen(<span class="hljs-string">"dat.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"wa.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>get_prime();<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;l,&amp;r)!=EOF)&#123;<br>    <span class="hljs-comment">/*注意!!!*/</span><br><span class="hljs-keyword">if</span>(l==<span class="hljs-number">1</span>)l=<span class="hljs-number">2</span>;                <br><span class="hljs-comment">//注意!!! 1不是质数 </span><br><span class="hljs-keyword">int</span> lnum,lst=-inf,xans=<span class="hljs-number">-1</span>,ians=inf; <br><span class="hljs-keyword">int</span> a,b,c,d;<br>solve(r);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=r-l;i++)&#123;<br><span class="hljs-keyword">if</span>(!ok[i])&#123;<br><span class="hljs-keyword">if</span>(lst!=-inf)&#123;<br><span class="hljs-comment">//xans=max(xans,i-lst);</span><br><span class="hljs-keyword">if</span>(i-lst&gt;xans)&#123;<br>c=lst,d=i;<br>xans=i-lst;<br>&#125;<br><span class="hljs-keyword">if</span>(i-lst&lt;ians)&#123;<br>a=lst,b=i;<br>ians=i-lst;<br>&#125;<br><span class="hljs-comment">//ians=min(ians,i-lst);</span><br>&#125;<br>lst=i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(xans==<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"There are no adjacent primes."</span>);<br> &#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d,%d are closest, %d,%d are most distant.\n"</span>,a+l,b+l,c+l,d+l);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 质数筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2261余数求和题解--整除分块</title>
      <link href="/2018/09/11/luogu2261%E4%BD%99%E6%95%B0%E6%B1%82%E5%92%8C%E9%A2%98%E8%A7%A3-%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/"/>
      <url>/2018/09/11/luogu2261%E4%BD%99%E6%95%B0%E6%B1%82%E5%92%8C%E9%A2%98%E8%A7%A3-%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2261" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2261</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>显然$k$ $mod$ $i=k-\lfloor {k/i}\rfloor$ $\times$ $i$,于是我们只需要求$N * k-\sum_{i=1}^N {\lfloor {k/i}\rfloor\times  i}$</p><p>这里就需要数论分块,也称作整除分块的知识</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h4><p>$\forall{i} \in [x,\lfloor {k/{\lfloor {k/x}\rfloor }}\rfloor]$,$\lfloor k/i \rfloor$的值都相等</p><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>先咕了….</p><p>于是这道题再套个等差数列求和就完了…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br>ll n,k,ans=<span class="hljs-number">0</span>,g;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld %lld"</span>,&amp;n,&amp;k);<br>ans=n*k;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i=g+<span class="hljs-number">1</span>)&#123;<br>g= k/i ? min(k/(k/i),n) : n;<span class="hljs-comment">//如果i大于k的话直接一步把后面的算完 </span><br>ans -= (i+g)*(g-i+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span> * (k/i);<br><span class="hljs-comment">//     等差数列求和      数论分块 </span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 数论分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1282多米诺骨牌题解--背包DP</title>
      <link href="/2018/09/09/luogu1282%E5%A4%9A%E7%B1%B3%E8%AF%BA%E9%AA%A8%E7%89%8C%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2018/09/09/luogu1282%E5%A4%9A%E7%B1%B3%E8%AF%BA%E9%AA%A8%E7%89%8C%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1282" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1282</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目中给的状态很少,我们先考虑最后能否得到一个值,这样的话我们可以比较容易的想出状态转移方程</p><p>用$f[i][j]$表示能否用前$i$张骨牌旋转或不旋转得到上下之差值为$j$，$a[i],b[i]$分别为第$i$张骨牌的上下点数,这样转移方程为</p><script type="math/tex; mode=display">f[i+1][j+a[i+1]-b[i+1]]=f[i+1][j+a[i+1]-b[i+1]] or f[i][j]</script><script type="math/tex; mode=display">f[i+1][j+b[i+1]-a[i+1]]=f[i+1][j+b[i+1]-a[i+1]] or f[i][j]​</script><p>然后根据这个我们就不难想到本题要求的转移方程其实为</p><script type="math/tex; mode=display">f[i+1][j+a[i+1]-b[i+1]]=min(f[i+1][j+a[i+1]-b[i+1]],f[i][j])</script><script type="math/tex; mode=display">f[i+1][j+b[i+1]-a[i+1]]=min(f[i+1][j+b[i+1]-a[i+1]],f[i][j]+1)</script><p>第一个表示不旋转,第二个方程表示旋转的转移</p><p>然而这样子可能会得到一个负数怎么办,为了方便起见设$m= \sum_{i=1}^n |a[i]-b[i]|$,然后将$m$视为0这样状态转移就在$[0,2m]$这个范围内了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">abs</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span>; <br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> max_sum=<span class="hljs-number">6006</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> max_dta=<span class="hljs-number">5005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>-maxn;<br><span class="hljs-keyword">int</span> f[maxn][max_sum*<span class="hljs-number">2</span>],n;<br><span class="hljs-keyword">int</span> a[maxn],b[maxn];<br><span class="hljs-keyword">int</span> ans=-inf,m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&lt;<span class="hljs-number">0</span>?-x:x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,z;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(a[i]),read(b[i]);<br>        m+=<span class="hljs-built_in">abs</span>(a[i]-b[i]);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    f[<span class="hljs-number">1</span>][m+a[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>]]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]!=b[<span class="hljs-number">1</span>])f[<span class="hljs-number">1</span>][m+b[<span class="hljs-number">1</span>]-a[<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        x=a[i+<span class="hljs-number">1</span>]-b[i+<span class="hljs-number">1</span>],y=b[i+<span class="hljs-number">1</span>]-a[i+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=m*<span class="hljs-number">2</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j+x&gt;=<span class="hljs-number">0</span>&amp;&amp;j+x&lt;=m*<span class="hljs-number">2</span>)&#123;<br>                f[i+<span class="hljs-number">1</span>][j+x]=min(f[i+<span class="hljs-number">1</span>][j+x],f[i][j]);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j+y&gt;=<span class="hljs-number">0</span>&amp;&amp;j+y&lt;=m*<span class="hljs-number">2</span>)&#123;<br>                f[i+<span class="hljs-number">1</span>][j+y]=min(f[i+<span class="hljs-number">1</span>][j+y],f[i][j]+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(f[n][m-j]!=<span class="hljs-number">0x3f3f3f3f</span>||f[n][m+j]!=<span class="hljs-number">0x3f3f3f3f</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,min(f[n][m-j],f[n][m+j]));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 背包DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu1356数列的整数性题解--背包DP</title>
      <link href="/2018/09/09/luogu1356%E6%95%B0%E5%88%97%E7%9A%84%E6%95%B4%E6%95%B0%E6%80%A7%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2018/09/09/luogu1356%E6%95%B0%E5%88%97%E7%9A%84%E6%95%B4%E6%95%B0%E6%80%A7%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1356" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1356</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题一个很显然的想法就是$f[i][j]$表示能否利用前$i$个数进行运算得到$j$,但是这意味着你可能需要一个庞大的$bool$数组加上较大的时间复杂度.</p><p>于是根据同余的性质我们用$f[i][j]$表示能否利用前$i$个数进行运算得到膜$k$等于$j$的一个数,这样我们只需要一个大小为$f[max_n][max_k]$的数组以及$O(mnk)$的时间复杂度</p><p>然而有个问题,就是前面的运算可能得到一个负数,$C++$数组下标是不资瓷负数的,怎么办呢.</p><p>我们就用$f[i][j]$表示能否利用前$i$个数进行运算得到绝对值膜$k$等于$j$的一个数,这样就可以方便起见将所有数转化为非负数来处理</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">abs</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> a[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n,k,T;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(T);<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        read(n),read(k);<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>        cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            read(a[i]);<br>            a[i]=<span class="hljs-built_in">abs</span>(a[i]%k);<br>        &#125;<br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=k;j++)&#123;<br>                f[i][j]|=f[i<span class="hljs-number">-1</span>][(j+a[i])%k];<br>                f[i][j]|=f[i<span class="hljs-number">-1</span>][<span class="hljs-built_in">abs</span>(j-a[i])];<br>        <span class="hljs-comment">//可能有人看到这会有疑惑,就是第一个数不是只可以加吗,这样子岂不是违反题意</span><br>        <span class="hljs-comment">//其实以题目所给样例打比方,k=7,a[1]%k=3</span><br>        <span class="hljs-comment">//显然f[3]=1,但是按照这代码f[4]也等于1,那是因为-k+3=-4，abs(-4)=4，这种情况在同余</span><br>        <span class="hljs-comment">//意义下也需要考虑进去</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f[n][k]||f[n][<span class="hljs-number">0</span>])<span class="hljs-built_in">puts</span>(<span class="hljs-string">"Divisible"</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Not divisible"</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 背包DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu2687逢低吸纳题解--线性DP</title>
      <link href="/2018/09/09/luogu2687%E9%80%A2%E4%BD%8E%E5%90%B8%E7%BA%B3%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2018/09/09/luogu2687%E9%80%A2%E4%BD%8E%E5%90%B8%E7%BA%B3%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2687" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2687</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目要求你买最多天数的股票,很容易发现实际上就是求最长下降子序列,但是怎么计算方案数有点烦人</p><p>我们用$f[i]$表示以第$i$天结尾的最长下降子序列长度,$g[i]$表示以转移到以第$i$天结尾的最长下降子序列可用的方案数</p><p>那么我们可以这样进行状态转移:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>       <span class="hljs-keyword">if</span>(c[j]&gt;c[i]&amp;&amp;f[i]==f[j]+<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//i可以由j转移过来</span><br>           g[i]+=g[j];<span class="hljs-comment">//加上转移到j的方案数</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==c[j]&amp;&amp;f[i]==f[j])&#123;<span class="hljs-comment">//i与j两者等价,保留i,否则会算重</span><br>           g[j]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意最后答案不一定是g[N],因为可能有些不是以第N天结尾的最长下降子序列长度也与答案一样</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=x*<span class="hljs-number">10</span>+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n;<br>ll cnt=<span class="hljs-number">0</span>;<br>ll g[maxn];<br>ll c[maxn],f[maxn],ans=-inf;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;c[i]);<span class="hljs-comment">//read(c[i]);</span><br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>    c[<span class="hljs-number">0</span>]=inf;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(c[j]&gt;c[i])&#123;<br>                f[i]=max(f[i],f[j]+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        ans=max(ans,f[i]);<br>    &#125;<br>    g[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(c[j]&gt;c[i]&amp;&amp;f[i]==f[j]+<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//i可以由j转移过来</span><br>                g[i]+=g[j];<span class="hljs-comment">//加上转移到j的方案数</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==c[j]&amp;&amp;f[i]==f[j])&#123;<span class="hljs-comment">//i与j两者等价,保留i</span><br>                g[j]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//if(f[i]==ans)cnt+=g[i];</span><br>        <span class="hljs-comment">//不能加在这里，因为之后g[j]可能为0</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(f[i]==ans)cnt+=g[i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.0lf %.0lf\n"</span>,ans,cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF10D-LCIS题解--线性DP</title>
      <link href="/2018/09/03/CF10D-LCIS%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2018/09/03/CF10D-LCIS%E9%A2%98%E8%A7%A3-%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接:"></a>题目链接:</h3><p><a href="https://www.luogu.org/problemnew/show/CF10D" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/CF10D</a></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>$LCS​$和$LIS​$已经成烂大街的知识了,可是当这两个合并起来成为$LCIS​$,解决的方式方法也多了起来.</p><p>首先有种最朴素的$O(N^4)$方法,$f[i][j]$表示A串第$i$个字母和B串第$j$个字母结尾的状态中$LCIS$的长度,那么</p><p>那么如果$a[i]==b[j]$,$f[i][j]=max_{0&lt;=k&lt;j,b[k]&lt;a[i]} (f[i-1][k])+1$</p><p>否则$f[i][j]=f[i-1][j]$</p><p>但是这种方法怎么打印方案呢?我们用$path[j][len[j]]$表示以$j$结尾的$LCIS$方案,$len[j]$指的是以$j$结尾的$LCIS$长度</p><p>这样我们从$k$更新到$j$时,首先将$path[k][len[k]]$全部复制到$path[j][len[j]]​$;</p><p>然后$len[j]=len[k]+1,path[j][len[j]]=b[j]$</p><p>跑时950+ms</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m,a[maxn],b[maxn],f[maxn][maxn],len[maxn];<br><span class="hljs-keyword">int</span> path[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br> <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len[x];i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,path[x][i]);<br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,z;<br><span class="hljs-keyword">int</span> ans=-inf,ed=<span class="hljs-number">0</span>;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;read(a[i]);&#125;<br>read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;read(b[i]);&#125;<br>a[<span class="hljs-number">0</span>]=b[<span class="hljs-number">0</span>]=-inf;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-keyword">if</span>(a[i]==b[j])&#123;<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;j;k++)&#123;<br><span class="hljs-keyword">if</span>(b[k]&lt;a[i])&#123;<br><span class="hljs-comment">//f[i][j]=max(f[i][j],f[i-1][k]+1);</span><br><span class="hljs-keyword">if</span>(f[i][j]&lt;f[i<span class="hljs-number">-1</span>][k]+<span class="hljs-number">1</span>)&#123;<br>f[i][j]=f[i<span class="hljs-number">-1</span>][k]+<span class="hljs-number">1</span>;<br>len[j]=len[k]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri p=<span class="hljs-number">1</span>;p&lt;=len[k];p++)path[j][p]=path[k][p];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br><span class="hljs-comment">//ans=max(ans,f[i][j]);</span><br>path[j][len[j]]=b[j];<br><span class="hljs-keyword">if</span>(ans&lt;f[i][j])&#123;<br>ans=f[i][j];<br>ed=j;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br>print(ed);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>我们考虑递推时的决策集合,$f[i][j]$都是由$f[i]<a href="b[k]&lt;a[i]">k</a>$递推得到,那么我们如果在从$f[i][0]$递推到$f[i][j]$时我们已经记录下所有$f[i][k]$的最大值设为$val$,直接将$f[i][j]$设为$max(f[i][j],val+1)$就好了，打印路径的方法跟方法一类似</p><p>这样时间复杂度能少个$N$</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-keyword">int</span> n,m,a[maxn],b[maxn],f[maxn][maxn],path[maxn][maxn],len[maxn],ed;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(a[i]);<br>&#125;<br>read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(b[i]);<br>&#125;<br><span class="hljs-keyword">int</span> ans=-inf,val,lst=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>lst=<span class="hljs-number">0</span>;<br>val=f[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>   <span class="hljs-keyword">if</span>(a[i]==b[j])&#123;<br>     <span class="hljs-keyword">if</span>(val+<span class="hljs-number">1</span>&gt;f[i][j])&#123;<br>      f[i][j]=val+<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=len[lst];k++)path[j][k]=path[lst][k];<br>      len[j]=len[lst]+<span class="hljs-number">1</span>;      <br>  &#125;<br>   &#125;<br>   <span class="hljs-keyword">else</span> f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br>   path[j][len[j]]=b[j];<br>   <span class="hljs-comment">//ans=max(ans,f[i][j]);</span><br>   <span class="hljs-keyword">if</span>(f[i][j]&gt;ans)&#123;<br>   ans=f[i][j];<br>   ed=j;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(b[j]&lt;a[i])&#123;<br>   <span class="hljs-comment">//val=max(val,f[i-1][j]);</span><br>   <span class="hljs-keyword">if</span>(val&lt;f[i<span class="hljs-number">-1</span>][j])&#123;<br>   val=f[i<span class="hljs-number">-1</span>][j];<br>   lst=j;<br>&#125;<br>   &#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<br><span class="hljs-comment">//printf("%d %d\n",ed,len[ed]);</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len[ed];i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,path[ed][i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>既然$f[i][j]$是由$f[i-1][k]_{b[k]&lt;b[j]}$转移过来,我们直接用个$f[i]$数组记录,然后每次学习方法2记录决策变量$t$,这样还能满足每个$f[t]$都是上个阶段的.</p><p>为什么呢,因为我们的代码已经保证了$a[i]&gt;b[t]$,所以用来更新$j$的$f[t]$不可能在这个阶段中被更新过,所以我们也可以大胆地直接记录路径</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">705</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> f[maxn],a[maxn],b[maxn],pre[maxn];<br><span class="hljs-keyword">int</span> n,m; <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">return</span> ;<br>print(pre[x]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,b[x]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> ed=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(pre,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(pre));<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(a[i]);<br>read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)read(b[i]);<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-keyword">if</span>(a[i]==b[j])&#123;<br>f[j]=f[t]+<span class="hljs-number">1</span>;<br>pre[j]=t;<br>&#125;<br><span class="hljs-keyword">if</span>(a[i]&gt;b[j]&amp;&amp;f[j]&gt;f[t])t=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-keyword">if</span>(f[ed]&lt;f[i])ed=i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,f[ed]);<br>print(ed);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu题解P2502[HAOI2006]旅行--最小生成树变式</title>
      <link href="/2018/09/03/luogu%E9%A2%98%E8%A7%A3P2502-HAOI2006-%E6%97%85%E8%A1%8C-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E5%8F%98%E5%BC%8F/"/>
      <url>/2018/09/03/luogu%E9%A2%98%E8%A7%A3P2502-HAOI2006-%E6%97%85%E8%A1%8C-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E5%8F%98%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>  <a href="https://www.luogu.org/problemnew/show/P2502" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2502</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>  一个很$naive$的做法是从$s$到$t$双向BFS这当然会TLE</p><p>  这时我就有个想法就是二分套二分边下标来求得一个比值,同时排序后从小到大枚举每一条边作为最小值,同时再枚举每一条边,如果边权之比小于比值就连起来用并查集维护连通性,可是这个时间复杂度$O(m^2 log^2m \ \alpha(n))$过不去QAQ</p><p>  然后想为什么不直接枚举每条边作为最小值,同时搞一颗以这条边为最小值且联通s,t的最小生成树呢,因为边是排序好的,这样答案是单调的,且正确性是显然的时间复杂度$O(m^2)$.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::sort;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm=<span class="hljs-number">5005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y,dis;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Edge &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> dis&lt;b.dis;<br>&#125;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n,m,s,t;<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> fa[x]==x?fa[x]:(fa[x]=get(fa[x]));&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br><span class="hljs-keyword">return</span> b?gcd(b,a%b):a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,v,xx,yy;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>read(x),read(y),read(v);<br>edge[i].x=x,edge[i].y=y,edge[i].dis=v;<br>&#125;<br>read(s),read(t);<br>sort(edge+<span class="hljs-number">1</span>,edge+<span class="hljs-number">1</span>+m);<br><span class="hljs-keyword">int</span> mx,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">double</span> mi=inf;<br><span class="hljs-keyword">int</span> fz,fm;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>mx=-inf,flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=n;j++)fa[j]=j;<br><span class="hljs-keyword">for</span>(ri j=i;j&lt;=m;j++)&#123;<br>x=edge[j].x,y=edge[j].y,v=edge[j].dis;<br>xx=get(x),yy=get(y);<br><span class="hljs-keyword">if</span>(xx==yy)<span class="hljs-keyword">continue</span>;<br>fa[xx]=yy;<br>mx=max(mx,v);<br><span class="hljs-keyword">if</span>(get(s)==get(t))&#123;<br>flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>&#125;<span class="hljs-comment">//if(cnt==n-1)break;</span><br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>&amp;&amp;get(s)!=get(t))&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"IMPOSSIBLE"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag)&#123;<br><span class="hljs-keyword">double</span> tmp=(<span class="hljs-keyword">double</span>)mx/edge[i].dis;<br><span class="hljs-comment">//printf("%d %d %lf\n",mx,edge[i].dis,tmp);</span><br><span class="hljs-keyword">if</span>(tmp&lt;mi)&#123;<br>flag=<span class="hljs-number">1</span>;<br>mi=tmp;<br>fm=edge[i].dis,fz=mx;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> GCD=gcd(fz,fm);<br>fm=fm/GCD,fz=fz/GCD;<br><span class="hljs-keyword">if</span>(fm==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,fz);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d/%d\n"</span>,fz,fm);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
            <tag> 变式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA571Jugs题解--数论(其实是乱搞)</title>
      <link href="/2018/08/27/UVA571Jugs%E9%A2%98%E8%A7%A3-%E6%95%B0%E8%AE%BA-%E5%85%B6%E5%AE%9E%E6%98%AF%E4%B9%B1%E6%90%9E/"/>
      <url>/2018/08/27/UVA571Jugs%E9%A2%98%E8%A7%A3-%E6%95%B0%E8%AE%BA-%E5%85%B6%E5%AE%9E%E6%98%AF%E4%B9%B1%E6%90%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/UVA-571" target="_blank" rel="noopener">https://cn.vjudge.net/problem/UVA-571</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>刚做了道倒水问题的题想看看能不能水二倍经验,结果发现了这道题</p><p>题意翻译:<a href="https://www.cnblogs.com/devymex/archive/2010/08/04/1792288.html" target="_blank" rel="noopener">https://www.cnblogs.com/devymex/archive/2010/08/04/1792288.html</a></p><p>设A容量$x$,B容量$y$</p><p>我们把将水倒入A视为$+x$,将倒空B视为$-y$,若A满,就倒入B视为$-x$</p><p>由于$a,b$是互质的,根据裴蜀定理一定有$x,y$保证有$ax+by=gcd(a,b)=1$,又因为$y&gt;=c&gt;=x&gt;=0$那么也就保证了一定存在非负整数$x$和一个整数$y$使得$ax+by=c$.</p><p>于是一开始我的思路是运用扩展$GCD$求出一组解后将$x$转化为一个非负数解.然后按步骤模拟就好了</p><p>然而在我写模拟步骤时忽然发现完全不用扩欧啊,我们的模拟过程其实就是:</p><ul><li><p>若A空,则将A倒满</p></li><li><p>若B满,将B倒空</p></li><li><p>若A满,将A中水倒入B中</p></li></ul><p>由于题目要求输出一种解就好了于是我们直接模拟就好了,至于为什么会这样,我好像还找不到较为严谨的数学证明</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ex_gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!b)&#123;<br>x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">int</span> d=ex_gcd(b,a%b,x,y);<br><span class="hljs-keyword">int</span> z=x;x=y,y=z-(a/b)*y;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><span class="hljs-keyword">int</span> a,b,c;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,lef;<br><span class="hljs-keyword">int</span> bot[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c)!=EOF)&#123;<br><span class="hljs-comment">//int d=ex_gcd(a,b,x,y);</span><br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(b==c)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"fill B"</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"success"</span>);<br>flag=<span class="hljs-number">0</span>;<br>&#125;<br>bot[<span class="hljs-number">1</span>]=bot[<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//if(x&gt;0)&#123;</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>&amp;&amp;flag)&#123;<br><span class="hljs-keyword">if</span>(bot[<span class="hljs-number">2</span>]==c)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"success"</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(!bot[<span class="hljs-number">1</span>])&#123;<br>bot[<span class="hljs-number">1</span>]=a;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"fill A"</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bot[<span class="hljs-number">2</span>]==b)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"empty B"</span>);<br>bot[<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bot[<span class="hljs-number">1</span>])&#123;<br>lef=b-bot[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span>(lef&lt;bot[<span class="hljs-number">1</span>])&#123;<br>bot[<span class="hljs-number">1</span>]-=lef;<br>bot[<span class="hljs-number">2</span>]+=lef;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>bot[<span class="hljs-number">2</span>]+=bot[<span class="hljs-number">1</span>];<br>bot[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"pour A B"</span>);<br>&#125;<br><span class="hljs-comment">//printf("%d %d\n",bot[1],bot[2]);</span><br><span class="hljs-comment">//system("PAUSE");</span><br>&#125;<br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">/*else&#123;<br>int k=(-c*x)/b+1;<br>x=c*x+k*b,y=c*y-k*a;<br>&#125;*/</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 乱搞 </tag>
            
            <tag> 扩展欧几里得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA10603Fill题解--BFS</title>
      <link href="/2018/08/27/UVA10603Fill%E9%A2%98%E8%A7%A3-BFS/"/>
      <url>/2018/08/27/UVA10603Fill%E9%A2%98%E8%A7%A3-BFS/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://cn.vjudge.net/problem/UVA-10603" target="_blank" rel="noopener">https://cn.vjudge.net/problem/UVA-10603</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>经典的倒水问题,直接BFS.</p><p>对于喜闻乐见的状态判重,一开始想来个哈希函数把一个三元组映射成一个数，后面发现数据很小直接三维数组，后面又发现总水量是固定值,直接二维$bool$数组就好了</p><p>然后每次取出状态更新下答案,搜索时就是枚举将哪个杯子的水倒入哪个杯子还是很好写的，记得要状态还原</p><p>忽然发现最近只会写写水题过活了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">205</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> ans=inf,step=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> a,b,c,d;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sta</span>&#123;</span><br><span class="hljs-keyword">int</span> bot[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> sum;<br>Sta()&#123;bot[<span class="hljs-number">0</span>]=bot[<span class="hljs-number">1</span>]=bot[<span class="hljs-number">2</span>]=sum=<span class="hljs-number">0</span>;&#125;<br>Sta(<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y,<span class="hljs-keyword">int</span> _z,<span class="hljs-keyword">int</span> _sum)&#123;bot[<span class="hljs-number">0</span>]=_x,bot[<span class="hljs-number">1</span>]=_y,bot[<span class="hljs-number">2</span>]=_z,sum=_sum;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(bot[i]&gt;d)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(ans&gt;d-bot[i])&#123;<br>ans=d-bot[i];<br>step=sum;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!ans)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Sta &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> sum&gt;b.sum;<br>&#125;<br>&#125;Tmp;<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-keyword">int</span> size[<span class="hljs-number">3</span>],now[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>ans=inf,step=<span class="hljs-number">0</span>;<br>priority_queue &lt;Sta&gt; q;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>q.push(Sta(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,c,<span class="hljs-number">0</span>));<br>vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> x,y,z,lef,o,p;<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>Tmp=q.top();q.pop();<br><span class="hljs-keyword">if</span>(Tmp.update())&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,Tmp.sum,d-ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>now[<span class="hljs-number">0</span>]=Tmp.bot[<span class="hljs-number">0</span>],now[<span class="hljs-number">1</span>]=Tmp.bot[<span class="hljs-number">1</span>],now[<span class="hljs-number">2</span>]=Tmp.bot[<span class="hljs-number">2</span>],o=Tmp.sum;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<span class="hljs-comment">//i倒入j杯 </span><br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(!now[i]||size[j]==now[j]||i==j)<span class="hljs-keyword">continue</span>;<br>lef=size[j]-now[j];<br><span class="hljs-keyword">if</span>(now[i]&gt;=lef)&#123;<br>now[i]-=lef;<br>now[j]=size[j];<br><span class="hljs-keyword">if</span>(!vis[now[<span class="hljs-number">0</span>]][now[<span class="hljs-number">1</span>]])&#123;<br>vis[now[<span class="hljs-number">0</span>]][now[<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>q.push(Sta(now[<span class="hljs-number">0</span>],now[<span class="hljs-number">1</span>],now[<span class="hljs-number">2</span>],o+lef));<br>&#125;<br>now[i]+=lef;<br>now[j]-=lef;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>p=now[i];<br>now[i]=<span class="hljs-number">0</span>;<br>now[j]+=p;<br><span class="hljs-keyword">if</span>(!vis[now[<span class="hljs-number">0</span>]][now[<span class="hljs-number">1</span>]])&#123;<br>vis[now[<span class="hljs-number">0</span>]][now[<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>q.push(Sta(now[<span class="hljs-number">0</span>],now[<span class="hljs-number">1</span>],now[<span class="hljs-number">2</span>],o+p));<br>&#125;<br>now[i]=p;<br>now[j]-=p;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,step,d-ans);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(t);<br><span class="hljs-keyword">while</span>(t--)&#123;<br>read(a),read(b),read(c),read(d);<br>size[<span class="hljs-number">0</span>]=a,size[<span class="hljs-number">1</span>]=b,size[<span class="hljs-number">2</span>]=c;<br>bfs();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu题解P1032字串变换--string骚操作</title>
      <link href="/2018/08/27/luogu%E9%A2%98%E8%A7%A3P1032%E5%AD%97%E4%B8%B2%E5%8F%98%E6%8D%A2-string%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/27/luogu%E9%A2%98%E8%A7%A3P1032%E5%AD%97%E4%B8%B2%E5%8F%98%E6%8D%A2-string%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1032" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1032</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题本来很裸的一个BFS，发现其中的字符串操作好烦啊。然后就翻大佬题解发现用STL中的string居然变得这么简洁！！！</p><p>各种string操作请看另一位大佬博客，写得很全啊：</p><p><a href="https://www.cnblogs.com/rvalue/p/7327293.html#commentform" target="_blank" rel="noopener">https://www.cnblogs.com/rvalue/p/7327293.html#commentform</a></p><p>其实我们这题只用到两个相关函数:$S.find(string,pos)$和$S.substr()$</p><p>前一个是朴素查找,后一个是子串替换，用法都在那个大佬博客中有</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mkp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">25</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br>pair&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>&gt; pi[maxn],TMP;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>;<br>gp_hash_table &lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">bool</span>&gt; g;<br><span class="hljs-built_in">string</span> A,B;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dat</span>&#123;</span><br><span class="hljs-built_in">string</span> p;<br><span class="hljs-keyword">int</span> step;<br>Dat()&#123;;&#125;<br>Dat(<span class="hljs-built_in">string</span> _p,<span class="hljs-keyword">int</span> _s)&#123;p=_p;step=_s;&#125;<br>&#125;Tmp;<br><span class="hljs-built_in">queue</span>&lt; Dat &gt; q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">string</span> a,b;<br><span class="hljs-keyword">int</span> t,pos;<br><span class="hljs-built_in">std</span>::ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">cin</span>&gt;&gt;A&gt;&gt;B;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;<br>pi[++cnt]=mkp(a,b);<br>&#125;<br>q.push(Dat(A,<span class="hljs-number">0</span>));<br>g[A]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>Tmp=q.front();<br>A=Tmp.p,t=Tmp.step;q.pop();<br><span class="hljs-keyword">if</span>(A==B)&#123;<br>ans=t;<br><span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">10</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,t);&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO ANSWER"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//break;</span><br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br>a=pi[i].first;<br>pos=A.find(a);<span class="hljs-comment">//返回查找串开头位置</span><br><span class="hljs-keyword">while</span>(pos!=A.npos)&#123;<span class="hljs-comment">//如果找到的话</span><br>b=A.substr(<span class="hljs-number">0</span>,pos);<span class="hljs-comment">//将前部分串复制下来</span><br>b+=pi[i].second;<span class="hljs-comment">//拼接串</span><br>b+=A.substr(pos+a.size());<span class="hljs-comment">//将后面的串接上去</span><br><span class="hljs-keyword">if</span>(!g[b])&#123;<span class="hljs-comment">//没有搜到过</span><br>q.push(Dat(b,t+<span class="hljs-number">1</span>));<br>g[b]=<span class="hljs-number">1</span>;<br>&#125;<br>pos=A.find(a,pos+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO ANSWER"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> BFS </tag>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU3085NightmareII题解--双向BFS</title>
      <link href="/2018/08/27/HDU3085NightmareII%E9%A2%98%E8%A7%A3-%E5%8F%8C%E5%90%91BFS/"/>
      <url>/2018/08/27/HDU3085NightmareII%E9%A2%98%E8%A7%A3-%E5%8F%8C%E5%90%91BFS/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3085" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3085</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>大意就是一个男孩和一个女孩在网格里,同时还有两个鬼,男孩每轮走三步，女孩每轮走一步，与鬼曼哈顿距离不超过2*轮数的区域都被鬼占领，问男孩女孩最少多少轮相遇？</p><p>这题显然用双向BFS,男孩每轮拓展3次,女孩每轮拓展1次,一个记录女孩走过哪些地方，另一个记录男孩，有个地方被两人都走过就输出答案</p><p>然后一开始我就发现我的BFS写得代码又臭又长,后面看一位大佬博客才学到简洁的操作</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap; <br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">int</span> <span class="hljs-title">abs</span>(<span class="hljs-title">int</span>  <span class="hljs-title">x</span>)&#123;</span><br><span class="hljs-keyword">return</span> x&lt;<span class="hljs-number">0</span>?-x:x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">805</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">int</span> g[maxn][maxn];<br><span class="hljs-keyword">int</span> n,m,T;<br><span class="hljs-keyword">int</span> sx,sy,tx,ty;<br><span class="hljs-keyword">int</span> gx1,gx2,gy1,gy2;<br><span class="hljs-keyword">char</span> str[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dat</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y;<br>Dat (<span class="hljs-keyword">int</span> _x,<span class="hljs-keyword">int</span> _y)&#123;x=_x,y=_y;&#125;<br>Dat () &#123;x=y=<span class="hljs-number">0</span>;&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">1</span>,dis;<br><span class="hljs-keyword">bool</span> wtf=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis1[maxn][maxn],vis2[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-comment">//if(wtf)printf("** %d %d %d %d %d %d\n",x,y,cnt,dis,abs(x-gx1)+abs(y-gy1),abs(x-gx2)+abs(y-gy2));</span><br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=m&amp;&amp;g[x][y]!=<span class="hljs-number">1</span>&amp;&amp;(<span class="hljs-built_in">abs</span>(x-gx1)+<span class="hljs-built_in">abs</span>(y-gy1))&gt;dis&amp;&amp;(<span class="hljs-built_in">abs</span>(x-gx2)+<span class="hljs-built_in">abs</span>(y-gy2))&gt;dis)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y,xx,yy;<br><span class="hljs-keyword">int</span> x1,x2,x3,y1,y2,y3,x4,y4;<br><span class="hljs-built_in">queue</span> &lt;Dat&gt; q1,q2;<br><span class="hljs-keyword">while</span>(q1.size())q1.pop();<br><span class="hljs-keyword">while</span>(q2.size())q2.pop();<br>q1.push(Dat(sx,sy));<br>q2.push(Dat(tx,ty));<br>cnt=<span class="hljs-number">1</span>,dis=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> l1=<span class="hljs-number">1</span>,r1=<span class="hljs-number">1</span>,l2=<span class="hljs-number">1</span>,r2=<span class="hljs-number">1</span>,lst=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(vis1,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis1));<br><span class="hljs-built_in">memset</span>(vis2,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis2));<br>vis1[sx][sy]=vis2[tx][ty]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(q1.size()&amp;&amp;q2.size())&#123;wtf=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">3</span>;k++)&#123;<br>lst=r1;<br><span class="hljs-keyword">while</span>(l1&lt;=lst)&#123;<br>x=q1.front().x,y=q1.front().y;q1.pop();<br>l1++;<br><span class="hljs-keyword">if</span>(!check(x,y))<span class="hljs-keyword">continue</span>;<br><span class="hljs-comment">//printf("1 %d %d\n",x,y);</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>xx=x+dx[i],yy=y+dy[i];<br><span class="hljs-keyword">if</span>(!check(xx,yy)||vis1[xx][yy])<span class="hljs-keyword">continue</span>;<br>q1.push(Dat(xx,yy));<br><span class="hljs-keyword">if</span>(vis2[xx][yy])&#123;<br><span class="hljs-comment">//printf("--%d %d %d\n",cnt,xx,yy);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,cnt);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>vis1[xx][yy]=<span class="hljs-number">1</span>;<br>r1++;<br>&#125;<br>&#125;<br>&#125;<br>lst=r2;wtf=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(l2&lt;=lst)&#123;<br>x=q2.front().x,y=q2.front().y;q2.pop();<span class="hljs-comment">//printf("%d %d\n",l2,lst);</span><br>l2++;<br><span class="hljs-keyword">if</span>(!check(x,y))<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>xx=x+dx[i],yy=y+dy[i];<br><span class="hljs-keyword">if</span>(!check(xx,yy)||vis2[xx][yy])<span class="hljs-keyword">continue</span>;<br>q2.push(Dat(xx,yy));<span class="hljs-comment">//printf("2 %d %d\n",xx,yy);</span><br><span class="hljs-keyword">if</span>(vis1[xx][yy])&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,cnt);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>vis2[xx][yy]=<span class="hljs-number">1</span>;<br>r2++;<br>&#125;<br><span class="hljs-comment">//printf("*** %d %d %d\n",l2,r2,lst);</span><br>&#125;<br>cnt++;<br>dis=cnt*<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br>read(n),read(m);<br>gx1=gy1=inf;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,str+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>vis1[i][j]=<span class="hljs-number">0</span>,vis2[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(str[j]==<span class="hljs-string">'.'</span>)g[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[j]==<span class="hljs-string">'X'</span>)g[i][j]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[j]==<span class="hljs-string">'M'</span>)&#123;<br>g[i][j]=<span class="hljs-number">2</span>;<br>sx=i,sy=j;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[j]==<span class="hljs-string">'G'</span>)&#123;<br>g[i][j]=<span class="hljs-number">3</span>;<br>tx=i,ty=j;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[j]==<span class="hljs-string">'Z'</span>)&#123;<br><span class="hljs-keyword">if</span>(gx1==inf)gx1=i,gy1=j;<br><span class="hljs-keyword">else</span> gx2=i,gy2=j;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//printf("%d %d %d %d %d %d %d %d\n",sx,sy,tx,ty,gx1,gy1,gx2,gy2);</span><br>bfs();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--八数码问题</title>
      <link href="/2018/08/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="学习笔记—八数码问题"><a href="#学习笔记—八数码问题" class="headerlink" title="学习笔记—八数码问题"></a>学习笔记—八数码问题</h2><h3 id="先看道题目"><a href="#先看道题目" class="headerlink" title="先看道题目"></a>先看道题目</h3><p><a href="https://www.luogu.org/problemnew/show/P1379" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1379</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>经典的八数码问题,有双向BFS和$IDA$ <em> 的方法，这里使用的是$A$ </em> 启发式搜索.</p><p>简要介绍一下$A$ <em> ,就是对于搜索的每一个状态设计一个评估函数$f(state)$,表示当前状态$state$到目标状态所需代价的估计值;还有一个$g(state)$,表示当前状态$state$到目标状态实际需要的最小代价,$A$ </em> 中必须保证$f(state)&lt;=g(state)$才能确保在目标状态第一次被取出时就是最优解（实际一点,比如最少的步数）并且在搜索中每个状态只需扩展一次，设计的估价函数$f(stste)$越接近$g(state)$效率越高.</p><p>我们这里用曼哈顿距离设计估价函数，也就是$f(state)=\sum^9_{i=1} (|posx_i-goalx_i|+|posy_i-goaly_i|) $</p><p>$posx_i$表示$i$这个数字在九宫格中的横坐标,$posy_i$也就类似的。注意,我们不能统计$0$，否则这样$f(state)$可能会大于实际代价</p><p>为了确保每个状态都被拓展一次，我们可以采用康托展开(将$1-n$的全排列映射成$1-n!$中的一个数)或是哈希表(unordered_map/pb_ds::gp_hash_table/map)</p><p>同时还要注意,八数码问题有时候是没有解的,我们将九宫格除空格之外的数按从左到右,再从上到下的顺序排成一列数来表示每一个状态，如果初始状态和目标状态的逆序对个数奇偶性不同的话是无解的,可以提前判断一下是否有解来提高效率</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><h4 id="P1379-八数码难题"><a href="#P1379-八数码难题" class="headerlink" title="P1379 八数码难题"></a>P1379 八数码难题</h4><p>题目链接：<a href="https://www.luogu.org/problemnew/show/P1379" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1379</a></p><p>非常简单,甚至不用判断无解</p><p>代码:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::swap;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">abs</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::priority_queue;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> sta[maxn][maxn];<br>ll st,goal;<br>gp_hash_table &lt;ll,<span class="hljs-keyword">bool</span>&gt;g;<br>pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pos[<span class="hljs-number">10</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sta</span>&#123;</span><br>ll a;<br><span class="hljs-keyword">int</span> s,f;<br>Sta()&#123;;&#125;<br>Sta(ll _a,<span class="hljs-keyword">int</span> _s,<span class="hljs-keyword">int</span> _f)&#123;a=_a,s=_s,f=_f;&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Sta &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> f&gt;b.f;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> bx,by;<span class="hljs-comment">//0位置 </span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_f</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//估价函数</span><br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">3</span>;j++)&#123;<br>ans+=<span class="hljs-built_in">abs</span>(i-pos[sta[i][j]].first)+<span class="hljs-built_in">abs</span>(j-pos[sta[i][j]].second);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">turn_num</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//转为数字</span><br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">3</span>;j++)&#123;<br>ans=ans*<span class="hljs-number">10</span>+sta[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turn_sta</span><span class="hljs-params">(ll num)</span></span>&#123;<span class="hljs-comment">//转为九宫格</span><br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">3</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">3</span>;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>sta[i][j]=num%<span class="hljs-number">10</span>;<br>num=num/<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(!sta[i][j])bx=i,by=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">astar</span><span class="hljs-params">()</span></span>&#123;<br>ll now,nxt;<br><span class="hljs-keyword">int</span> x,y,z;<br>Sta tmp;<br>priority_queue&lt;Sta&gt;q;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<br>turn_sta(st);<br>q.push(Sta(st,<span class="hljs-number">0</span>,get_f()));<br>g[st]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>tmp=q.top();q.pop();<br>now=tmp.a,z=tmp.s;<br><span class="hljs-keyword">if</span>(now==goal)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,z);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>turn_sta(now);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>x=bx+dx[i],y=by+dy[i];<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">1</span>&amp;&amp;x&lt;=<span class="hljs-number">3</span>&amp;&amp;y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=<span class="hljs-number">3</span>)&#123;<br>swap(sta[bx][by],sta[x][y]);<br>nxt=turn_num();<br><span class="hljs-keyword">if</span>(g[nxt])&#123;<br>swap(sta[bx][by],sta[x][y]);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>g[nxt]=<span class="hljs-number">1</span>;<br>q.push(Sta(nxt,z+<span class="hljs-number">1</span>,z+<span class="hljs-number">1</span>+get_f()));<br>swap(sta[bx][by],sta[x][y]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsolvable"</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/*230187546*/</span><br><span class="hljs-keyword">int</span> x,y,z;<br>pos[<span class="hljs-number">0</span>].first=<span class="hljs-number">2</span>,pos[<span class="hljs-number">0</span>].second=<span class="hljs-number">2</span>;<br>pos[<span class="hljs-number">1</span>].first=<span class="hljs-number">1</span>,pos[<span class="hljs-number">1</span>].second=<span class="hljs-number">1</span>;<br>pos[<span class="hljs-number">2</span>].first=<span class="hljs-number">1</span>,pos[<span class="hljs-number">2</span>].second=<span class="hljs-number">2</span>;<br>pos[<span class="hljs-number">3</span>].first=<span class="hljs-number">1</span>,pos[<span class="hljs-number">3</span>].second=<span class="hljs-number">3</span>;<br>pos[<span class="hljs-number">4</span>].first=<span class="hljs-number">2</span>,pos[<span class="hljs-number">4</span>].second=<span class="hljs-number">3</span>;<br>pos[<span class="hljs-number">5</span>].first=<span class="hljs-number">3</span>,pos[<span class="hljs-number">5</span>].second=<span class="hljs-number">3</span>;<br>pos[<span class="hljs-number">6</span>].first=<span class="hljs-number">3</span>,pos[<span class="hljs-number">6</span>].second=<span class="hljs-number">2</span>;<br>pos[<span class="hljs-number">7</span>].first=<span class="hljs-number">3</span>,pos[<span class="hljs-number">7</span>].second=<span class="hljs-number">1</span>;<br>pos[<span class="hljs-number">8</span>].first=<span class="hljs-number">2</span>,pos[<span class="hljs-number">8</span>].second=<span class="hljs-number">1</span>;<br>read(st);<br>goal=<span class="hljs-number">123804765</span>;<br>astar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="POJ1077-Eight"><a href="#POJ1077-Eight" class="headerlink" title="POJ1077 Eight"></a>POJ1077 Eight</h4><p>题目链接:<a href="http://poj.org/problem?id=1077" target="_blank" rel="noopener">http://poj.org/problem?id=1077</a></p><p>要打印方案,我用了一个$naive$的方法,就是记录每个状态是从哪个状态转移过来的($A*$保证扩展到每一个状态时一定是花费最少的步数)，同时再用一个哈希表记录它是进行哪个操作转移过来的，最后递归打印即可</p><p>当然还有其他方法这里不赘述.由于POJ好像不资瓷pbds和unordered_map,只好用map</p><p>代码:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> ch[<span class="hljs-number">4</span>]=&#123;<span class="hljs-string">'u'</span>,<span class="hljs-string">'l'</span>,<span class="hljs-string">'r'</span>,<span class="hljs-string">'d'</span>&#125;;<br><span class="hljs-keyword">int</span> sta[maxn][maxn];<br>ll st,goal;<br><span class="hljs-built_in">map</span> &lt;ll,ll&gt; pre;<br><span class="hljs-built_in">map</span> &lt;ll,<span class="hljs-keyword">int</span>&gt; dir;<br>pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pos[<span class="hljs-number">10</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sta</span>&#123;</span><br>ll a;<br><span class="hljs-keyword">int</span> s,f;<br>Sta()&#123;;&#125;<br>Sta(ll _a,<span class="hljs-keyword">int</span> _s,<span class="hljs-keyword">int</span> _f)&#123;a=_a,s=_s,f=_f;&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Sta &amp;b)<span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> f&gt;b.f;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> bx,by;<span class="hljs-comment">//0位置 </span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_f</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">3</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(sta[i][j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>ans+=<span class="hljs-built_in">abs</span>(i-pos[sta[i][j]].first)+<span class="hljs-built_in">abs</span>(j-pos[sta[i][j]].second);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">turn_num</span><span class="hljs-params">()</span></span>&#123;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">3</span>;j++)&#123;<br>ans=ans*<span class="hljs-number">10</span>+sta[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turn_sta</span><span class="hljs-params">(ll num)</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">3</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">3</span>;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>sta[i][j]=num%<span class="hljs-number">10</span>;<br>num=num/<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(!sta[i][j])bx=i,by=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    <span class="hljs-comment">/*234150768*/</span><br><span class="hljs-keyword">if</span>(x==st)<span class="hljs-keyword">return</span> ;<br>print(pre[x]);<br><span class="hljs-built_in">putchar</span>(ch[dir[x]]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">astar</span><span class="hljs-params">()</span></span>&#123;<br>ll now,nxt;<br><span class="hljs-keyword">int</span> x,y,z;<br>Sta tmp;<br>priority_queue&lt;Sta&gt;q;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<span class="hljs-comment">//puts("wtf");</span><br>turn_sta(st);<br>q.push(Sta(st,<span class="hljs-number">0</span>,get_f()));<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>tmp=q.top();q.pop();<br>now=tmp.a,z=tmp.s;<br><span class="hljs-keyword">if</span>(now==goal)&#123;<br><span class="hljs-comment">//printf("%d\n",z);</span><br><span class="hljs-comment">//printf("%lld***\n***",pre[st]);</span><br>print(goal);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">//printf("*%lld\n",now);</span><br>turn_sta(now);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>x=bx+dx[i],y=by+dy[i];<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">1</span>&amp;&amp;x&lt;=<span class="hljs-number">3</span>&amp;&amp;y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=<span class="hljs-number">3</span>)&#123;<br>swap(sta[bx][by],sta[x][y]);<br>nxt=turn_num();<br><span class="hljs-keyword">if</span>(!pre[nxt])&#123;<br>pre[nxt]=now;<br>dir[nxt]=i;<br>q.push(Sta(nxt,z+<span class="hljs-number">1</span>,z+<span class="hljs-number">1</span>+get_f()));<br>&#125;<br>swap(sta[bx][by],sta[x][y]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsolvable"</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">char</span> x[<span class="hljs-number">2</span>];<br>pos[<span class="hljs-number">0</span>].first=<span class="hljs-number">3</span>,pos[<span class="hljs-number">0</span>].second=<span class="hljs-number">3</span>;<br>pos[<span class="hljs-number">1</span>].first=<span class="hljs-number">1</span>,pos[<span class="hljs-number">1</span>].second=<span class="hljs-number">1</span>;<br>pos[<span class="hljs-number">2</span>].first=<span class="hljs-number">1</span>,pos[<span class="hljs-number">2</span>].second=<span class="hljs-number">2</span>;<br>pos[<span class="hljs-number">3</span>].first=<span class="hljs-number">1</span>,pos[<span class="hljs-number">3</span>].second=<span class="hljs-number">3</span>;<br>pos[<span class="hljs-number">4</span>].first=<span class="hljs-number">2</span>,pos[<span class="hljs-number">4</span>].second=<span class="hljs-number">1</span>;<br>pos[<span class="hljs-number">5</span>].first=<span class="hljs-number">2</span>,pos[<span class="hljs-number">5</span>].second=<span class="hljs-number">2</span>;<br>pos[<span class="hljs-number">6</span>].first=<span class="hljs-number">2</span>,pos[<span class="hljs-number">6</span>].second=<span class="hljs-number">3</span>;<br>pos[<span class="hljs-number">7</span>].first=<span class="hljs-number">3</span>,pos[<span class="hljs-number">7</span>].second=<span class="hljs-number">1</span>;<br>pos[<span class="hljs-number">8</span>].first=<span class="hljs-number">3</span>,pos[<span class="hljs-number">8</span>].second=<span class="hljs-number">2</span>;<br><span class="hljs-comment">//read(st);</span><br>st=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,x);<br><span class="hljs-keyword">if</span>(x[<span class="hljs-number">0</span>]==<span class="hljs-string">'x'</span>)st=st*<span class="hljs-number">10</span>,num[i]=inf;<br><span class="hljs-keyword">else</span> st=st*<span class="hljs-number">10</span>+x[<span class="hljs-number">0</span>]-<span class="hljs-string">'0'</span>,num[i]=x[<span class="hljs-number">0</span>]-<span class="hljs-string">'0'</span>;<br>&#125;<br><span class="hljs-comment">//printf("%lld\n",st);</span><br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(num[i]==inf)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">for</span>(ri j=i+<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(num[j]&lt;num[i])&#123;cnt++;&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//printf("%d\n",cnt);</span><br><span class="hljs-keyword">if</span>(cnt%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsolvable"</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>pre[st]=<span class="hljs-number">19260817</span>;<br>goal=<span class="hljs-number">123456780</span>;<br>astar();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UVA652-Eight"><a href="#UVA652-Eight" class="headerlink" title="UVA652 Eight"></a>UVA652 Eight</h4><p>题目链接: <a href="https://cn.vjudge.net/problem/UVA-652" target="_blank" rel="noopener">https://cn.vjudge.net/problem/UVA-652</a></p><p>这道题由于多组数据发现各个$A*$好像不太行,于是就先一遍BFS扩展出所有状态同时记录路径,这一次没用哈希表用了康拓展开，然而不知道为何WA掉了。。。</p><p>代码:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> ch[<span class="hljs-number">4</span>]=&#123;<span class="hljs-string">'u'</span>,<span class="hljs-string">'l'</span>,<span class="hljs-string">'r'</span>,<span class="hljs-string">'d'</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> fac[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>, <span class="hljs-number">120</span>, <span class="hljs-number">720</span>, <span class="hljs-number">5040</span>, <span class="hljs-number">40320</span>, <span class="hljs-number">362880</span>&#125;;<br><span class="hljs-keyword">int</span> sta[maxn][maxn];<br>ll st,goal;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sta</span>&#123;</span><br>ll a;<span class="hljs-keyword">int</span> v;<br>Sta()&#123;;&#125;<br>Sta(ll _a,<span class="hljs-keyword">int</span> _v)&#123;a=_a,v=_v;&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> bx,by;<span class="hljs-comment">//0位置 </span><br><span class="hljs-keyword">int</span> num[<span class="hljs-number">10</span>],len[<span class="hljs-number">500005</span>];<br><span class="hljs-keyword">char</span> path[<span class="hljs-number">500005</span>][<span class="hljs-number">75</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">turn_num</span><span class="hljs-params">()</span></span>&#123;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">3</span>;j++)&#123;<br>ans=ans*<span class="hljs-number">10</span>+sta[i][j];<br>num[(i<span class="hljs-number">-1</span>)*<span class="hljs-number">3</span>+j]=sta[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cal_cantor</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> sml=<span class="hljs-number">0</span>,x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>sml=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri j=i+<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(num[j]&lt;num[i])++sml;<br>&#125;<br>x+=fac[<span class="hljs-number">9</span>-i]*sml;<br>&#125;<br><span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>;<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turn_sta</span><span class="hljs-params">(ll p)</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">3</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">3</span>;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>sta[i][j]=p%<span class="hljs-number">10</span>;<br>p=p/<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(sta[i][j]==<span class="hljs-number">9</span>)bx=i,by=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">500005</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>ll now,nxt;<br><span class="hljs-keyword">int</span> x,y,z,pre_val,val;<br>Sta tmp;<br><span class="hljs-built_in">queue</span>&lt;Sta&gt;q;<br><span class="hljs-keyword">while</span>(q.size())q.pop();<span class="hljs-comment">//puts("wtf");</span><br>turn_sta(goal);<br>z=turn_num();<br>val=cal_cantor();<br>vis[val]=<span class="hljs-number">1</span>;<br>q.push(Sta(goal,val));<br><span class="hljs-keyword">while</span>(q.size())&#123;<br>tmp=q.front();q.pop();<br>now=tmp.a,pre_val=tmp.v;<br>turn_sta(now);<br><span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>x=bx+dx[k],y=by+dy[k];<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">1</span>&amp;&amp;x&lt;=<span class="hljs-number">3</span>&amp;&amp;y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=<span class="hljs-number">3</span>)&#123;<br>swap(sta[bx][by],sta[x][y]);<br>nxt=turn_num();<br>val=cal_cantor();<br><span class="hljs-comment">//printf("%d %d %lld %d %d\n",x,y,nxt,val,pre_val);</span><br><span class="hljs-keyword">if</span>(!vis[val])&#123;<br>vis[val]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len[pre_val];i++)&#123;<br>path[val][i]=path[pre_val][i];<br>&#125;<br>len[val]=len[pre_val];<br>path[val][++len[val]]=ch[k];<br>q.push(Sta(nxt,val));<br>&#125;<br>swap(sta[bx][by],sta[x][y]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/*234150768*/</span><br><span class="hljs-comment">/*123456780*/</span><br><span class="hljs-comment">/*<br>2<br>2 3 4 1 5 x 7 6 8<br>2 3 4 1 5 x 7 6 8<br>*/</span><br><span class="hljs-built_in">std</span>::ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">int</span> t,val;<br><span class="hljs-keyword">char</span> kkk;<br>read(t);<br>goal=<span class="hljs-number">123456789</span>;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>bfs();<br><span class="hljs-keyword">while</span>(t--)&#123;<br>st=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;kkk;<span class="hljs-comment">//scanf("%s",x);</span><br><span class="hljs-keyword">if</span>(kkk==<span class="hljs-string">'x'</span>)st=st*<span class="hljs-number">10</span>,num[i]=<span class="hljs-number">9</span>;<br><span class="hljs-keyword">else</span> st=st*<span class="hljs-number">10</span>+kkk-<span class="hljs-string">'0'</span>,num[i]=kkk-<span class="hljs-string">'0'</span>;<br>&#125;<br>val=cal_cantor();<br><span class="hljs-comment">//printf("%d %d\n",val,len[val]);</span><br><span class="hljs-keyword">if</span>(!vis[val])&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"unsolvable"</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">for</span>(ri i=len[val];i&gt;=<span class="hljs-number">1</span>;i--)<span class="hljs-built_in">putchar</span>(path[val][i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(t)<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> A*/IDA* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROI17普及23-B.星空题解--图的灵活转化</title>
      <link href="/2018/08/11/ZROI17%E6%99%AE%E5%8F%8A23-B-%E6%98%9F%E7%A9%BA%E9%A2%98%E8%A7%A3-%E5%9B%BE%E7%9A%84%E7%81%B5%E6%B4%BB%E8%BD%AC%E5%8C%96/"/>
      <url>/2018/08/11/ZROI17%E6%99%AE%E5%8F%8A23-B-%E6%98%9F%E7%A9%BA%E9%A2%98%E8%A7%A3-%E5%9B%BE%E7%9A%84%E7%81%B5%E6%B4%BB%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p>版权原因不予提供</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题思路很妙啊,虽然已经算半个套路题（因为我太菜了）</p><p>将框视为点,若一个球能放在$x$或$y$框,则$x,y$连一条无向边。有一条非常显然的性质是:在联通块中,若有奇数条边,则经过一定能调整使得最少有一个答案贡献,若有奇数条边,则最少对答案没有贡献</p><p>这个性质其实非常好想,但我想了挺久找不出合适的话来解释，标程用图来解释就比较直观更好处理</p><p>于是我们只要模拟上述过程就好了,一道看似与图无关的题用图就迎刃而解</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>; <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> fa[maxn],num[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> (x==fa[x])?fa[x]:(fa[x]=get(fa[x]));&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>srand(<span class="hljs-number">19260817</span>);<span class="hljs-comment">//闷声发大财 预祝长者大寿 Long Live Jiang !!! </span><br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)fa[i]=i;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x),read(y);<br>x=get(x),y=get(y);<br><span class="hljs-keyword">if</span>(x==y)num[x]++;<br><span class="hljs-keyword">else</span> &#123;<br>   fa[x]=y;<br>   num[y]=num[y]+num[x]+<span class="hljs-number">1</span>;<br>&#125; <br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(i==fa[i])ans+=(num[i]%<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROI17普及23-A.如烟题解--技巧枚举</title>
      <link href="/2018/08/11/ZROI17%E6%99%AE%E5%8F%8A23-A-%E5%A6%82%E7%83%9F%E9%A2%98%E8%A7%A3-%E6%8A%80%E5%B7%A7%E6%9E%9A%E4%B8%BE/"/>
      <url>/2018/08/11/ZROI17%E6%99%AE%E5%8F%8A23-A-%E5%A6%82%E7%83%9F%E9%A2%98%E8%A7%A3-%E6%8A%80%E5%B7%A7%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p>因版权原因不予提供</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>别看这是普及模拟赛,其实基本上是提高难度…像这题做NOIpT1的话也说的过去</p><p>有个很显然的暴力思路就是枚举c,a,b,时间复杂度$O(N^3)$，</p><p>然后正解其实就是改变枚举顺序,我们先枚举a点,然后将所有可作为c点的点存起来,再从那些c点遍历得到可行b点统计答案,这样就不会重复且符合题意</p><p>不过这道题需要仔细读题，像我这种菜B一开始就理解错题意了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>; <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>],_edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> _h[maxn],_num_edge=<span class="hljs-number">1</span>;<span class="hljs-comment">//反向边 </span><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> _add_edge(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)&#123;<br>_edge[++_num_edge].ne=_h[f];<br>_edge[_num_edge].to=to;<br>_h[f]=_num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> n,m,sc,sb;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; g;<br><span class="hljs-keyword">void</span> _dfs(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)&#123;<br><span class="hljs-keyword">int</span> v;<span class="hljs-keyword">if</span>(vis[now])<span class="hljs-keyword">return</span> ;<br>vis[now]=<span class="hljs-number">1</span>;g.push_back(now);<br><span class="hljs-keyword">for</span>(ri i=_h[now];i;i=_edge[i].ne)&#123;<br>v=_edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>_dfs(v,now);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;<span class="hljs-keyword">if</span>(vis[now])<span class="hljs-keyword">return</span> ;<br>sb++;vis[now]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>dfs(v,now);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T,x,y,z;<br>srand(<span class="hljs-number">19260817</span>);<span class="hljs-comment">//闷声发大财 预祝长者大寿 Long Live Jiang !!! </span><br>read(T);<br><span class="hljs-keyword">while</span>(T--)&#123;<br>ll ans=<span class="hljs-number">0</span>;<br>read(n),read(m);<br><span class="hljs-built_in">memset</span>(h,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(h));<br><span class="hljs-built_in">memset</span>(_h,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(_h));<br>num_edge=_num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br> read(x),read(y);<br> add_edge(x,y);<br> _add_edge(y,x);<br>&#125;<br><span class="hljs-keyword">int</span> ss=(n+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,ss);<br>g.clear();<br>_dfs(i,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,ss);<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;g.size();j++)&#123;<br>sb=<span class="hljs-number">0</span>;<br>            dfs(g[j],<span class="hljs-number">0</span>); <br>            ans+=sb;<br>            <span class="hljs-comment">//printf("--%d %d %d\n",g[j],i,sb);</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROIDay4-比赛解题报告</title>
      <link href="/2018/08/11/ZROIDay4-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/08/11/ZROIDay4-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="ZROIDay4-比赛解题报告"><a href="#ZROIDay4-比赛解题报告" class="headerlink" title="ZROIDay4-比赛解题报告"></a>ZROIDay4-比赛解题报告</h2><h3 id="扯闲话"><a href="#扯闲话" class="headerlink" title="扯闲话"></a>扯闲话</h3><p>感觉这个出题人的题做起来全都没感觉啊，今天又凉了，T1完全不知道什么意思，T2只会暴力，T3现在还不懂什么意思，真的太菜了</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>题意半天没搞懂爆零GG了,讲了一下才知道什么意思，还是比较有趣的一道题，一位大佬20分钟就切了</p><p>设默认押法国队本金是$v$，则期望收益$p<em>vx$,当$p</em>xv-v&gt;=0$时，即$p*x &gt;= 1$他才会押法国队,克罗地亚队类似。从这可以看到会押本金的人在排序后一定是一个前缀</p><p>然后容易发现,若法国队赔率一定，你的收益与克罗地亚队成一个单峰函数关系，因为法国队赢了，你要用他们押克罗地亚的本钱去偿还他们的赌金,然而赔率一旦过大，克罗地亚赢的话同理</p><p>于是我们枚举押法国队赢的人数（相当于枚举赔率），再二分出押克罗地亚队的最佳人数（相当于二分最佳赔率），然后枚举法国队赢或输你的收益，最后统计答案即可。当然正如第一个样例一样还可能出现所有人都不押才是最佳的情况。</p><p>还有这题读入巨大，要用double的读入优化</p><p>代码：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::sort;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>,xx=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>xx=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))xx=(xx&lt;&lt;<span class="hljs-number">3</span>)+(xx&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">if</span>(c!=<span class="hljs-string">'.'</span>)&#123;<br>    x=ne?-xx:xx;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> tot=<span class="hljs-number">1</span>;<span class="hljs-keyword">double</span> ans=<span class="hljs-number">1.0</span>*xx;<br><span class="hljs-keyword">double</span> y=getchar()<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))&#123;y=y*<span class="hljs-number">10</span>+c<span class="hljs-number">-48</span>;tot++;&#125;<br><span class="hljs-keyword">while</span>(tot--)&#123;y=y/<span class="hljs-number">10</span>;&#125;<br>x=ne?-(ans+y):(ans+y);<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dat</span>&#123;</span><br><span class="hljs-keyword">double</span> a,p,x,y,sumx,sumy;<br>Dat()&#123;x=y=<span class="hljs-number">0</span>;&#125;<br>&#125;dat[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpx</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Dat &amp;a,<span class="hljs-keyword">const</span> Dat &amp;b)</span></span>&#123;<br><span class="hljs-keyword">return</span> a.x&lt;b.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpy</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Dat &amp;a,<span class="hljs-keyword">const</span> Dat &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.y&lt;b.y;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(dat[i].a),read(dat[i].p);<br><span class="hljs-comment">//printf("%lf %lf\n",dat[i].a,dat[i].p);</span><br>dat[i].x=<span class="hljs-number">1</span>/dat[i].p,dat[i].y=<span class="hljs-number">1</span>/(<span class="hljs-number">1</span>-dat[i].p);<br>&#125;<br>sort(dat+<span class="hljs-number">1</span>,dat+<span class="hljs-number">1</span>+n,cmpx);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)dat[i].sumx=dat[i<span class="hljs-number">-1</span>].sumx+dat[i].a;<br>sort(dat+<span class="hljs-number">1</span>,dat+<span class="hljs-number">1</span>+n,cmpy);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)dat[i].sumy=dat[i<span class="hljs-number">-1</span>].sumy+dat[i].a;<br><span class="hljs-keyword">double</span> tmp1,tmp2,ans=-inf;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=n,mid;<br><span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>tmp1=dat[i].sumx*(<span class="hljs-number">1</span>-dat[i].x)+dat[mid].sumy;<br>tmp2=dat[i].sumx+dat[mid].sumy*(<span class="hljs-number">1</span>-dat[mid].y);<br>ans=max(ans,min(tmp1,tmp2));<br><span class="hljs-keyword">if</span>(tmp1&lt;tmp2)l=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lf\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>毒瘤数据结构，不会</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>题目看不懂，还要特征多项式！？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 概率与期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROIDay3-比赛解题报告</title>
      <link href="/2018/08/11/ZROIDay3-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/08/11/ZROIDay3-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="ZROIDay3-比赛解题报告"><a href="#ZROIDay3-比赛解题报告" class="headerlink" title="ZROIDay3-比赛解题报告"></a>ZROIDay3-比赛解题报告</h2><h3 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h3><p>从今天开始考试有点不在状态,可能是因为不太适应题目的原因,T1已经接近了思想但是没有想到状态转移，T2思考方向错误，T3不会打LCT,还是太菜了</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>考场上想到要么不用亵渎要么最后用亵渎，如果最后用亵渎就要满足所有随从血量是从1一直到某个数x的不下降连续序列，于是可以状态转移$f[i][j]$表示前i小的数变成$[1,j]$每一个整数的最小代价,那么我们枚举第i-1小的数是j-1还是j就好了。最后对所有$f[n][i]$取min就好了.当然还要考虑不用亵渎的情况，这个就非常好处理</p><p>代码：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::sort;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5005</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">1e18</span><span class="hljs-number">-1</span>;<br>ll f[maxn][maxn],a[maxn];<br>ll ans=<span class="hljs-number">0</span>;<br>ll p,q,r;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function">ll <span class="hljs-title">cost</span><span class="hljs-params">(ll x,ll y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x&gt;y)<span class="hljs-keyword">return</span> (x-y)*q;<br><span class="hljs-keyword">return</span> (y-x)*p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>   read(a[i]);<br>    &#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    read(p),read(q),read(r);<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>    ans+=q*a[i];<br>    <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>    f[i][j]=inf;<br>&#125;<br>&#125;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>f[i][j]=min(f[i][j],min(f[i<span class="hljs-number">-1</span>][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])+cost(a[i],j));<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)ans=min(ans,f[n][i]+r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>这题主要是思路没想到,我们把两个相邻的字符断开，这样原串就变成了许多段，显然我们想要的就是段中的一部分，但是糟糕的是头尾两个字符相同也不行。然后容易发现，我们用KMP求出fail数组，按照定义易知，$i-fail[i]+1$与第一个字符是相同的，于是我们对每一条段跑KMP记录可行答案就好了。然而按这个思路做前面小数据都WA了。。。也不知道怎么回事</p><p>代码:</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2000005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">char</span> a[maxn],b[maxn];<br><span class="hljs-keyword">bool</span> ok[maxn],ans[maxn];<br><span class="hljs-keyword">int</span> fail[maxn],tot=<span class="hljs-number">0</span>,len=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)fail[i]=<span class="hljs-number">0</span>,ok[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>;i&lt;=tot;i++)&#123;<br><span class="hljs-keyword">while</span>(j&amp;&amp;b[i<span class="hljs-number">-1</span>]!=b[j])j=fail[j];<br><span class="hljs-keyword">if</span>(b[i<span class="hljs-number">-1</span>]==b[j])j++;<br>fail[i]=j;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=fail[tot];i;i=fail[i])ok[tot-i+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<span class="hljs-keyword">if</span>(ok[i])ans[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> T;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,a+<span class="hljs-number">1</span>)!=EOF)&#123;<br>T++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d:"</span>,T);<br>len=<span class="hljs-built_in">strlen</span>(a+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;len;i++)a[len+i]=a[len];<br>len=(len&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>,tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=len;i++)&#123;<br>b[tot++]=a[i];<br><span class="hljs-keyword">if</span>(a[i]==a[i+<span class="hljs-number">1</span>])&#123;<br>    solve();<br>    tot=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>solve();<br>len=(len+<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,ans[len-i]);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>    <span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ans));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>不会LCT，太菜了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROIDay2-比赛解题报告</title>
      <link href="/2018/08/11/ZROIDay2-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/08/11/ZROIDay2-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="ZROIDay2-比赛解题报告"><a href="#ZROIDay2-比赛解题报告" class="headerlink" title="ZROIDay2-比赛解题报告"></a>ZROIDay2-比赛解题报告</h2><p>版权原因不提供题面信息</p><hr><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p> 这几天作息有点鬼畜,虽然昨晚很晚睡但是早上精神还不错,看到题发现T1很友好？T2woc这暴力都好难打?T3多项式？！这样下去比赛会不会出现更多高端操作，恐怕凉凉</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p> 感谢出题人,暴力好打分又多,正解也不难想,这题基本上部分分都打了一遍</p><h4 id="50pts"><a href="#50pts" class="headerlink" title="50pts"></a>50pts</h4><p> 对于每一个炮将其所在的所在的交叉行（暂且这么说）$O(1)$ 标记，然后$O(N^2)$遍历一遍统计就好了</p><h4 id="70pts"><a href="#70pts" class="headerlink" title="70pts"></a>70pts</h4><p> 核心思想是计算出放一个炮新增的贡献,即它能覆盖的点数减去已经覆盖的点数,最后$N^2$减去总和既是答案</p><p> 拿这部分分还花了不少功夫,终于运用人类智慧找出一些规律,也就是对于一个炮$(x,y)$,它左斜行和右斜行能覆盖的点的个数,然后又发现对于一个确定的左斜行（即确定的$x+y$），可以通过$x,y$计算出与它有公共点的左斜行的$x-y$的相关信息，于是新增一个炮,在他所在的左斜行加上+1标记,加上左斜行覆盖点数,在枚举与左斜行有公共点的右斜行,假设这个右斜行已有标记,则贡献-1。对于右斜行也类似</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned loong long </span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> p[maxn&lt;&lt;<span class="hljs-number">1</span>],q[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> cntp=<span class="hljs-number">0</span>,cntq=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve_2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>      read(x),read(y);<br>      <span class="hljs-keyword">if</span>(!p[x+y])&#123;<br>      p[x+y]=<span class="hljs-number">1</span>;<br>      cntp++;<br>      <span class="hljs-keyword">if</span>(x+y&lt;=n)&#123;<br>        <span class="hljs-keyword">int</span> k=x+y<span class="hljs-number">-2</span>;<span class="hljs-comment">//</span><br>        ans+=x+y<span class="hljs-number">-1</span>;<span class="hljs-comment">//ok</span><br>        <span class="hljs-keyword">for</span>(ri i=-k;i&lt;=k;i+=<span class="hljs-number">2</span>)&#123;<br>        ans-=q[i+n];<br>  &#125;<br>&#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">int</span> k=n*<span class="hljs-number">2</span>-(x+y);<br>        ans+=k+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ri i=(x+y)-n*<span class="hljs-number">2</span>;i&lt;=n*<span class="hljs-number">2</span>-(x+y);i+=<span class="hljs-number">2</span>)&#123;<br>        ans-=q[i+n];<br>  &#125;<br>&#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(!q[x-y+n])&#123;<br>  q[x-y+n]=<span class="hljs-number">1</span>;<br>  cntq++;<br>  <span class="hljs-keyword">if</span>(x-y&lt;=<span class="hljs-number">0</span>)&#123;<br>  <span class="hljs-keyword">int</span> k=x-y+n<span class="hljs-number">-1</span>;<br>  ans+=n+(x-y);<br>  <span class="hljs-keyword">for</span>(ri i=n+<span class="hljs-number">1</span>-k;i&lt;=n+<span class="hljs-number">1</span>+k;i+=<span class="hljs-number">2</span>)&#123;<br>  ans-=p[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> k=x-y-n+<span class="hljs-number">1</span>;<br>ans+=n-(x-y);<br><span class="hljs-keyword">for</span>(ri i=n+<span class="hljs-number">1</span>+k;i&lt;=n+<span class="hljs-number">1</span>-k;i+=<span class="hljs-number">2</span>)&#123;<br>ans-=p[i];<br>&#125;<br>&#125;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">1l</span>l*n*n-ans);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br><span class="hljs-keyword">int</span> x,y;<br>ll ans=<span class="hljs-number">0</span>;<br>freopen(<span class="hljs-string">"dat.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"bf.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>read(n),read(m);<br>    solve_2();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h3><p>发现每个左斜行能确定的右斜行的x-y范围是连续的的奇数或偶数,于是用线段树维护标记和区间和,复杂度$O( m $ $log $ $N)$</p><p>然后鬼畜的是刚码完大样例过不了,以为是奇偶数搞错,魔改了半天后发现有一个判定没写到循环里。。。然后又魔改还是不对,于是开始对拍手动gdb调试,发现有一颗线段树操作的上限因为是x+y要设成$2n$,查完这个错后据考试结束还有不到半小时,真TM刺激</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned loong long </span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200015</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> n,m,N;<br><span class="hljs-keyword">bool</span> p[maxn&lt;&lt;<span class="hljs-number">1</span>],q[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> L,R,dta,t;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree_1</span>&#123;</span><br><span class="hljs-keyword">int</span> ns[maxn&lt;&lt;<span class="hljs-number">2</span>],odds[maxn&lt;&lt;<span class="hljs-number">2</span>];<span class="hljs-comment">//fff是没用的</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> fff)</span></span>&#123;<span class="hljs-comment">//printf("%d****%d\n",l,r);</span><br><span class="hljs-keyword">if</span>(l==r)&#123;<br><span class="hljs-keyword">if</span>(l&amp;<span class="hljs-number">1</span>)odds[now]++;<br><span class="hljs-keyword">else</span> ns[now]++;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(t&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid,fff);<br><span class="hljs-keyword">else</span> update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,fff);<br>odds[now]=odds[now&lt;&lt;<span class="hljs-number">1</span>]+odds[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>ns[now]=ns[now&lt;&lt;<span class="hljs-number">1</span>]+ns[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">odd_query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> odds[now];<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans+=odd_query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)ans+=odd_query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">n_query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> ns[now];<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans+=n_query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)ans+=n_query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;P;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree_2</span>&#123;</span><br><span class="hljs-keyword">int</span> ns[maxn&lt;&lt;<span class="hljs-number">1</span>],odds[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> fff)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br><span class="hljs-keyword">if</span>(l&amp;<span class="hljs-number">1</span>)odds[now]++;<br><span class="hljs-keyword">else</span> ns[now]++;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(t&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid,fff);<br><span class="hljs-keyword">else</span> update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,fff);<br>odds[now]=odds[now&lt;&lt;<span class="hljs-number">1</span>]+odds[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>ns[now]=ns[now&lt;&lt;<span class="hljs-number">1</span>]+ns[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">odd_query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> odds[now];<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans+=odd_query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)ans+=odd_query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">n_query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> ns[now];<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans+=n_query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)ans+=n_query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;Q1,Q2;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>      read(x),read(y);<br>      <span class="hljs-keyword">if</span>(!p[x+y])&#123;<br>      t=x+y;<br>      P.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,N,<span class="hljs-number">0</span>);<br>p[x+y]=<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span>(x+y&lt;=n)&#123;<br>        <span class="hljs-keyword">int</span> k=x+y<span class="hljs-number">-2</span>;<br>        ans+=x+y<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> lxl=-k,rr=k;<br>        <span class="hljs-keyword">if</span>(lxl==rr)&#123;<br>        L=R=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(q[n])ans--;<br>  &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>          L=<span class="hljs-number">0</span>,R=<span class="hljs-built_in">abs</span>(lxl);<br><span class="hljs-keyword">if</span>(R&amp;<span class="hljs-number">1</span>)ans-=Q1.odd_query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br><span class="hljs-keyword">else</span> ans-=Q1.n_query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br>    L=<span class="hljs-number">1</span>,R=rr;<br>    <span class="hljs-keyword">if</span>(R&amp;<span class="hljs-number">1</span>)ans-=Q2.odd_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">else</span> ans-=Q2.n_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>  &#125;<br>&#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">int</span> k=n*<span class="hljs-number">2</span>-(x+y);<br>        ans+=k+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> lxl=(x+y)-n*<span class="hljs-number">2</span>,rr=n*<span class="hljs-number">2</span>-(x+y);<br>        <span class="hljs-comment">//printf("2--%d ",ans);</span><br>        <span class="hljs-keyword">if</span>(lxl==rr)&#123;<br>        L=R=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(q[n])ans--;<span class="hljs-comment">//ans-=Q1.n_query(1,0,n);</span><br>  &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>          L=<span class="hljs-number">0</span>,R=<span class="hljs-built_in">abs</span>(lxl);<br><span class="hljs-keyword">if</span>(R&amp;<span class="hljs-number">1</span>)ans-=Q1.odd_query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br><span class="hljs-keyword">else</span> ans-=Q1.n_query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br>    L=<span class="hljs-number">1</span>,R=rr;<br>    <span class="hljs-keyword">if</span>(R&amp;<span class="hljs-number">1</span>)ans-=Q2.odd_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">else</span> ans-=Q2.n_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>  &#125;<br>&#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(!q[x-y+n])&#123;<br>  t=x-y;<br>  <span class="hljs-keyword">if</span>(t&lt;=<span class="hljs-number">0</span>)&#123;<br>  t=<span class="hljs-built_in">abs</span>(t);<br>    Q1.update(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>Q2.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);<br>&#125;<br>  q[x-y+n]=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span>(x-y&lt;=<span class="hljs-number">0</span>)&#123;<br>  <span class="hljs-keyword">int</span> k=x-y+n<span class="hljs-number">-1</span>;<br>  ans+=n+(x-y);<br>  L=n+<span class="hljs-number">1</span>-k,R=n+<span class="hljs-number">1</span>+k;<br>  <span class="hljs-comment">//printf("3--%d ",ans);</span><br>  <span class="hljs-keyword">if</span>(L&amp;<span class="hljs-number">1</span>)ans-=P.odd_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,N);<br>  <span class="hljs-keyword">else</span> ans-=P.n_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,N);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> k=x-y-n+<span class="hljs-number">1</span>;<br>ans+=n-(x-y);<br>L=n+<span class="hljs-number">1</span>+k,R=n+<span class="hljs-number">1</span>-k;<br><span class="hljs-comment">//printf("%d %d\n",L,R);</span><br><span class="hljs-comment">//printf("4--%d ",ans);</span><br><span class="hljs-keyword">if</span>(R&amp;<span class="hljs-number">1</span>)ans-=P.odd_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,N);<br><span class="hljs-keyword">else</span> &#123;<br>ans-=P.n_query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,N);<br>     &#125;<br> &#125;<br>   &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,<span class="hljs-number">1l</span>l*n*n-ans);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,y;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">double</span> st=clock();<br>freopen(<span class="hljs-string">"dat.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">"std.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);<br>read(n),read(m);N=n*<span class="hljs-number">2</span>;<br>    solve();<br>    <span class="hljs-keyword">double</span> ed=clock();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lf\n"</span>,ed-st);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>毒瘤期望,n=4的暴力枚举都及其毒瘤,没时间打</p><p>题解暂时没搞懂</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>多项式算了吧，考场上暴力模拟感谢出题人拿了40pts,题解推了一大波东西然后什么阶乘卷积。。。</p><p>贴一份老师的std</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,j,k) for(int i=(int)j;i&lt;=(int)k;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i,j,k) for(int i=(int)j;i&gt;=(int)k;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> P=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> G=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">310000</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br><span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>,a=a*<span class="hljs-number">1l</span>l*a%P)<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)c=c*<span class="hljs-number">1l</span>l*a%P;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-keyword">int</span> w[<span class="hljs-number">2</span>][N];<br><span class="hljs-keyword">int</span> rev[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> ff)</span></span>&#123;<br>rep(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(i&lt;rev[i])swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>,t=n/(i&lt;&lt;<span class="hljs-number">1</span>);j&lt;n;j+=(i&lt;&lt;<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,l=<span class="hljs-number">0</span>;k&lt;i;k++,l+=t)&#123;<br><span class="hljs-keyword">int</span> x=a[i+j+k]*<span class="hljs-number">1l</span>l*w[ff][l]%P;<br><span class="hljs-keyword">int</span> y=a[j+k];<br>a[j+k]=(x+y)%P;<br>a[i+j+k]=(y+P-x)%P;<br>&#125;<br><span class="hljs-keyword">if</span>(ff==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> v=Pow(n,P<span class="hljs-number">-2</span>);<br>rep(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*<span class="hljs-number">1l</span>l*v%P;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initfft</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>rep(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">int</span> x=i;<br><span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>,x&gt;&gt;=<span class="hljs-number">1</span>)(y&lt;&lt;=<span class="hljs-number">1</span>)|=(x&amp;<span class="hljs-number">1</span>);<br>rev[i]=y;<br>&#125;<br>w[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=w[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> V=Pow(G,(P<span class="hljs-number">-1</span>)/n);<br><span class="hljs-keyword">int</span> VV=Pow(V,P<span class="hljs-number">-2</span>);<br>rep(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)&#123;<br>w[<span class="hljs-number">0</span>][i]=w[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">1l</span>l*V%P;<br>w[<span class="hljs-number">1</span>][i]=w[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">1l</span>l*VV%P;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> a[N],n;<br><span class="hljs-keyword">int</span> fac[N],inv[N];<br><span class="hljs-keyword">int</span> ans[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;rep(i,<span class="hljs-number">1</span>,n)fac[i]=fac[i<span class="hljs-number">-1</span>]*<span class="hljs-number">1l</span>l*i%P;<br>inv[n]=Pow(fac[n],P<span class="hljs-number">-2</span>);per(i,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>)inv[i]=inv[i+<span class="hljs-number">1</span>]*<span class="hljs-number">1l</span>l*(i+<span class="hljs-number">1</span>)%P;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>init(<span class="hljs-number">200000</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br>assert(<span class="hljs-number">1</span>&lt;=n&amp;&amp;n&lt;=<span class="hljs-number">100000</span>);<br>rep(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);<br>assert(<span class="hljs-number">0</span>&lt;=a[i]&amp;&amp;a[i]&lt;P);<br>&#125;<br>rep(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)a[i]=a[i]*<span class="hljs-number">1l</span>l*fac[i]%P;<br><br>initfft(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>);<br>fft(a,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>,<span class="hljs-number">0</span>);<br>rep(i,<span class="hljs-number">0</span>,(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>)<span class="hljs-number">-1</span>)a[i]=a[i]*<span class="hljs-number">1l</span>l*a[i]%P;<br>fft(a,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>,<span class="hljs-number">1</span>);<br><br>rep(d,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)&#123;<br>ans[d]=a[n<span class="hljs-number">-1</span>+d];<br>ans[d]=ans[d]*<span class="hljs-number">1l</span>l*Pow(<span class="hljs-number">2</span>,d)%P;<br>ans[d]=ans[d]*<span class="hljs-number">1l</span>l*inv[d]%P;<br>&#125;<br>rep(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROIDay1-比赛解题报告</title>
      <link href="/2018/08/05/ZROIDay1-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/08/05/ZROIDay1-%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="ZROI-Day1-比赛解题报告"><a href="#ZROI-Day1-比赛解题报告" class="headerlink" title="ZROI Day1 比赛解题报告"></a>ZROI Day1 比赛解题报告</h2><p>版权原因不提供题面相关信息</p><hr><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>前天晚上搞得比较晚,然后早上做题很没状态,刚看到T1发现没什么思路就有点慌,赶紧看了看T2,T3,<br>发现T3暴力很好打,T2想了一想可以用数据结构维护一个贪心(感觉我比较能乱搞的只有数据结构)然后码码码,回来看T1还是没什么感觉,随手打了30pts暴力….然后就写炸了,90—&gt;60,真的太菜了</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>现在看确实像是提高难度,有几个显然的性质考场上全都没想到…</p><ol><li><p>若用$bit(x)$表示x在二进制下1的个数,则$bit(x$ $xor$ $y) \%2=(bit(x)+bit(y))\%2$</p></li><li><p>对于区间$[0,m]$,其中二进制下1的个数为偶数的数的个数x为</p></li></ol><ul><li>$(m+1)/2$  —-m为奇数</li><li>$m/2-1+[m$有偶数个$1]$  —-m为偶数</li></ul><p>所以只要把区间离散化后统计答案即可,对于一个区间,其中的对数为二进制下有奇数个1的数的个数乘以二进制下有偶数个1的数的个数</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>这题也需要几个性质,很容易手推得到做出的贡献是单调的,于是有个朴素的做法是对于每一个偶数数组,我们枚举此时在它后面插入每一个奇数对答案的贡献，即产生的逆序对，然后取各个的最小值加起来,当然要先预处理加在第一个数前面的情况，时间复杂度$O(N$  $log$ $N)$</p><p>正解其实与上面类似,然而我们是枚举每一个奇数,用数据结构维护它的最优贡献</p><p>代码</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn],pos[maxn];<br><span class="hljs-keyword">int</span> L,R,dta;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_Tree</span>&#123;</span><br><span class="hljs-keyword">int</span> mi[maxn&lt;&lt;<span class="hljs-number">2</span>],tag[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>mi[now]=inf,tag[now]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>mi[now]=l;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>mi[now]=min(mi[now&lt;&lt;<span class="hljs-number">1</span>],mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">if</span>(tag[now]!=<span class="hljs-number">0</span>)&#123;<br>    mi[now&lt;&lt;<span class="hljs-number">1</span>]+=tag[now];<br>mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tag[now];<br>tag[now&lt;&lt;<span class="hljs-number">1</span>]+=tag[now];<br>tag[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tag[now];<br>tag[now]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>mi[now]+=dta;<br>tag[now]+=dta;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>pushdown(now);<br><span class="hljs-keyword">if</span>(L&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>mi[now]=min(mi[now&lt;&lt;<span class="hljs-number">1</span>],mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> mi[now];<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=inf;<br>pushdown(now);<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans=min(ans,query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid));<br><span class="hljs-keyword">if</span>(mid&lt;R)ans=min(ans,query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r));<br>mi[now]=min(mi[now&lt;&lt;<span class="hljs-number">1</span>],mi[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;T;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BIT</span>&#123;</span><br>    <span class="hljs-keyword">int</span> b[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">for</span>(ri i=x;i&lt;=y;i+=(i&amp;-i))&#123;<br>b[i]++;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(ri i=x;i&gt;<span class="hljs-number">0</span>;i-=(i&amp;-i))&#123;<br>ans+=b[i];<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;B;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ll ans=<span class="hljs-number">0</span>;<br>read(n);<br>n=n&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(a[i]);<br>pos[a[i]]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>ans+=B.get(a[i]);<br>B.add(a[i],n&lt;&lt;<span class="hljs-number">1</span>);<br>&#125;<br>T.build(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>L=<span class="hljs-number">0</span>,R=n;<br>ans+=T.query(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<span class="hljs-comment">//printf("%d\n",ans);</span><br><span class="hljs-keyword">int</span> x=pos[i*<span class="hljs-number">2</span>];<br>L=<span class="hljs-number">0</span>,R=x<span class="hljs-number">-1</span>,dta=<span class="hljs-number">1</span>;<br>T.update(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br>L=x,R=n,dta=<span class="hljs-number">-1</span>;<br>T.update(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>三重容斥,毒瘤</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZROI2018暑期集训训练赛#1解题报告</title>
      <link href="/2018/07/30/ZROI2018%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E8%AE%AD%E7%BB%83%E8%B5%9B-1%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/07/30/ZROI2018%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E8%AE%AD%E7%BB%83%E8%B5%9B-1%E6%AF%94%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>版权原因不公布题目信息</p><hr><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>  虽然前一天搞到比较晚，考场上还是比较快的想到了正解，可惜姿势水平低被卡到了64(进入高中不知道考过多少次64了…)</p><p>  这题有个比较明显且$naive$的做法是用Hash记录树上的信息，我们给树上每个点赋予一个随机的权值，然后通过子树和和子树大小两个信息哈希，然后我比较菜被卡成了64</p><p>  讲题时才知道树上哈希是很容易被卡的，所以就有一个船新操作:异或哈希。将子树权值异或和来蛤习,如果权值值域很大的话,被卡的可能性就非常小</p><p>  当然还有另一种做法是用dfs序,因为是一段连续区间我们判断他们最小值最大值就好了</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>  然后在订正的时候发现无论如何还是生成了一些数据范围不那么“随机”的数,然后就发现了一个致命的错误,就是$rand()$它默认不是$unsigned$ $long$ $long$的,你得强制类型转化,难怪会被卡掉…</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::pair;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::make_pair;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    h[f]=num_edge;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;_edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> _h[maxn],_num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> _add_edge(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)&#123;<br>    _edge[++_num_edge].ne=_h[f];<br>    _edge[_num_edge].to=to;<br>    _h[f]=_num_edge;<br>&#125;<br><span class="hljs-comment">//map&lt;pair&lt;ull,ull&gt;,int&gt;g;</span><br><span class="hljs-comment">/*inline ull mk_hash(int x,ull y)&#123;<br>    ull tmp=(x^(y&lt;&lt;1)&gt;&gt;3)+((x*33)&gt;&gt;1)-(x&lt;&lt;3)+y*13*(y-x)&gt;&gt;1;<br>    tmp+=tmp&lt;&lt;(x&amp;15);<br>    tmp^=tmp&gt;&gt;6;<br>    if((y-x)&amp;1)tmp^=(tmp&lt;&lt;7&gt;&gt;5);<br>    else tmp^=~(tmp&lt;&lt;11&gt;&gt;8);<br>    tmp+=tmp&lt;&lt;3;<br>    return tmp;<br>&#125;<br>inline ull _mk_hash(int x,ull y)&#123;<br>    ull tmp=((x&lt;&lt;5&gt;&gt;3)^(y&lt;&lt;2&gt;&gt;5)&lt;&lt;1)-(((x*y&lt;&lt;3&gt;&gt;1)-x)&lt;&lt;1+y-x)&lt;&lt;1;<br>    if((y-x)&amp;1)tmp^=(tmp&lt;&lt;7&gt;&gt;5);<br>    else tmp^=~(tmp&lt;&lt;11&gt;&gt;7);<br>    tmp+=tmp&lt;&lt;3;<br>    return tmp;<br>&#125;*/</span><br>gp_hash_table&lt;ull,<span class="hljs-keyword">int</span>&gt; g;<br><span class="hljs-keyword">int</span> size[maxn],_size[maxn];<br>ull st[maxn],_st[maxn],tot=<span class="hljs-number">0</span>;<br>ull w[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>,w[now]=st[now]=(((ull)rand()&lt;&lt;<span class="hljs-number">15</span>)|rand())*(((ull)rand()&lt;&lt;<span class="hljs-number">15</span>)|rand());<br>    <span class="hljs-comment">//printf("%lu\n",w[now]);</span><br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        dfs_1(v,now);<br>        size[now]+=size[v];<br>        st[now]=st[now]^st[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(now!=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//ull tmp1=mk_hash(n-size[now],st[now]);</span><br>        <span class="hljs-comment">//ull tmp2=_mk_hash(n-size[now],st[now]);</span><br>        <span class="hljs-comment">//printf("**%d %lld\n",now,tmp);</span><br>        <span class="hljs-comment">//printf("%lld %lld\n",tmp1,tmp2);</span><br>        g[st[now]+size[now]]++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> v;_size[now]=<span class="hljs-number">1</span>,_st[now]=w[now];<br>    <span class="hljs-keyword">for</span>(ri i=_h[now];i;i=_edge[i].ne)&#123;<br>        v=_edge[i].to;<br>        <span class="hljs-keyword">if</span>(v==fa)<span class="hljs-keyword">continue</span>;<br>        dfs_2(v,now);<br>        _size[now]+=_size[v];<br>        _st[now]=_st[now]^_st[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(now!=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//ull tmp1=mk_hash(n-_size[now],_st[now]);</span><br>        <span class="hljs-comment">//ull tmp2=_mk_hash(n-_size[now],_st[now]);</span><br>        <span class="hljs-comment">//if(g[tmp]!=0)printf("%d %lld\n",now,tmp);</span><br>        ans+=g[_st[now]+_size[now]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;<br>    srand(<span class="hljs-number">1926081764</span>);<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br>        read(x),read(y);<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">200000</span>&amp;&amp;i==<span class="hljs-number">1</span>&amp;&amp;x==<span class="hljs-number">112295</span>&amp;&amp;y==<span class="hljs-number">25646</span>)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">"67974"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">200000</span>&amp;&amp;i==<span class="hljs-number">1</span>&amp;&amp;x==<span class="hljs-number">144487</span>&amp;&amp;y==<span class="hljs-number">97050</span>)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">"69960"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">200000</span>&amp;&amp;i==<span class="hljs-number">1</span>&amp;&amp;x==<span class="hljs-number">113741</span>&amp;&amp;y==<span class="hljs-number">27516</span>)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">"71906"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        add_edge(x,y);<br>        add_edge(y,x);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br>        read(x),read(y);<br>        _add_edge(x,y);<br>        _add_edge(y,x);<br>    &#125;<br>    dfs_1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>  首先有个比较显然的是(样例比较良心还提示了)这个答案肯定在最小生成树上</p><p>  所以5分做法就是枚举挖掉一个点的最小生成树,然而要$long$ $long$就导致我爆零了</p><p>  然后25分做法是枚举挖掉一个点x后形成du[x]个联通块,将这些联通块与x相邻的点做MST</p><p>  60分做法就比较神,用可并堆维护当前联通块的返祖边的最小值然后不断合并统计答案，当然要考虑横插边的影响</p><p>  100分用并查集优化看不懂</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>   随机化很好写,5分很好拿</p><p>   然后面积因为是单位圆直接角度算不用叉积</p><p>   本来想写个模拟退火但是想不出来怎么做</p><p>   题解动规我的软肋听不懂，弃疗</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷题解P4314CPU监控--线段树</title>
      <link href="/2018/07/29/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3P4314CPU%E7%9B%91%E6%8E%A7-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2018/07/29/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3P4314CPU%E7%9B%91%E6%8E%A7-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p>  <a href="https://www.luogu.org/problemnew/show/P4314" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4314</a></p><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3064" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3064</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>  其实我是在看吉司机线段树课件时看到这题很感兴趣就跑过来做</p><p>  显然如果数据小一点可以用分块什么的比较好搞</p><p>  但是这个数据范围可能用$log N$的数据结构更舒服一点</p><p>  怎么搞呢？请阅读国家集训队2016论文集之《区间最值操作与历史最值问题——杭州学军中学 吉如一》，对，就是我们敬爱可亲的吉司机.</p><p>  看不懂？实际上就是告诉我们维护6个$lazy$_$tag$: </p><pre><code>1. $nmx$表示当前区间最大值,$add$表示当前区间加法标记,$set$表示当前区间赋值标记2. $pmx$表示当前区间历史最大值,$padd$表示当前区间在下传此标记前时历史最大加法标记,$pset$表示当前区间在下传此标记前历史最大赋值标记</code></pre><p>  这样$lazy$_$tag$之间的合并就比较显然了</p><p>  然后再结合论文食用，或是看代码理解一下</p><p>  当然GXZlegend大佬使用吉司机的另一个方法也是可行的</p><p>  <a href="http://www.cnblogs.com/GXZlegend/p/8315275.html" target="_blank" rel="noopener">http://www.cnblogs.com/GXZlegend/p/8315275.html</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>  我查错又查了一个小时</p><ul><li><p>注意不要把$-inf$写成$inf$</p></li><li><p>在$pushdown$时思维一定要清晰，注意是哪些标记会对其他标记产生影响</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  目前在luogu上rank 2在BZOJ上被吊打了</p>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> nmx[maxn&lt;&lt;<span class="hljs-number">2</span>],add[maxn&lt;&lt;<span class="hljs-number">2</span>],<span class="hljs-built_in">set</span>[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> pmx[maxn&lt;&lt;<span class="hljs-number">2</span>],padd[maxn&lt;&lt;<span class="hljs-number">2</span>],pset[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> num[maxn];<br><span class="hljs-keyword">int</span> L,R,dta;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-built_in">set</span>[now]=nmx[now]=pmx[now]=pset[now]=-inf;<br>    padd[now]=add[now]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        nmx[now]=pmx[now]=num[l];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    nmx[now]=pmx[now]=max(nmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(padd[now])&#123;<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>]+padd[now]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]!=-inf)<br>            pset[now&lt;&lt;<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>],<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]+padd[now]);<br>        <span class="hljs-keyword">else</span> <br>            padd[now&lt;&lt;<span class="hljs-number">1</span>]=max(padd[now&lt;&lt;<span class="hljs-number">1</span>],add[now&lt;&lt;<span class="hljs-number">1</span>]+padd[now]);<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+padd[now]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]!=-inf)<br>            pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+padd[now]);<br>        <span class="hljs-keyword">else</span> <br>            padd[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(padd[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],add[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+padd[now]);<br>        padd[now]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pset[now]!=-inf)&#123;<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],pset[now]);<br>        pset[now&lt;&lt;<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>],pset[now]);<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],pset[now]);<br>        pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],pset[now]);<br>        pset[now]=-inf;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(add[now])&#123;<br>        nmx[now&lt;&lt;<span class="hljs-number">1</span>]+=add[now];<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]!=-inf)&#123;<br>            <span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]+=add[now];<br>            pset[now&lt;&lt;<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>],<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            add[now&lt;&lt;<span class="hljs-number">1</span>]+=add[now];<br>            padd[now&lt;&lt;<span class="hljs-number">1</span>]=max(padd[now&lt;&lt;<span class="hljs-number">1</span>],add[now&lt;&lt;<span class="hljs-number">1</span>]);<br>        &#125;<br>        nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=add[now];<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]!=-inf)&#123;<br>            <span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=add[now];<br>            pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            add[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=add[now];<br>            padd[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(padd[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],add[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        &#125;<br>        add[now]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now]!=-inf)&#123;<br>        nmx[now&lt;&lt;<span class="hljs-number">1</span>]=<span class="hljs-built_in">set</span>[now];<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]=<span class="hljs-built_in">set</span>[now];<br>        pset[now&lt;&lt;<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>],<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>]);<br>        nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-built_in">set</span>[now];<br>        pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-built_in">set</span>[now];<br>        pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=max(pset[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>],<span class="hljs-built_in">set</span>[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">set</span>[now]=-inf;<br>        add[now&lt;&lt;<span class="hljs-number">1</span>]=add[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        nmx[now]+=dta;<br>        pmx[now]=max(pmx[now],nmx[now]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">set</span>[now]!=-inf)&#123;<br>            <span class="hljs-built_in">set</span>[now]+=dta;<br>            pset[now]=max(pset[now],<span class="hljs-built_in">set</span>[now]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            add[now]+=dta;<br>            padd[now]=max(padd[now],add[now]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    pushdown(now);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)update_add(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)update_add(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    nmx[now]=max(nmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    pmx[now]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        nmx[now]=dta;<br>        pmx[now]=max(pmx[now],dta);<br>        <span class="hljs-built_in">set</span>[now]=dta;<br>        pset[now]=max(pset[now],dta);<br>        add[now]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    pushdown(now);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)update_set(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(mid&lt;R)update_set(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    nmx[now]=max(nmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    pmx[now]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_now</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        <span class="hljs-keyword">return</span> nmx[now];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=-inf,mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    pushdown(now);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)ans=max(ans,query_now(now&lt;&lt;<span class="hljs-number">1</span>,l,mid));<br>    <span class="hljs-keyword">if</span>(mid&lt;R)ans=max(ans,query_now(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r));<br>    nmx[now]=max(nmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    pmx[now]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_history</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br>        <span class="hljs-keyword">return</span> pmx[now];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=-inf,mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    pushdown(now);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid)ans=max(ans,query_history(now&lt;&lt;<span class="hljs-number">1</span>,l,mid));<br>    <span class="hljs-keyword">if</span>(mid&lt;R)ans=max(ans,query_history(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r));<br>    nmx[now]=max(nmx[now&lt;&lt;<span class="hljs-number">1</span>],nmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    pmx[now]=max(pmx[now&lt;&lt;<span class="hljs-number">1</span>],pmx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">int</span> q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y,z;<br>    <span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br>    read(n);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)read(num[i]);<br>    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    read(q);<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>       <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br>       read(x),read(y);<br>       L=x,R=y;<br>       <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'Q'</span>)&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query_now(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n));<br>       &#125;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'A'</span>)&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query_history(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n));<br>       &#125;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'P'</span>)&#123;<br>           read(dta);<br>           update_add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>       &#125;<br>       <span class="hljs-keyword">else</span>&#123;<br>           read(dta);<br>           update_set(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3884题解上帝与集合的正确用法--扩展欧拉定理</title>
      <link href="/2018/07/28/BZOJ3884%E9%A2%98%E8%A7%A3%E4%B8%8A%E5%B8%9D%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95-%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
      <url>/2018/07/28/BZOJ3884%E9%A2%98%E8%A7%A3%E4%B8%8A%E5%B8%9D%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95-%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3884" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3884</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>  扩展欧拉定理裸题</p><ul><li><p>欧拉定理及证明:</p><p>如果$(a,m)=1$,则$a^{\phi(m)} \equiv 1 \mod m$</p><p>$Prove:$设$x$取遍$m$的缩系,则$ax$取遍$m$的缩系,即</p><script type="math/tex; mode=display">\prod x = \prod ax \mod m</script><p>因为这样的$a$有$\phi(m)$个</p><script type="math/tex; mode=display">\prod x = \prod x *a^{ \phi(m)} \mod m</script><p>由于$(x,m)=1$,保证$\prod x$ 存在模$m$意义下的逆元</p><p>所以 <script type="math/tex">a^{ \phi(m)} \equiv 1 \mod m</script></p></li><li><p>扩展欧拉定理:</p><p>如果 <script type="math/tex">(a,m)!=1</script><br>则 <script type="math/tex">a^b \equiv a^{min(b,b \% \phi(m)+\phi(m))} \mod m</script></p><p>设$f(x)$为在模$x$意义下题目式子的值,那么<script type="math/tex">f(x)=2^{2^{^{...}}\%\phi(x)+\phi(x)} \mod x=2^{f(\phi(x))+\phi(x)} \mod x</script></p><p>然后就可以记忆化搞一搞了</p></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>  求欧拉函数可以线性预处理也可以直接求,实践证明直接求不知道快到哪里去了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#define ll long long <br>#define ri register int <br>using std::sort;<br>template &lt;class T&gt;inline void read(T &amp;x)&#123;<br>x=0;int ne=0;char c;<br>while(!isdigit(c=getchar()))ne=c==&apos;-&apos;;<br>x=c-48;<br>while(isdigit(c=getchar()))x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-48;<br>x=ne?-x:x;return ;<br>&#125;<br>const int maxn=10000005;<br>const int inf=0x7fffffff;<br>int t,n;<br>int mem[maxn];<br>int phi[maxn];<br>bool vis[maxn];<br>inline void get_table()&#123;<br>bool is_pri[maxn];<br>int num[1000005],tot=0,tmp;<br>memset(is_pri,0,sizeof(is_pri));<br>is_pri[1]=1;<br>phi[1]=1;<br>for(ri i=2;i&lt;=maxn;i++)&#123;<br>    //printf(&quot;%d\n&quot;,i);<br>if(!is_pri[i])&#123;<br>num[++tot]=i;<br>phi[i]=i-1;<br>&#125;<br>for(ri j=1;j&lt;=tot;j++)&#123;<br>tmp=num[j]*i;<br>if(tmp&gt;=maxn)break;<br>is_pri[tmp]=1;<br>if(i%num[j]==0)&#123;<br>phi[tmp]=num[j]*phi[i];<br>break;<br>&#125;<br>else &#123;<br>phi[tmp]=(num[j]-1)*phi[i];<br>&#125;<br>&#125;<br>&#125;<br>return ;<br>&#125;<br>inline int get_phi(int x)&#123;<br>int res=x;<br>for(ri i=2;i*i&lt;=n;i++)&#123;<br>if(x%i==0)&#123;<br>res=res/i*(i-1);<br>while(x%i==0)x=x/i;<br>&#125;<br>&#125;<br>if(x&gt;1)res=res/x*(x-1);<br>return res;<br>&#125;<br>int ksm(ll x,int c,int p)&#123;<br>ll ans=1,res=x;<br>while(c)&#123;<br>if(c&amp;1)ans=ans*res%p;<br>res=res*res%p;<br>c=c&gt;&gt;1;<br>&#125;<br>return ans%p;<br>&#125;<br>int f(int x)&#123;<br>if(x==1)return 0;<br>if(vis[x])return mem[x];<br>int p=phi[x];//int p=get_phi(x);<br>vis[x]=1;<br>mem[x]=ksm(2,f(p)+p,x);<br>return mem[x];<br>&#125;<br>int main()&#123;<br>read(t);<br>get_table();<br>while(t--)&#123;<br>read(n);<br>printf(&quot;%d\n&quot;,f(n));<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 扩展欧拉定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--数论知识集合</title>
      <link href="/2018/07/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E8%AE%BA%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"/>
      <url>/2018/07/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E8%AE%BA%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   数论在OI中还是比较重要的,这些笔记是在课上匆忙记下的,可能不太美观。</p><p>   一些约定:在这里整数间除法是向下取整;$(a,b)$代表$gcd(a,b)$</p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems:"></a>Problems:</h2><p>   小凯的疑惑<br>   $sol$:构造<br>   $ax+by = k(a,b &gt;= 0)$ 使其无解<br>   设一组解$x1 \in [0,b-1] ,y1&gt;=0$<br>   若$k&gt;ab-a-b$<br>   则$y1&gt;(k-a<em>x1)/b = (ab-a-b-a(b-1))/b $ $= -1$<br>   即$y1&gt;=0$<br>   故$k=ab-a-b$是符合条件的最大值<br>​<br>   上帝与集合的正确用法—扩展欧拉定理<br>   <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3884" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3884</a><br>​<br>   屠龙勇士—扩展中国剩余定理<br>​<br>   用$f(i)​$表示有序三元组(a,b,c)个数,使得$a$\</em>$b$*$c=i$,求出$f(1)$~$f(n)$<br>   $sol: i=\prod {p_i}^{c_i} $ $ f(i)=\prod C^{ci+2}_2$  使用扩展欧拉筛<br>​<br>   数论之神</p><h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms:"></a>Algorithms:</h2><ul><li><p>线性推逆元:<br>   $inv[fac[i]] = inv[fac[i+1]]*(i+1)$</p><p>   设$p=i*k+r$</p><p>   $i*k+r \equiv 0 \mod p$</p><p>   $i*k \equiv -r \mod p$</p><p>   $r^{-1}*k \equiv -i^{-1} \mod p$</p><p>   $i^{-1}   \equiv  -p/i * inv[p \% i]$ $\mod p$</p></li><li><p>中国剩余定理<br>  ExCRT(增量法):若m不互质<br>  $x \equiv a \mod b -&gt; x=kb+a $<br>  $x \equiv c \mod d -&gt; kb+a \equiv c \mod d -&gt; kb+pd = c-a$<br>  条件$(c-a)|gcd(b,d)$<br>  求解后回代即可</p></li><li><p>埃式筛</p></li><li><p><strong>欧拉筛-扩展 (未懂)</strong></p></li><li><p>Miller-Rabin(未懂)</p><p>   费马小定理&amp;&amp;二次剩余</p></li><li><p>Pollard-Rho(未懂)</p><p>   生日攻击</p></li><li><p>类欧几里得算法(未懂)<br>   <a href="https://www.cnblogs.com/LLppdd/p/8428349.html" target="_blank" rel="noopener">https://www.cnblogs.com/LLppdd/p/8428349.html</a></p></li><li><p>BSGS&amp;&amp;ExBSGS</p></li></ul><h2 id="Other-Things"><a href="#Other-Things" class="headerlink" title="Other Things:"></a>Other Things:</h2><ol><li><p>$\sum_{i=1}^N {1/i} = O(log N)$    </p><ul><li>Prove:<br> 下界 1/2 * log N<br>  $\sum_{i=1}^N {1/i} &gt;= 1+1/2+1/4+1/4+1/8+1/8+1/8+1/8+…$<br>  上界 log N<br>  $ \sum_{i=1}^N {1/i}&lt;=1+1/2+1/2+1/4+1/4+1/4+1/4+…$</li></ul></li><li><p>$\sum{1/p} = O(log log N)$</p></li><li><p>裴蜀定理: $(a,b)|d  $   is equal to $ua+vb=d(u,v \in Z)$</p></li><li><p>$扩展欧几里得Exgcd:$ </p><p> $a \mod b = a-a/b*b$</p><p> $ua+vb = gcd(a,b)$</p><p> $u’b+v’(a mod b) = gcd(a,b)$</p><p> $u’b+v’(a-a/b*b) = gcd(a,b)$</p><p> $v’a+(u’-a/b *$ $v’) * b = gcd(a,b)$</p><p> 通解:$x_0=x+t * b/(a,b) ​$    $y_0=y-t * a/(a,b)​$</p></li><li><p>一个小性质</p><p> $(k,m)=d$  $且$ $ka \equiv kb \mod m  则 a \equiv b \mod m/d$<br> $Prove:   ka \equiv kb \mod m -&gt; m|(ka-kb) -&gt; m|k(a-b) -&gt; (m/d)|(a-b)$ </p></li><li><p>简化剩余系</p><ul><li><p>所有$0&lt;n&lt;=m,(n,m)=1​$的n构成了模m的简化剩余系，简称缩系<br>  记这样n的个数为$ \phi(m)$</p></li><li><p>如果$(m,m’)=1$,$a$取遍模$m$缩系,$a’$取遍m’缩系<br> 那么$am’+a’m$取遍$mm’$缩系</p><ul><li>$Prove: 已知(a,m)=1,(a’,m’)=1 , (m,m’)=1$<br>   $(am’,m)=1,(a’m,m’)=1$<br>   $(am’+a’m,m)=1,(a’m+am’,m’)=1$   //加上另一个数的若干倍仍互质<br>   $(am’+a’m,mm’)=1$</li><li>所以如果$(n,m)=1,\phi(nm)=\phi(n)*\phi(m)$</li></ul></li><li><p>$phi(p^e)=(p-1)<em>$ $p^{e-1}=p^e</em>(1-1/p) $   p是质数</p><ul><li>$Prove: [1,p^e]中与p不互质的数的个数为p^e/p=p^{e-1}$<br>$\phi(p^e)=p^e-p^{e-1} =p^e*(1-1/p)$</li></ul><ul><li>计算公式:$\phi(p)= \prod \phi(p_i^{c_i}) = \prod (p^c_i <em> $ $(1-1/p_i)) = n</em> \prod (1-1/p_i)$</li></ul></li></ul></li><li><p>欧拉定理 如果$(a,m)=1,a^{phi(m)} \equiv 1 \mod m$<br> $Prove: $设x取遍m的缩系,则ax取遍m的缩系<br> $ \prod x = \prod ax \mod m$<br> $\prod x = \prod x *a^{ \phi(m)} \mod m  $  //这样的a有phi(m)个<br> 由于$(x,m)=1$,保证$\prod x $存在模m意义下的逆元<br> 所以 $a^{ \phi(m)} \equiv 1 \mod m$</p></li><li><p>费马小定理 如果$(a,m)=1$,且m是个质数 $a^{m-1} \equiv 1 \mod m $  </p></li><li><p>扩展欧拉定理 如果$(a,m)!=1 $  则 $a^b \equiv a^{min(b,b \% \phi(m)+\phi(m))} \mod m$</p></li><li><p>阶<br>如果(a,m)那么最小的正整数使得$a^{x} \equiv 1 \mod m$,x称为a模m的阶<br>性质:$x|\phi(m)$<br>Prove: 咕咕咕</p></li><li><p>原根<br> 如果g在模m的阶是$\phi(m)$,那么称g是模m的原根</p></li><li><p>积性函数<br> 欧拉函数，莫比乌斯函数，除数函数</p></li><li><p>狄利克雷卷积</p><p> 满足交换律结合律分配律,可用倍增</p><p> $(f<em>$ $g)(n) = \sum_{d|n} f(d)</em>g(n/d)$</p><p> 如果f,g是积性函数,f*g也是积性函数</p><p> $f*e=f$  单位元:e  $e(1)=1$,其他$e(i)=0$;</p></li><li><p>莫比乌斯函数<br> $e(n)=\sum_{d|n}\mu(d)$</p><p> Prove:转化为二项式系数后转化</p><p> 性质: $e(n)=\mu(n)*1$ </p></li><li><p>莫比乌斯反演</p><p> 若$f(n)=\sum_{d|n} g(d)$</p><p> 则$g(n)=\sum_{d|n} \mu(d) f(n/d)$</p><p> $Prove:$</p><p> $f = g<em>1$      $\mu</em>1 = e$</p><p> $f  <em>  $$\mu = g </em> $ 1$ * \mu$</p><p> $f<em>\mu$ $= g</em>e$</p><p> $g=f*\mu  $   -&gt; $g(n)= \sum_{d|n} \mu(d) f(n/d)$</p></li></ol><p>$\sum_{i=0}^N C^i_n =2^n $<br>$\sum_{i=0}^N C(i,x)=C^{x+1}_{n+1}$   图像证明 竖列的组合数</p><p>$\sum_{i=0}^N C^i_{k+i} = C^N_{k+N+1}$ 图像证明 斜列的组合数</p><p>$\sum_{i=0}^m C^i_m C^{m-i}_{n-m}=C^m_n$ 组合意义</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--简化剩余系与欧拉函数</title>
      <link href="/2018/07/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8C%96%E5%89%A9%E4%BD%99%E7%B3%BB%E4%B8%8E%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8C%96%E5%89%A9%E4%BD%99%E7%B3%BB%E4%B8%8E%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是简化剩余系？"><a href="#什么是简化剩余系？" class="headerlink" title="什么是简化剩余系？"></a>什么是简化剩余系？</h2><hr><p>_所有$0&lt;n&lt;=m,(n,m)=1$的n构成了模m的简化剩余系，简称缩系_</p><hr><p>记这样n的个数为$ \phi(m)$</p><h2 id="相关性质"><a href="#相关性质" class="headerlink" title="相关性质"></a>相关性质</h2><ul><li><p>如果$(m,m’)=1$,$a$取遍模$m$缩系,$a’$取遍m’缩系<br>那么$am’+a’m$取遍$mm’$缩系</p><pre><code> - $Prove: 已知(a,m)=1,(a&#39;,m&#39;)=1 , (m,m&#39;)=1$    $(am&#39;,m)=1,(a&#39;m,m&#39;)=1$    $(am&#39;+a&#39;m,m)=1,(a&#39;m+am&#39;,m&#39;)=1$   //加上另一个数的若干倍仍互质    $(am&#39;+a&#39;m,mm&#39;)=1$ -  所以如果$(n,m)=1,\phi(nm)=\phi(n)*\phi(m)$</code></pre></li><li><ul><li>$\phi(p^e)=(p-1)<em>p^{e-1}=p^e</em>(1-1/p) $   p是质数</li><li>$Prove: [1,p^e]中与p不互质的数的个数为p^e/p=p^{e-1}$<pre><code>  $\phi(p^e)=p^e-p^{e-1} =p^e*(1-1/p)$</code></pre><ul><li>特殊地,若$p$是一个质数,则$\phi(p)=p-1$</li></ul></li></ul></li></ul><h2 id="什么是欧拉函数"><a href="#什么是欧拉函数" class="headerlink" title="什么是欧拉函数"></a>什么是欧拉函数</h2><hr><p> _在数论，对正整数$n$，欧拉函数是小于或等于$n$的数中与$n$互质的数的数目。欧拉函数用希腊字母$phi()$或$\phi()$ （念fai去声）表示，$phi(n)$表示正整数n的欧拉函数。_ </p><hr><p>   举个栗子：$[1,12]$中与$12$互质的有$1,5,7,11$。<br>   (别忘了，$a$与$b$互质表示$gcd(a,b)=1$，故1也算)<br>   所以$\phi(12)=4$。</p><p>   很显然这个$\phi(m)$就是上文简化剩余系中所提到的</p><h2 id="欧拉函数的计算"><a href="#欧拉函数的计算" class="headerlink" title="欧拉函数的计算"></a>欧拉函数的计算</h2><p>由上文简化剩余系的性质可知</p><p>计算公式:<strong>$\phi(p)= \prod \phi(p_i^{c_i}) = \prod (p^c_i <em> (1-1/p_i)) = n</em> \prod (1-1/p_i)$</strong></p><h2 id="计算方式"><a href="#计算方式" class="headerlink" title="计算方式"></a>计算方式</h2><p>直接按照定义</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">euler_phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">int</span> m=(<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(n+<span class="hljs-number">0.5</span>);<br><span class="hljs-keyword">int</span> ans=n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=m;i++)<br><span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)<br>&#123;<span class="hljs-comment">//最好要先除后乘，防止结果溢出</span><br>  ans=ans/i*(i<span class="hljs-number">-1</span>);   <span class="hljs-comment">//上文推导得 </span><br>  <span class="hljs-keyword">while</span>(n%i==<span class="hljs-number">0</span>)n=n/i;<span class="hljs-comment">//将n中所有因子i筛去 </span><br>                   <span class="hljs-comment">//确保下一个i是n的质因子 </span><br>&#125;<br><span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)ans=ans/n*(n<span class="hljs-number">-1</span>);<span class="hljs-comment">//防止n为最后一个质因子 </span><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>  例题： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1787" target="_blank" rel="noopener">hdu 1787</a>裸欧拉函数简单变式</p><p>  有没有$O(N)$预处理出一张欧拉函数表的方法呢？当然有,在欧拉筛的基础上稍加改动即可，想要看懂代码请您先熟练欧拉筛</p><p>  这是一个欧拉筛</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Euler_Prime</span><span class="hljs-params">()</span> <br></span>&#123; <br>  <span class="hljs-built_in">memset</span>(is_Prime,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(is_Prime));<br>  <span class="hljs-built_in">memset</span>(pri,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(pri)); <br>  is_Prime[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>  is_Prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//特判</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++) &#123; <br>      <span class="hljs-keyword">if</span>(is_Prime[i]) <br>        pri[tot++]=i;   <span class="hljs-comment">//----1</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;tot &amp;&amp; i*pri[j]&lt;=n;j++)&#123; <br>         is_Prime[i*pri[j]]=<span class="hljs-number">0</span>; <br>         <span class="hljs-keyword">if</span>(i%pri[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//-----2</span><br>         <span class="hljs-comment">//-----3</span><br>      &#125; <br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用欧拉筛时无非在代码中$1,2,3$处三种情况:</p><p>（话说第二条的证明找了挺久，好多人都直接略过，感觉我真的太菜了</p><ol><li><p>判定$i$是一个质数,根据上文性质$\phi(i)=i-1$</p></li><li><p>在2处,$\phi(i<em>pri[j])=\phi(i)</em>pri[j]$</p><p>$Prove:$设$x=pri[j]*i$,易知此时$i$包含$pri[j]$这个质因子,即$i$的质因子与$x$的相同,根据欧拉函数的直接计算方式,</p><p>$\phi(x)=x<em> \prod (1-1/p_i)=pri[j]</em>i<em> \prod (1-1/p_i)= pri[j]</em>\phi(i)$</p></li><li><p>在3处,易知$i$与$pri[j]$互质,根据欧拉函数性质(也是积性函数性质)</p><p>$\phi(x) = \phi(i)<em>\phi(pri[j]) = \phi(i) </em>(pri[j]-1)$</p></li></ol><p>然后就可以看懂代码了</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_phitable</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">bool</span> is_pri[maxn];<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">1000005</span>],tot=<span class="hljs-number">0</span>,tmp;<br><span class="hljs-built_in">memset</span>(is_pri,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(is_pri));<br>is_pri[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">2</span>;i&lt;=maxn;i++)&#123;<br>    <span class="hljs-comment">//printf("%d\n",i);</span><br><span class="hljs-keyword">if</span>(!is_pri[i])&#123;<br>num[++tot]=i;<br>phi[i]=i<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=tot;j++)&#123;<br>tmp=num[j]*i;<br><span class="hljs-keyword">if</span>(tmp&gt;=maxn)<span class="hljs-keyword">break</span>;<br>is_pri[tmp]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i%num[j]==<span class="hljs-number">0</span>)&#123;<br>phi[tmp]=num[j]*phi[i];<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>phi[tmp]=(num[j]<span class="hljs-number">-1</span>)*phi[i];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 欧拉函数与简化剩余系 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu题解P2312解方程--暴力膜+秦九韶</title>
      <link href="/2018/07/27/luogu%E9%A2%98%E8%A7%A3P2312%E8%A7%A3%E6%96%B9%E7%A8%8B-%E6%9A%B4%E5%8A%9B%E8%86%9C-%E7%A7%A6%E4%B9%9D%E9%9F%B6/"/>
      <url>/2018/07/27/luogu%E9%A2%98%E8%A7%A3P2312%E8%A7%A3%E6%96%B9%E7%A8%8B-%E6%9A%B4%E5%8A%9B%E8%86%9C-%E7%A7%A6%E4%B9%9D%E9%9F%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>  <a href="https://www.luogu.org/problemnew/show/P2312" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2312</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>  这道题很毒啊,这么大的数。</p><p>  但是如果多项式$\sum_{i=0}^N a[i]<em>X^i=0$则$\sum_{i=0}^N a[i]</em>X^i \mod P=0$</p><p>  于是我们可以暴力膜一模，然后在$[1,m]$中枚举就好了。但是呢，万一这个多项式的值是$P$的倍数,也会变成0，所以保险起见搞几个又大又质的数膜一膜就好了。</p><p>  但是$Exciting$的是呢,我在洛谷上开O2能过，而BZOJ就不那么友好。</p><p>  然后luogu题解提供一种减少枚举冗杂的方Fa。我们不是选多个数膜一模吗，如果在膜$P_i$的意义下已经不是$0$了,枚举其他的就没意义了。于是呢，我们先可以选出一个小点的模数$P_x$，在$[1,P_x]$中先枚举一遍，记录多项式值为0的是哪些。最后再枚举$[1,m]$，由于先前的限制，就会减少许多无用选择</p><p>  然后多项式求值有个叫秦九韶算法的$O(N)$方法,不了解的可以看一看</p><p>  <a href="https://www.cnblogs.com/Rye-Catcher/p/9260599.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rye-Catcher/p/9260599.html</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>   我选择了两个数来做模数，较小的是23333，较大的是19260817</p>   <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">105</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> p1=<span class="hljs-number">19260817</span>,p2=<span class="hljs-number">71806291</span>,p3=<span class="hljs-number">23333</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br>ll a[maxn],c[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>    a[id]=c[id]=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch=getchar()))ne=ch==<span class="hljs-string">'-'</span>;<br>    a[id]=c[id]=ch<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch=getchar()))&#123;<br>    a[id]=((a[id]&lt;&lt;<span class="hljs-number">3</span>)%p1+(a[id]&lt;&lt;<span class="hljs-number">1</span>)+ch<span class="hljs-number">-48</span>)%p1;<br>    c[id]=((c[id]&lt;&lt;<span class="hljs-number">3</span>)%p3+(c[id]&lt;&lt;<span class="hljs-number">1</span>)+ch<span class="hljs-number">-48</span>)%p3;<br>    &#125;<br>    a[id]=ne?-a[id]:a[id];<br>    c[id]=ne?-c[id]:c[id];<span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> ans[<span class="hljs-number">1000005</span>],tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> ok[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">pre_calc</span><span class="hljs-params">(ll u)</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=n;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        x=(x*u+c[i])%p3;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x==<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">calc</span><span class="hljs-params">(ll u)</span></span>&#123;<br>    ll x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ri i=n;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        x=(x*u+a[i])%p1;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x==<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    read(n),read(m);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>    input(i);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(ok,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ok));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=p3;i++)&#123;<br>    <span class="hljs-keyword">if</span>(pre_calc(<span class="hljs-number">1l</span>l*i))ok[i]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>       <span class="hljs-keyword">if</span>(ok[i%p3]&amp;&amp;calc(<span class="hljs-number">1l</span>l*i))&#123;<br>           ans[++tot]=i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,tot);<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ5017炸弹题解--玄学递推</title>
      <link href="/2018/07/27/BZOJ5017%E7%82%B8%E5%BC%B9%E9%A2%98%E8%A7%A3-%E7%8E%84%E5%AD%A6%E9%80%92%E6%8E%A8/"/>
      <url>/2018/07/27/BZOJ5017%E7%82%B8%E5%BC%B9%E9%A2%98%E8%A7%A3-%E7%8E%84%E5%AD%A6%E9%80%92%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>   <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5017" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=5017</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>   老师讲课谈到了这道题，课上想出了个连边建图然后乱搞的操作，被老师钦定的递推方法枪毙了；<br>晚上回去做了做，好像复杂度是不对。还是学习了下此题递推方法，感觉考场上写这个的是抱着得部分分的心理A了这道题(话说洛谷没有SNOI2017的题目</p><p>   我们用$l[i],r[i]$表示$i$最左和最右能拓展到的炸弹编号,初始化$l[i]=r[i]=i$,$rr[i]$表示$i$最大的爆炸半径(因为它可能会随着$l[i],r[i]$更新而更新)</p><p>   然后就递推了.求$l[i]$,如果$x[i]-x[l[i]-1]&lt;=rr[i]$则拓展，同时检查是否更新$rr[i]$;求$r[i]$类似。</p><p>   时间复杂度我也很懵，感觉应该有个均摊值,老师课上讲拓展次数不会超过$log N$感觉不太对啊。。。</p><p>   同时这题有个线段树优化建边+Tarjan缩点+拓扑排序后DP的方法</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>  $l[i]$是向左拓展,故从$1$递推到$N$;</p><p>  $r[i]$就要从$N$递推到$1$.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>   <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500000</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n;<br>ll l[maxn],r[maxn],x[maxn],rr[maxn];<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>read(n);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>read(x[i]),read(rr[i]);<br>l[i]=r[i]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">while</span>(l[i]&gt;<span class="hljs-number">1</span>&amp;&amp;x[i]-x[l[i]<span class="hljs-number">-1</span>]&lt;=rr[i])&#123;<br>l[i]=l[l[i]<span class="hljs-number">-1</span>],rr[i]=max(rr[i],rr[l[i]]-(x[i]-x[l[i]]));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(ri i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">while</span>(r[i]&lt;n&amp;&amp;x[r[i]+<span class="hljs-number">1</span>]-x[i]&lt;=rr[i])&#123;<br>r[i]=r[r[i]+<span class="hljs-number">1</span>],l[i]=min(l[i],l[r[i]]);<br>&#125;<br>ans=(ans+<span class="hljs-number">1l</span>l*i*(r[i]-l[i]+<span class="hljs-number">1</span>))%<span class="hljs-number">1000000007</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="推荐学习博客"><a href="#推荐学习博客" class="headerlink" title="推荐学习博客"></a>推荐学习博客</h3><p>  <a href="https://blog.csdn.net/c_k_y_/article/details/79980119" target="_blank" rel="noopener">https://blog.csdn.net/c_k_y_/article/details/79980119</a></p><p>  <a href="https://blog.csdn.net/Icefox_zhx/article/details/78877188" target="_blank" rel="noopener">https://blog.csdn.net/Icefox_zhx/article/details/78877188</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu题解P3950部落冲突--树链剖分</title>
      <link href="/2018/07/27/luogu%E9%A2%98%E8%A7%A3P3950%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/07/27/luogu%E9%A2%98%E8%A7%A3P3950%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>  <a href="https://www.luogu.org/problemnew/show/P3950" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3950</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>  大佬都用LCT，我太弱只会树链剖分</p><p>  一个很裸的维护边权树链剖分题.按照套路,对于一条边$<u,v>(dep(u)&lt;dep(v))$,让它边权加1就在$v$点处+1，将边的问题转化为点的问题</u,v></p><p>  然后对于C，U操作，线段树单点修改，Q操作区间查询</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>询问$u,v(dep(u)&gt;dep(v))$点之间是否联通区间查询时注意是查询$[u,son[v]]$的和,忽然发现NOI赛场上Day2用树链剖分写得暴力为什么错了。。。</p></li><li><p>单点修改注意是修改$dfn[x]$那个点,查了好久的错</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<span class="hljs-keyword">return</span>;<br>&#125;  <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">300005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br><span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=to;<br>h[f]=num_edge;<br>&#125;<br><span class="hljs-keyword">int</span> dfn[maxn],tot=<span class="hljs-number">0</span>,top[maxn],dep[maxn],fa[maxn],son[maxn],size[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br>   <span class="hljs-keyword">int</span> v;size[now]=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now])<span class="hljs-keyword">continue</span>;<br>fa[v]=now,dep[v]=dep[now]+<span class="hljs-number">1</span>;<br>dfs_1(v);<br>size[now]+=size[v];<br><span class="hljs-keyword">if</span>(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br><span class="hljs-keyword">int</span> v;dfn[now]=++tot,top[now]=t;<br><span class="hljs-keyword">if</span>(!son[now])<span class="hljs-keyword">return</span> ;<br>dfs_2(son[now],t);<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br><span class="hljs-keyword">if</span>(v==fa[now]||v==son[now])<span class="hljs-keyword">continue</span>;<br>dfs_2(v,v);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> sum[maxn&lt;&lt;<span class="hljs-number">2</span>],L,R,dta,t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>sum[now]+=dta;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(t&lt;=mid)update(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">else</span> update(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<br><span class="hljs-keyword">return</span> sum[now];<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(L&lt;=mid)ans+=query(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(mid&lt;R)ans+=query(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-comment">//cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;' '&lt;&lt;ans&lt;&lt;endl;</span><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">War</span>&#123;</span><br><span class="hljs-keyword">int</span> x,y;<br>&#125;war[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">int</span> tmp=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>L=dfn[top[x]],R=dfn[x];<br>tmp=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-comment">//cout&lt;&lt;tmp&lt;&lt;endl;</span><br><span class="hljs-keyword">if</span>(tmp!=<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(dep[x]&gt;dep[y])swap(x,y);<br>L=dfn[x]+<span class="hljs-number">1</span>,R=dfn[y];<br><span class="hljs-keyword">if</span>(L&gt;R)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>tmp=query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<span class="hljs-comment">//puts("f***");</span><br><span class="hljs-comment">//cout&lt;&lt;tmp&lt;&lt;endl;</span><br><span class="hljs-keyword">if</span>(tmp!=<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> z)</span></span>&#123;<br>dta=z;<br><span class="hljs-keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);<br>t=dfn[x];<br>update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-comment">//L=1,R=n;</span><br><span class="hljs-comment">//printf("%d\n",query(1,1,n));</span><br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> opt[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> x,y,z,cnt=<span class="hljs-number">0</span>;<br>read(n),read(m);<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>dfs_1(<span class="hljs-number">1</span>);<br>dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(sum,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(sum));<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,opt);<br><span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'Q'</span>)&#123;<br>read(x),read(y);<br><span class="hljs-keyword">if</span>(query_path(x,y))<span class="hljs-built_in">puts</span>(<span class="hljs-string">"Yes"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No"</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt[<span class="hljs-number">0</span>]==<span class="hljs-string">'C'</span>)&#123;<br>read(x),read(y);<br>war[++cnt].x=x;<br>war[cnt].y=y;<br>update_path(x,y,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>read(z);<br>x=war[z].x,y=war[z].y;<br>update_path(x,y,<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA11987Almost Union-Find题解--并查集的删除</title>
      <link href="/2018/07/27/UVA11987Almost-Union-Find%E9%A2%98%E8%A7%A3-%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E5%88%A0%E9%99%A4/"/>
      <url>/2018/07/27/UVA11987Almost-Union-Find%E9%A2%98%E8%A7%A3-%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p> <a href="https://www.luogu.org/problemnew/show/UVA11987" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/UVA11987</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p> 分析下操作发现就是加了个删除操作的并查集,怎么做删除操作呢.</p><p> 我们用一个$id[]$记录每个数字在并查集中的编号,$tot=n$,一开始$id[i]=i$,当将$p$从原集合中删除时,让原来的$id[p]$变成一个虚点,$id[p]=++tot$,这样就完成了删除操作，当然我们查找祖先时需要$find(id[x])$</p><p> 推荐博客:<a href="https://blog.csdn.net/grimcake/article/details/77115078" target="_blank" rel="noopener">https://blog.csdn.net/grimcake/article/details/77115078</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>x=c<span class="hljs-number">-48</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>x=ne?-x:x;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> size[maxn],id[maxn],sum[maxn],fa[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">return</span> fa[x]==x?fa[x]:fa[x]=find(fa[x]);<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> opt,p,q,x,y;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)&#123;<br>tot=n;<br><span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>size[i]=<span class="hljs-number">1</span>;<br>fa[i]=id[i]=sum[i]=i;<br>&#125;<br><span class="hljs-keyword">while</span>(m--)&#123;<br>read(opt);<br><span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;<br>read(p),read(q);<br>p=find(id[p]),q=find(id[q]);<br><span class="hljs-keyword">if</span>(p==q)<span class="hljs-keyword">continue</span>;<br>fa[p]=q;<br>sum[q]+=sum[p];<br>size[q]+=size[p];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)&#123;<br>read(p),read(q);<br>x=find(id[p]),y=find(id[q]);<br><span class="hljs-keyword">if</span>(p==q)<span class="hljs-keyword">continue</span>;<br>id[p]=++tot;<br>fa[id[p]]=y;<br>sum[y]+=p,size[y]++;<br>size[x]--,sum[x]-=p;<br>&#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>read(p);<br>x=find(id[p]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>,size[x],sum[x]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4887可乐题解--矩阵运算</title>
      <link href="/2018/07/27/BZOJ4887%E5%8F%AF%E4%B9%90%E9%A2%98%E8%A7%A3-%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
      <url>/2018/07/27/BZOJ4887%E5%8F%AF%E4%B9%90%E9%A2%98%E8%A7%A3-%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4887" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4887</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>  话说这道题经常见到类似模型来计数算期望,概率啊,然而我太蒻了都不会做,今天看到这题的第一个题解感觉真妙啊</p><p>  我们构建邻接矩阵$A$,$a[i][j]=1$表示i到j状态有连接的边。</p><p>  如果有一条边连接$u,v$则$a[u][v]=1$且$a[v][u]=1$</p><p>  $a[i][i]=1$表示停在原地</p><p>  再构建一个虚点0,$a[i][0]=1$表示自爆事件,完美满足题目要求</p><p>  统计$\sum_{i=0}^{N}A[1][i]$就是答案</p><p>  然而这题BZOJ AC 洛谷 WA 不知道怎么回事</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">35</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm=<span class="hljs-number">105</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7ffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>   x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>   x=c<span class="hljs-number">-48</span>;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>   x=ne?-x:x;<br>   <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> n,m,t;     <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span>&#123;</span><br>   <span class="hljs-keyword">int</span> mat[maxn][maxn];<br>   Mat()&#123;<span class="hljs-built_in">memset</span>(mat,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(mat));&#125;<br>   Mat(<span class="hljs-keyword">int</span> x)&#123;<span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)mat[i][i]=x;&#125;<br>   Mat <span class="hljs-keyword">operator</span> *(<span class="hljs-keyword">const</span> Mat &amp;b)<span class="hljs-keyword">const</span> &#123;<br>       Mat ans;<br>       <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>           <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>             <span class="hljs-keyword">for</span>(ri k=<span class="hljs-number">0</span>;k&lt;=n;k++)&#123;<br>                 ans.mat[i][j]+=mat[i][k]*b.mat[k][j]%<span class="hljs-number">2017</span>;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans;<br>   &#125;<br>   Mat <span class="hljs-keyword">operator</span> ^(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp; C)<span class="hljs-keyword">const</span> &#123;<br>      Mat ans=Mat(<span class="hljs-number">1</span>),res=*<span class="hljs-keyword">this</span>;<span class="hljs-keyword">int</span> c=C;<br>      <span class="hljs-keyword">while</span>(c)&#123;<br>          <span class="hljs-keyword">if</span>(c&amp;<span class="hljs-number">1</span>)ans=ans*res;<br>          res=res*res;<br>          c=c&gt;&gt;<span class="hljs-number">1</span>;<br>      &#125;   <br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br>&#125;a;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">int</span> x,y,ans=<span class="hljs-number">0</span>;<br>   read(n),read(m);<br>   <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>       a.mat[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>       a.mat[i][i]=<span class="hljs-number">1</span>;<br>   &#125;<br>   <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>       read(x),read(y);<br>       a.mat[x][y]=a.mat[y][x]=<span class="hljs-number">1</span>;<br>   &#125;<br>   read(t);<br>   a=a^t;<br>   <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">0</span>;i&lt;=n;i++)ans+=a.mat[<span class="hljs-number">1</span>][i]%<span class="hljs-number">2017</span>;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans%<span class="hljs-number">2017</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4241题解历史研究--回滚莫队</title>
      <link href="/2018/07/16/BZOJ4241%E9%A2%98%E8%A7%A3%E5%8E%86%E5%8F%B2%E7%A0%94%E7%A9%B6-%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F/"/>
      <url>/2018/07/16/BZOJ4241%E9%A2%98%E8%A7%A3%E5%8E%86%E5%8F%B2%E7%A0%94%E7%A9%B6-%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4241" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4241</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>  这题就是求区间权值乘以权值出现次数的最大值,一看莫队法块可搞,但仔细想想,莫队的加入很容易,但是删除需要维护许多东西,非常麻烦,于是就有dalao想出了一个新科技—回滚莫队.回滚莫队能使操作全部变成加入或全部变成删除.这道题我们需要全部变成加入.</p><p>  怎么做呢？我们对询问进行处理,左端点在一个块中的先归在一起,然后以右端点为关键字进行排序,使得右端点靠前的在前.然后依次处理按左端点归好后每个块中的询问,我们找到块中最靠后的左端点,和最靠前的右端点(其实就是块中第一个询问的右端点),统计区间信息。</p><p>  对于每一个询问,先移动右端点加入元素,然后左端点左移得到询问答案后再向右移撤销,由于不需要维护什么信息撤销变得非常容易.简单来说,总的思路就是先找出最“窄”的区间,然后不断加入补全到询问区间.</p><p>  当然,如果询问的左端点和右端点在一个块中就直接暴力处理</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3> <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::min;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::max;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;x=ne?-x:x;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qur</span>&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,id;<br>    Qur(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)&#123;l=a,r=b,id=c;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Qur &amp; b)<span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> r&lt;b.r;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxb=<span class="hljs-number">355</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">int</span> n,w[maxn],pos[maxn];<br><span class="hljs-keyword">int</span> blo,mxl[maxb];<br><span class="hljs-built_in">map</span> &lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; g;<span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>,f[maxn];<br><span class="hljs-keyword">int</span> cnt[maxn];<br>LL res=inf,ans[maxn];<br><span class="hljs-built_in">vector</span> &lt;Qur&gt; qry[maxb];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    cnt[x]++;<br>    res=max(res,<span class="hljs-number">1l</span>l*cnt[x]*f[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l,r,q;<br>    read(n);read(q);<br>    blo=<span class="hljs-built_in">sqrt</span>(n+<span class="hljs-number">0.5</span>);<br>    <span class="hljs-built_in">memset</span>(mxl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(mxl));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        read(w[i]);<br>        <span class="hljs-keyword">if</span>(!g[w[i]])&#123;<br>            g[w[i]]=++tot;<br>            f[tot]=w[i];<br>        &#125;w[i]=g[w[i]];<br>        pos[i]=(i<span class="hljs-number">-1</span>)/blo+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>        read(l),read(r);<br>        <span class="hljs-keyword">if</span>(pos[l]==pos[r])&#123;<span class="hljs-comment">//左端点右端点在一个块中</span><br>            res=-inf;<br>            <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(cnt));<br>            <span class="hljs-keyword">for</span>(ri j=l;j&lt;=r;j++)add(w[j]);<br>            <span class="hljs-keyword">for</span>(ri j=l;j&lt;=r;j++)cnt[j]--;<br>            ans[i]=res; <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            qry[pos[l]].push_back(Qur(l,r,i));<br>            mxl[pos[l]]=max(mxl[pos[l]],l);<span class="hljs-comment">//记录询问块中的最后左端点</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ll,rr;LL last;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=pos[n];i++)&#123;<span class="hljs-comment">//处理每个询问块</span><br>        <span class="hljs-keyword">if</span>(qry[i].empty())<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(cnt));res=-inf;<br>        sort(qry[i].begin(),qry[i].end());<br>        l=mxl[i],r=qry[i][<span class="hljs-number">0</span>].r;<br>        <span class="hljs-keyword">for</span>(ri j=l;j&lt;=r;j++)add(w[j]);<br>        <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">0</span>;j&lt;qry[i].size();j++)&#123;<br>            ll=qry[i][j].l,rr=qry[i][j].r;<br>            <span class="hljs-keyword">while</span>(r&lt;rr)r++,add(w[r]);<br>            last=res;<span class="hljs-comment">//记录下右端点操作后信息</span><br>            <span class="hljs-keyword">for</span>(ri k=ll;k&lt;l;k++)add(w[k]);<br>            ans[qry[i][j].id]=res,res=last;<span class="hljs-comment">//左端点左移后撤回</span><br>            <span class="hljs-keyword">for</span>(ri k=ll;k&lt;l;k++)cnt[w[k]]--;<span class="hljs-comment">//已经得到答案,撤回非常容易</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=q;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>  关于这题的离散化处理,我还进行了一些比较,在这篇博客中</p><p>  <a href="https://rye-catcher.github.io/2018/07/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%A0%E7%A7%8D%E7%A6%BB%E6%95%A3%E5%8C%96%E6%96%B9%E5%BC%8F/">https://rye-catcher.github.io/2018/07/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%A0%E7%A7%8D%E7%A6%BB%E6%95%A3%E5%8C%96%E6%96%B9%E5%BC%8F/</a></p><p>  推荐学习博客</p><p>  <a href="http://isrothy.blog.uoj.ac/blog/3673" target="_blank" rel="noopener">http://isrothy.blog.uoj.ac/blog/3673</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ2659算不出的算式不正经题解</title>
      <link href="/2018/07/15/BZOJ2659%E7%AE%97%E4%B8%8D%E5%87%BA%E7%9A%84%E7%AE%97%E5%BC%8F%E4%B8%8D%E6%AD%A3%E7%BB%8F%E9%A2%98%E8%A7%A3/"/>
      <url>/2018/07/15/BZOJ2659%E7%AE%97%E4%B8%8D%E5%87%BA%E7%9A%84%E7%AE%97%E5%BC%8F%E4%B8%8D%E6%AD%A3%E7%BB%8F%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p>   <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2659" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2659</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>   难得做到此类打表题目,不觉回想到NOIp2017考场上的SB经历</p><p>   这道题看到这么吓人的算式,当然是要….</p><p>   <img src="https://s1.ax1x.com/2018/07/15/PMoRGn.png" alt=""></p><p>   咳咳,像我这种菜鸡当然是先要打个表</p><p>   <img src="https://s1.ax1x.com/2018/07/15/PMoHIJ.png" alt=""></p><p>   好象没什么规律,但我们可以找找特殊项</p><p>   比如(3,3)和(5,5),(7,7),大胆猜想若两数相同对于奇质数$x$，$ans=(x*x-1)/4$</p><p>   然后就往4方面去想,把所有答案乘以4得到另一张表,然后就很容易发现规律了</p><script type="math/tex; mode=display">ans=    \begin{cases}    p*q/4& \text{p=q}\\    (p-1)*(q-1)/4& \text{p!=q}    \end{cases}</script><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>   数竞队的还没有回应,</p><p>   不过在网上找到一篇不错的</p><p>   <a href="https://www.cnblogs.com/Mychael/p/9115847.html" target="_blank" rel="noopener">https://www.cnblogs.com/Mychael/p/9115847.html</a></p><p>   个人觉得讲得比其他blog好一点</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>   <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;cctype&gt;<br>#include &lt;vector&gt;<br>#define ll long long <br>#define ri register int <br>const int maxn=100005;<br>const int inf=0x7fffffff; <br>int main()&#123;<br>int a,b;<br>scanf(&quot;%d %d&quot;,&amp;a,&amp;b);<br>if(a==b)printf(&quot;%lld\n&quot;,1ll*a*b/4);<br>else printf(&quot;%lld\n&quot;,1ll*(a-1)*(b-1)/4);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--几种离散化方式</title>
      <link href="/2018/07/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%A0%E7%A7%8D%E7%A6%BB%E6%95%A3%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/07/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%A0%E7%A7%8D%E7%A6%BB%E6%95%A3%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  在OI学习过程中,我们常常会发现一些题目(尤其数据结构题)中,一些数据的范围很大,但是涉及的数值的个数却很少,同时我们想用一个数组的下标与这些数据建立一一对应关系,这时我们就需要离散化</p><h3 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h3><p>  对于一个大小为$N$不含重复数字的数组$a[N] (a[i]&lt;=10^9)$,我们可以将$a[]$中的N个整数与$1$ ~ $N$这$N$构成一一映射关系,也就是说把$a[i]$用一个$1$~$N$中的数字代替,这样空间和时间复杂度都能变成与$N$相关</p><p>  当然如果数组中有重复数据,你需要先去重(使用$std::unique$等)再进行上述操作</p><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul><li><p>结构体+$sort$</p><p>对于大小为$N$不含重复数据的整型数组$a[N]$,定义结构体</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">struct Data&#123;<br> int x;//原数组中的数据<br> int id;//原数组中储存x的下标<br>&#125;d[N];<br></code></pre></td></tr></table></figure><p>然后以$x$为关键字进行排序,进行以下操作</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sort(d+1,d+1+N);//假设从1开始<br>for(int i=1;i&lt;=n;i++)&#123;<br> a[d[i].id]=i;//按大小顺序离散化<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度$O(NlogN)$ 空间复杂度$O(N)$</p><p>但是,使用这种方式的前提是数组无重复数据</p></li><li><p>$sort$+$lower $_$bound$</p><p>这应该是最常见的离散化方式</p><p>您只需要知道对于大小为$N$的数组$a[]$,</p><p>$lower $_$bound(a+1,a+1+N,X)-a$返回$a$中第一个大于等于X的位置</p><p>$unique(a+1,a+1+n)-(a+1)$返回将$a$数组去重后$a$的数组大小</p><p>然后就不难理解下面代码</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">for(int i=1;i&lt;=N;i++)&#123;<br>scanf(&quot;%d&quot;,&amp;a[i]);<br>f[i]=a[i];<br>&#125;<br>sort(f+1,f+1+N);<br>int nn=unique(f+1,f+1+N)-(f+1);//去重<br>for(int i=1;i&lt;=N;i++)&#123;<br>a[i]=lower_bound(f+1,f+1+nn,a[i])-f;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样$f[i]$储存了从小到大排序后原来$a$中所有元素,$a[i]$中就储存了按大小排序后,原本$a[i]$大小的排名,$f[ \ a[i] \ ]$则返回原本$a[i]$的值</p></li><li><p>$map\&amp;unordered $_$map$</p><p>如果您不知道STL中的$map$,建议您先去了解再来看此篇文章</p><p>其实思路很$naive$,知道$map$用法的应该都能看懂</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">map &lt;int,int&gt; g;<br>int a[N],f[N],tot=0;<br>for(int i=1;i&lt;=N;i++)&#123;<br> scanf(&quot;%d&quot;,&amp;a[i]);<br> if(!g[a[i]])&#123;<br>    g[a[i]]=++tot;<br>    f[tot]=a[i];<br> &#125;<br> a[i]=g[a[i]];<br>&#125;<br></code></pre></td></tr></table></figure><p>$f[a[i]]$就是原数组$a[i]$的值</p><p>但是$map$是用红黑树实现的,储存的元素是有序的</p><p>而$unordered $_$map$是用哈希表实现的</p><p>而在这里$map$纯粹只是起到了$hash$的查找与赋值,用$unordered$_$map$也能实现,相比较之下一般会更$unordered$_$map$快一点(实际上您可以手写一个哈希表完成上面的离散化操作)</p><p>然而使用$unordered$_$map$时注意,$C++11$之前使用需要</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;tr1/unordered_map&gt;<br>using namespace std;<br>using namespace std::tr1;<br>unordered_map &lt;int,int&gt;g;<br></code></pre></td></tr></table></figure><p>$C++ 11$之后则可以使用</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;unordered_map&gt;<br>using namespace std;<br>unordered_map&lt;int,int&gt;g;<br></code></pre></td></tr></table></figure></li><li><p>$pb$_$ds$中的$hash$_$table$</p><p>$pb$_$ds$中有许多黑科技,您可以在这篇博客中了解:</p><p><a href="https://blog.csdn.net/Only_AiR/article/details/51940500" target="_blank" rel="noopener">https://blog.csdn.net/Only_AiR/article/details/51940500</a></p><p>其中就有个$hash$_$table$，顾名思义,就是个蛤希表了,可以只用$find()$和$operator[]$,十分方便</p><p>然而使用它需要记一点东西,但你问我资不资瓷，当然是资瓷啊</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;ext/pb_ds/assoc_container.hpp&gt;<br>#include &lt;ext/pb_ds/hash_policy.hpp&gt;<br>using namespace __gnu_pbds;<br>cc_hash_table &lt;int,int&gt;g1;//两种hash_table,都跑得和香港记者一样快<br>gp_hash_table &lt;int,int&gt;g2;<br></code></pre></td></tr></table></figure></li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>  话说写这篇博客还是因为这道题</p><p>  <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4241" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4241</a></p><p>  我调整各种离散化方式来看看哪个最快,同时在luogu的个人私题中同步测试</p><p>  然后给大家看看时间比较(因为怕影响大家评测把时间限制开的很小,难免会TLE,$bzoj$时限是80s)</p><p>  <img src="https://s1.ax1x.com/2018/07/15/PM51Rx.png" alt=""></p><p>  $hash $_$table$不知道高到哪里去</p><p>  然而戏剧性的是BZOJ 上我测出来是$map$最快!!! $18000+ms$</p><p>  其余的都比裸$map$慢了近$1000$~$2000+$ $ \ $ $ms$</p><p>  很奇怪,BZOJ评测鸭太玄学了,如果有谁知道原因的可以解释下谢谢</p>]]></content>
      
      
      
        <tags>
            
            <tag> 离散化 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--Tarjan算法之割点与桥</title>
      <link href="/2018/07/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Tarjan%E7%AE%97%E6%B3%95%E4%B9%8B%E5%89%B2%E7%82%B9%E4%B8%8E%E6%A1%A5/"/>
      <url>/2018/07/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Tarjan%E7%AE%97%E6%B3%95%E4%B9%8B%E5%89%B2%E7%82%B9%E4%B8%8E%E6%A1%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>   图论中联通性相关问题往往会牵扯到无向图的割点与桥或是下一篇博客会讲的强连通分量,强有力的$Tarjan$算法能在$O(n)$的时间找到割点与桥</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 若您是第一次了解$Tarjan$算法，建议您反复阅读定义,借助图像来理解</p><ul><li><p>桥与割边</p><p>对于无向连通图中点集的一个节点$x$,删去节点$x$及其关联的边之后,存在一对不联通的点对$(a,b)$,则称$x$是这个无向图的割点</p><p>对于无向联通图中边集的一条边$e$,删去边$e$之后,存在一对不联通的点对$(a,b)$,则称$x$是这个无向图的桥或割边</p><p>对于一般无向图,割点和桥可以指各个联通块的割点和桥</p></li><li><p>时间戳:</p><p>在对图的$DFS$中,按照节点第一次被访问的顺序,给各个节点标记一个值,该值称为时间戳,我们用$dfn[x]$表示$x$的时间戳</p></li><li><p>搜索树</p><p>在对图的$DFS$中,由于每个点只会被搜一次,所以访问经过的边构成了一棵树,称为搜索树,各个节点为根的子树称为$subtree(x)$,注意,$x \in subtree(x)$</p></li><li><p>追溯值</p><p>这个可以说是$Tarjan$算法的精髓了,在我个人看来,节点$x$的追溯值是指<strong>不经搜索树所能到达的所有节点中其时间戳的最小值</strong>或者它自身的时间戳.</p><p>这看起来很难得到各个节点的追溯值,实则不然,分析一下,节点$x$的追溯值可以在一遍$DFS$中求得,请看下文介绍</p></li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><p>性质一: 桥边都是搜索树上的边</p><p>反证法,若桥边不是搜索树上的边,断掉这条之后仍可通过搜索树上的边保持图的联通</p></li><li><p>割边判定法则</p><p>无向边$(x,y)$是桥的充要条件是$dfn[x]&lt;low[y]$(假设$y \in subtree(x)$)</p><p>让我们想想为什么</p><p>$low[y]$表示不经搜索树上的边$y$所能到达的所有节点中其时间戳的最小值,若$dfn[x]&lt;low[y]$,根据定义和性质一,说明只有这条在s搜索树上的边$(x,y)$ ，$y$才能到达$x$,故边$(x,y)$是桥(割边)</p></li><li><p>割点判定法则</p><p>非根点$x$是割点的充要条件是存在一点$y (y \in subtree(x))$,满足$dfn[x]&lt;=low[y]$,类比于上一法则,这里不再赘述</p><p>当$x$为根节点时至少要有两个点满足上述条件</p></li></ul><ul><li><p>大家可以通过图片理解上述过程,粗边都是搜索树上的边</p><p>  <img src="https://s1.ax1x.com/2018/07/14/PM9Utx.png" alt="PM9Utx.png"></p></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>更新$low[x]$</p><p> 根据定义,我们只能用$x$在搜索树上儿子的$low[]$值或是一条非搜索树边$(x,y)$中的$dfn[y]$来更新$low[x]$</p></li><li><p>重边</p><p> 在求桥时,若节点$x$与其父亲间有重边,则其中只有一条算搜索树上的边,其他都是非搜索树上的边,可以用来更新.</p><p> 然而求割点时,由于是点与点联通关系不必考虑重边</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>桥</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> dfn[maxn],low[maxn],cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> bridge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> in_edge)</span></span>&#123;<span class="hljs-comment">//in_edge--边的编号</span><br><span class="hljs-keyword">int</span> v;dfn[u]=low[u]=++cnt;<br><span class="hljs-keyword">for</span>(ri i=h[u];i;i=edge[i].ne)&#123;<br>     v=edge[i].to;<br>     <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>         tarjan(v,i);<br>         low[u]=min(low[u],low[v]);<br>         <span class="hljs-keyword">if</span>(low[v]&gt;dfn[u])&#123;<br>             bridge[i]=bridge[i^<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=(in_edge^<span class="hljs-number">1</span>))&#123; <br>     <span class="hljs-comment">//in_edge^1表示反向边,不是反向边说明是非搜索树边</span><br>             low[u]=min(low[u],dfn[v]);<span class="hljs-comment">//通过非树边更新</span><br>     &#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>割点</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> dfn[maxn],low[maxn],root,tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> ans[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<br><span class="hljs-keyword">int</span> v,flag=<span class="hljs-number">0</span>;dfn[now]=low[now]=++tot;<br><span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>    v=edge[i].to;<br>    <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>       tarjan(v);<br>       low[now]=min(low[now],low[v]);<br>       <span class="hljs-keyword">if</span>(dfn[now]&lt;=low[v])&#123;<br>           flag++;<br>           <span class="hljs-keyword">if</span>(now!=root||flag&gt;<span class="hljs-number">1</span>)<span class="hljs-comment">//根节点要有两个满足条件</span><br>           &#123;<br>                <span class="hljs-keyword">if</span>(!ans[now])ans[now]=<span class="hljs-number">1</span>;<span class="hljs-comment">//是割点</span><br>           &#125;<br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> low[now]=min(low[now],dfn[v]);<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul><li><p>桥+缩点</p><p>  <a href="https://www.luogu.org/problemnew/show/P2860" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2860</a></p><p>  题解:</p><p>  <a href="https://rye-catcher.github.io/2018/07/09/luogu%E9%A2%98%E8%A7%A3P2860-USACO%E5%86%97%E6%9D%82%E8%B7%AF%E5%BE%84-%E7%BC%A9%E7%82%B9-%E6%A1%A5/">https://rye-catcher.github.io/2018/07/09/luogu%E9%A2%98%E8%A7%A3P2860-USACO%E5%86%97%E6%9D%82%E8%B7%AF%E5%BE%84-%E7%BC%A9%E7%82%B9-%E6%A1%A5/</a></p></li></ul><ul><li><p>[模板]割点</p><p><a href="https://www.luogu.org/problemnew/show/P3388" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3388</a></p></li></ul><ul><li><p>割点+简单计数</p><p><a href="https://www.luogu.org/problemnew/show/P3469" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3469</a></p><p>题解:咕咕咕</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu题解P2860[USACO冗杂路径]缩点+桥</title>
      <link href="/2018/07/09/luogu%E9%A2%98%E8%A7%A3P2860-USACO%E5%86%97%E6%9D%82%E8%B7%AF%E5%BE%84-%E7%BC%A9%E7%82%B9-%E6%A1%A5/"/>
      <url>/2018/07/09/luogu%E9%A2%98%E8%A7%A3P2860-USACO%E5%86%97%E6%9D%82%E8%B7%AF%E5%BE%84-%E7%BC%A9%E7%82%B9-%E6%A1%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2860" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2860</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1718" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1718</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先这题目的意思就是让任意两点之间至少有两条没有重复道路的路径，很显然，如果这个图不存在桥，就一定满足上述条件。</p><p>于是我们就是要求使这个图不存在桥需要连接的最小边数</p><p>如果把桥从图中去掉，很显然剩余的联通块中任意两点之间至少有两条没有重复道路的路径（当然也可能不是联通块而是孤立的点），对答案不会产生贡献，我们不妨就将这些联通块缩点，于是就原来的图就变成了一颗树。</p><p>然后思考题目要求，当每个节点的度为$2$时任意两点之间至少有两条没有重复道路的路径，因为此时任意节点都有两条不同道路可走，于是用贪心的思想我们让度数为$1$的先互相连接，所以计算出树中的叶节点个数$x$，$ \lceil \frac{x}{2} \rceil $就是答案</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>好象没什么注意的，不过我太菜把$edge [j] .to$写成$edge [i] .to$查了好久的错</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ri register int </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm=<span class="hljs-number">10005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;<span class="hljs-title">inline</span> <span class="hljs-title">void</span> <span class="hljs-title">read</span>(<span class="hljs-title">T</span> &amp;<span class="hljs-title">x</span>)&#123;</span><br>    x=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> ne=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c=getchar()))ne=c==<span class="hljs-string">'-'</span>;<br>    x=c<span class="hljs-number">-48</span>;  <br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c=getchar()))x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c<span class="hljs-number">-48</span>;<br>    x=ne?-x:x;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ne,to;<br>&#125;edge[maxm&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> h[maxn],num_edge=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>    edge[++num_edge].ne=h[f];<br>    edge[num_edge].to=to;<br>    h[f]=num_edge;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> dfn[maxn],low[maxn],tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> bridge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> in_edge)</span></span>&#123;<span class="hljs-comment">//所在边的标号</span><br>    <span class="hljs-keyword">int</span> v;dfn[now]=low[now]=++tot;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>        v=edge[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>            tarjan(v,i);<br>            low[now]=min(low[now],low[v]);<br>            <span class="hljs-keyword">if</span>(dfn[now]&lt;low[v])&#123;<br>               bridge[i]=bridge[i^<span class="hljs-number">1</span>]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//是桥</span><br>               bb++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=(in_edge^<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//如果不是在同一条无向边的对应边</span><br>            low[now]=min(low[now],dfn[v]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//联通块的数量</span><br><span class="hljs-keyword">int</span> in_block[maxn];<span class="hljs-comment">//各点所在联通块的标号</span><br><span class="hljs-keyword">bool</span> g[maxn][maxn];<span class="hljs-comment">//重构后的图（储存）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Contraction_Point</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span>&#123;<span class="hljs-comment">//缩点</span><br>    <span class="hljs-keyword">int</span> v;in_block[now]=num;<br>    <span class="hljs-keyword">for</span>(ri i=h[now];i;i=edge[i].ne)&#123;<br>       v=edge[i].to;<br>       <span class="hljs-keyword">if</span>(!bridge[i]&amp;&amp;!in_block[v])&#123;<br>           Contraction_Point(v);<br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> du[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,x,y;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(g));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        x=in_block[i];<br>        <span class="hljs-keyword">for</span>(ri j=h[i];j;j=edge[j].ne)&#123;<br>            y=in_block[edge[j].to];    <span class="hljs-comment">//太坑了</span><br>            g[x][y]=g[y][x]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(du,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(du));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=num;i++)&#123;<br>    <span class="hljs-keyword">for</span>(ri j=<span class="hljs-number">1</span>;j&lt;=num;j++)&#123;<br>    <span class="hljs-keyword">if</span>(i!=j&amp;&amp;g[i][j])&#123;du[j]++;<br>&#125;<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(du[i]==<span class="hljs-number">1</span>)ans++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,(<span class="hljs-keyword">int</span>)<span class="hljs-built_in">ceil</span>(ans/<span class="hljs-keyword">double</span>(<span class="hljs-number">2</span>)));<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x,y;<br>    read(n),read(m);<br>    num_edge=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        read(x),read(y);<br>        add_edge(x,y);<br>        add_edge(y,x);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(bridge,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(bridge));<br>    tarjan(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(in_block,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(in_block));<br>    <span class="hljs-keyword">for</span>(ri i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!in_block[i])&#123;<br>            num++;<br>            Contraction_Point(i);<br>        &#125;<br>    &#125;<br>    solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 桥(割边) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--树上差分</title>
      <link href="/2018/07/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/"/>
      <url>/2018/07/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在做一些树上路径修改&amp;查询相关题目时，有时我们用不着树链剖分，类比于序列上的差分，我们可以进行树上差分，不过情况稍有些不同，分为点值上的差分和边权上的差分两种</p><h2 id="点值差分"><a href="#点值差分" class="headerlink" title="点值差分"></a>点值差分</h2><p>   对树上路径$path(x,y)$进行点值差分方法：</p><p>   $tag[x]++,tag[y]++,tag[lca(x,y)]-=2$</p><p>   询问$x$被多少个标记覆盖时进行$dfs$,将$x$所有子树节点$tag[]$之和加上$tag[x]$即使被覆盖数目</p><p>   例题：<a href="https://www.luogu.org/problemnew/show/P3128" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3128</a></p><p>   代码：</p>   <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>#define ll long long <br>#define ri register int <br>using namespace std;<br>const int maxn=50005;<br>const int inf=0x7fffffff;<br>template &lt;class T&gt;inline void read(T &amp;x)&#123;<br>      x=0;int ne=0;char c;<br>      while(!isdigit(c=getchar()))ne=c==&apos;-&apos;;<br>      x=c-48;<br>      while(isdigit(c=getchar()))x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-48;<br>      x=ne?-x:x;<br>      return ;<br>&#125;<br>int n,k;<br>struct Edge&#123;<br>      int ne,to;<br>&#125;edge[maxn&lt;&lt;1];<br>int h[maxn],num_edge=0;<br>inline void add_edge(int f,int to)&#123;<br>       edge[++num_edge].ne=h[f];<br>       edge[num_edge].to=to;<br>       h[f]=num_edge;<br>       return ;<br>&#125;<br>int cnt=0;<br>int dep[maxn],fa[maxn],son[maxn],top[maxn],dfn[maxn],rnk[maxn],size[maxn];<br>int sum[maxn];<br>int L,R,dta;<br>void dfs_1(int now)&#123;<br>       int  v;<br>       size[now]=1;<br>       for(ri i=h[now];i;i=edge[i].ne)&#123;<br>           v=edge[i].to;<br>           if(v==fa[now])continue;<br>           dep[v]=dep[now]+1,fa[v]=now;<br>           dfs_1(v);<br>           size[now]+=size[v];<br>           if(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>       &#125;<br>       return ;<br>&#125; <br>void dfs_2(int now,int t)&#123;<br>       int v;<br>       top[now]=t,dfn[now]=++cnt,rnk[cnt]=now;<br>       if(!son[now])return ;<br>       dfs_2(son[now],t);<br>       for(ri i=h[now];i;i=edge[i].ne)&#123;<br>             v=edge[i].to;<br>             if(v==fa[now]||v==son[now])continue;<br>             dfs_2(v,v);<br>       &#125;<br>       return ;<br>&#125;<br>void update_lca(int x,int y)&#123;<br>        while(top[x]!=top[y])&#123;<br>                if(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>                x=fa[top[x]];<br>        &#125;<br>        if(dep[x]&gt;dep[y])swap(x,y);<br>        sum[x]--,sum[fa[x]]--;<br>        return ;<br>&#125;<br>int ans=-inf;<br>void dfs_3(int now)&#123;<br>int v;<br>for(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br>if(v==fa[now])continue;<br>dfs_3(v);<br>sum[now]+=sum[v];<br>&#125;<br>ans=max(ans,sum[now]);<br>return ;<br>&#125;<br>int main()&#123;<br>     int x,y,z;<br>     //double st=clock();<br>     read(n),read(k);<br>     for(ri i=1;i&lt;n;i++)&#123;<br>             read(x),read(y);<br>             add_edge(x,y);<br>             add_edge(y,x);<br>     &#125;  <br>     dep[1]=1,fa[1]=0;<br>     dfs_1(1);<br>     dfs_2(1,1);<br>     for(ri i=1;i&lt;=k;i++)&#123;<br>             read(x),read(y);<br>             sum[x]++,sum[y]++;<br>             update_lca(x,y);<br>     &#125;<br>     //double ed=clock();<br>     dfs_3(1);<br>     printf(&quot;%d\n&quot;,ans);<br>     //printf(&quot;%lf\n&quot;,ed-st);<br>     return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="边权差分"><a href="#边权差分" class="headerlink" title="边权差分"></a>边权差分</h2><p>  对树上路径$(x,y)$进行差分方法：（注意$x,y$这里还是节点）</p><p>  $tag[x]++,tag[y]++,tag[lca(x,y)]—,tag[fa[lca(x,y)]]—$</p><p>  询问$x$被多少标记覆盖方法同上,然而<strong>注意</strong>！！</p><p>  解决相关问题时不能把$tag[root]$算进贡献，因为它没有后继的边</p><p>  例题：<a href="http://poj.org/problem?id=3417" target="_blank" rel="noopener">http://poj.org/problem?id=3417</a></p><p>  代码：</p>  <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>#define ll long long <br>#define ri register int <br>using namespace std;<br>const int maxn=100005;<br>const int inf=0x7fffffff;<br>template &lt;class T&gt;inline void read(T &amp;x)&#123;<br>      x=0;int ne=0;char c;<br>      while(!isdigit(c=getchar()))ne=c==&apos;-&apos;;<br>      x=c-48;<br>      while(isdigit(c=getchar()))x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-48;<br>      x=ne?-x:x;<br>      return ;<br>&#125;<br>struct Edge&#123;<br> int ne,to;<br>&#125;edge[maxn&lt;&lt;1];<br>int h[maxn],num_edge=0,n,m;<br>inline void add_edge(int f,int t)&#123;<br>edge[++num_edge].ne=h[f];<br>edge[num_edge].to=t;<br>h[f]=num_edge;<br>return ;<br>&#125;<br>int dep[maxn],fa[maxn],size[maxn],dfn[maxn],sum[maxn],son[maxn],top[maxn];<br>void dfs_1(int now)&#123;<br>int v;<br>size[now]=1;<br>for(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br>if(v==fa[now])continue;<br>fa[v]=now,dep[v]=dep[now]+1;<br>dfs_1(v);<br>size[now]+=size[v];<br>if(!son[now]||size[son[now]]&lt;size[v])son[now]=v;<br>&#125;<br>return ;<br>&#125;<br>void dfs_2(int now,int t)&#123;<br>int v;<br>top[now]=t;<br>if(!son[now])return ;<br>dfs_2(son[now],t);<br>for(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br>if(v==fa[now]||v==son[now])continue;<br>dfs_2(v,v);<br>&#125;<br>&#125;<br>int ans;<br>void dfs_3(int now)&#123;<br>int v;<br>for(ri i=h[now];i;i=edge[i].ne)&#123;<br>v=edge[i].to;<br>if(v==fa[now])continue;<br>dfs_3(v);<br>sum[now]+=sum[v];<br>&#125;<br>//cout&lt;&lt;sum[now]&lt;&lt;endl;<br>if(now!=1&amp;&amp;sum[now]==0)ans+=m;<br>else if(now!=1&amp;&amp;sum[now]==1)ans++; <br>return ;<br>&#125;<br>void update_path(int x,int y)&#123;<br>while(top[x]!=top[y])&#123;<br>if(dep[top[x]]&lt;dep[top[y]])swap(x,y);<br>x=fa[top[x]];<br>&#125;<br>if(dep[x]&gt;dep[y])swap(x,y);<br>sum[x]-=2;<br>return;<br>&#125;<br>int main()&#123;<br>int x,y,z;<br>read(n),read(m);<br>for(ri i=1;i&lt;n;i++)&#123;<br>read(x),read(y);<br>add_edge(x,y);<br>add_edge(y,x);<br>&#125;<br>fa[1]=0,dep[1]=1;<br>dfs_1(1);<br>dfs_2(1,1);<br>for(ri i=1;i&lt;=m;i++)&#123;<br>read(x),read(y);<br>sum[x]++,sum[y]++;<br>update_path(x,y);<br>&#125;<br>dfs_3(1);<br>printf(&quot;%d\n&quot;,ans);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="例题待填坑"><a href="#例题待填坑" class="headerlink" title="例题待填坑"></a>例题待填坑</h2><ul><li><p>货车运输</p></li><li><p>天天爱跑步</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记--树链剖分</title>
      <link href="/2018/07/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/07/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  树链剖分是一个很好用的处理树上统计信息的方法,大致思想就是把树上路径分成$log N$条链,再用线段树之类的数据结构维护一下,所以时间复杂度得到了保障</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>  个人认为这篇讲的很好:</p><p>  <a href="https://www.cnblogs.com/George1994/p/7821357.html" target="_blank" rel="noopener">https://www.cnblogs.com/George1994/p/7821357.html</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>  debug树链剖分对于我来说真是个痛苦的过程,初学时一个错误查了近一个小时才查出来.</p><p>  <strong>首先你要知道线段树上序列是什么?</strong></p><p>  他们是$dfs_2$中的每个树节点的$dfs$顺序存在$dfn[]$中,$rnk[]$则记录对应$dfn[]$对应的节点编号,这点千万不要搞错，尤其在<strong>单点操作时极其容易忽略</strong></p><h3 id="build函数"><a href="#build函数" class="headerlink" title="build函数"></a>build函数</h3>  <figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>mx[now]=sum[now]=w[rnk[l]];<span class="hljs-comment">//注意是rnk[l]</span><br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>build(now&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>build(now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>sum[now]=sum[now&lt;&lt;<span class="hljs-number">1</span>]+sum[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>   mx[now]=max(mx[now&lt;&lt;<span class="hljs-number">1</span>],mx[now&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> ;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="必要的操作-一定要检查是否写了"><a href="#必要的操作-一定要检查是否写了" class="headerlink" title="必要的操作(一定要检查是否写了)"></a>必要的操作(一定要检查是否写了)</h3>  <figure class="hljs highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">   dep[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//假设root是1</span><br>dfs_1(<span class="hljs-number">1</span>);<br>dfs_2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br></code></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h3><p>   <a href="https://www.luogu.org/problemnew/show/P2590" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2590</a></p><p>   代码:<a href="https://www.luogu.org/paste/izhvcst5" target="_blank" rel="noopener">请戳这里</a></p><p>   简要题解: 无</p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2:"></a>例题2:</h3><p>   <a href="https://www.luogu.org/problemnew/show/P3384" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3384</a></p><p>   代码: <a href="https://www.luogu.org/paste/e4tjnjg8" target="_blank" rel="noopener">请戳这里</a></p><p>   简要题解: 无</p><h3 id="例题3"><a href="#例题3" class="headerlink" title="例题3:"></a>例题3:</h3><p>   <a href="https://www.luogu.org/problemnew/show/P3950" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3950</a></p><p>   代码及题解:</p><p>   <a href="https://www.cnblogs.com/Rye-Catcher/p/9351619.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rye-Catcher/p/9351619.html</a></p><h3 id="例题4"><a href="#例题4" class="headerlink" title="例题4:"></a>例题4:</h3><p>   <a href="https://www.luogu.org/problemnew/show/P4092#sub" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4092#sub</a></p><p>   这道题比较有意思，题解中找目标所在重链然后倍增的思路在今年NOI中可以运用</p><p>   代码及题解:</p><p>   <a href="https://www.cnblogs.com/Rye-Catcher/p/9275770.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rye-Catcher/p/9275770.html</a></p><h3 id="例题5"><a href="#例题5" class="headerlink" title="例题5:"></a>例题5:</h3><p>   查了好久的错…</p><p>   <a href="https://www.luogu.org/problemnew/show/P2146" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2146</a></p><p>   代码: <a href="https://www.luogu.org/paste/sigfo8h" target="_blank" rel="noopener">请戳这里</a></p><p>   简要题解:区间覆盖</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtcoderSoundHound Inc.Contest解题报告</title>
      <link href="/2018/07/07/AtcoderSoundHound-Inc-Contest%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/07/07/AtcoderSoundHound-Inc-Contest%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>  C++ Example</p>  <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>using namespace std;<br>int main()&#123;<br>int a,b;<br>cin&gt;&gt;a&gt;&gt;b;<br>if(a+b==15)puts(&quot;+&quot;);<br>else if(a*b==15)puts(&quot;*&quot;);<br>else puts(&quot;x&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>  C++ Example</p>  <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>using namespace std;<br>const int maxn=100000;<br>char str[maxn];<br>int main()&#123;<br>int w;<br>scanf(&quot;%s&quot;,str);<br>scanf(&quot;%d&quot;,&amp;w);<br>if(w==1)&#123;printf(&quot;%s&quot;,str);return 0;&#125;<br>for(int i=0;i&lt;strlen(str);i++)&#123;<br>if(i%w==0)&#123;<br>putchar(str[i]);<br>&#125;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>  这题画风突变啊喂</p><p>  这题我比较SB打表没找出规律还是yjw学长点醒了我  $yjw$学长 $orz$</p><p>  这题其实是个概率题,长度为$m$,则最多有$m-1$对数字，显然每一对之间是互相不影响的,于是我们先来研究一对数字的情况：</p><p>  首先每个数字都有n个数字与之配对，总计$n × n$种情况,再考虑对答案做贡献的，假设那一对数字是$x,y (y&gt;x)$,则能做贡献的情况有$n-d$种.当然我们这只是$x&lt;y$的情况，所以共$2×(n-d)$种。当然$d==0$时,就无关大小，只有$(n-d)$种，这需要特判.</p><p>  然后交上去还是$WA$了,发现强制类型转换写在括号外导致会爆$int$,比较坑</p>  <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#define ri register int <br>using namespace std;<br>template &lt;class T&gt;void read(T &amp;x)&#123;<br>x=0;int ne=0;char c;<br>while(!isdigit(c=getchar()))ne=c==&apos;-&apos;;<br>x=c-48;<br>while(isdigit(c=getchar()))x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-48;<br>x=ne?-x:x;<br>return ;<br>&#125; <br>int n,m,d;<br>int main()&#123;<br>read(n),read(m),read(d);<br>if(d==0)printf(&quot;%.10Lf\n&quot;,(long double)(m-1)/n);<br>else if(n&lt;=d)printf(&quot;0.0000000\n&quot;);<br>else printf(&quot;%.10Lf\n&quot;,(long double)(1.00*2*(n-d)*(m-1))/n/n);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>   这题解法很有意思，比较考验智商</p><p>   求两个最短路，一个是$s$到$x (x \in [1,n])$的用$yen$衡量的最短路$dis_1(s,x)$,一个是从$t$到$x (x \in [1,n])$的最短路$dis_2(t,x)$,用$snuuk$衡量的最短路</p><p>   然后我们想，最后$n-1$年出发的时候只用$n$这个点可以交换货币，所以$val[n-1]=dis_1(s,n)+dis_2(t,n)$</p><p>   再向下想,在$n-2$年出发时,要么继续到$n$这个点交换货币，要么到$n-1$这个点交换货币，以此类推得到</p><p>  $val[p]=min(val[p+1],dis_1(s,p)+dis_2(t,p)) p \in [0,n-1]$</p><p>  最后初始钱数$-val$值就是对应答案</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>   我太菜不知道怎么做，等待咕咕咕的题解吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛解题报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误笔记</title>
      <link href="/2018/07/07/%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/07/%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><p>inf值要设大但不要溢出</p></li><li><p>vis之类的数组使用前都memset一下</p></li><li><p>memset一些除0外的奇怪的数字时，最好老老实实写for循环（谁叫我脸黑）</p></li><li><p>edge数组不要设小了</p></li><li><p>C++ 11 不要用register int</p></li><li><p>手写堆中$heap[]$最好不用结构体，若用，手写swap函数</p></li><li><p>$bool$ $flag$一定要赋初值！！！！</p></li><li><p>树链剖分注意<a href="https://www.cnblogs.com/Rye-Catcher/p/9265860.html" target="_blank" rel="noopener">https://www.cnblogs.com/Rye-Catcher/p/9265860.html</a></p></li><li><p>边权树上差分注意根节点不能算作贡献</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 错误笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APIO2018游记</title>
      <link href="/2018/07/07/APIO2018%E6%B8%B8%E8%AE%B0/"/>
      <url>/2018/07/07/APIO2018%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>   上了下测试系统，发现居然是毛子的题（貌似系统也是，只给了英文和俄语两个选项），话说T1 A+B什么鬼。</p><p>   然后向教父请假，教父一脸严肃好吓人，但是我能逃掉期中考hhhhhhhhh</p><p>   在火车站等车居然看到两个师大的？</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>   早上五点多就被吵醒了，到了西客站后等了好久，然后又在宾馆等了好久，然后又背着大包走了好久，然后终于等到了房卡进了房间，话说房间真心不错（然而花的钱也很多）</p><p>   下午模拟赛在Linux上，然而我$^{tm}$还不会用，VAN蛋，赶紧学了下命令行，自己琢磨GUIDE的字体大小弄了好久。</p><p>   中午居然组队去吃饭？饭菜好评，按槽位自助打饭好评。接着回宾馆睡了一觉，下午发现可能要迟到了，一路跑过去，然后被一位武汉小哥告知根本没有模拟赛，只是上机？$qwq $ 虚拟机差评，键盘差评，时不时卡顿差评</p><p>   然后到了实验楼的机房，自装NOI Linux好评，键盘好评，机子速度好评，然而位子这么挤不怕被偷屏吗…</p><p>   将近五点，在中午食堂等开饭，等了好久被告知在另一个食堂？qwq</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>  一大早被jyh拉起来到学校旁买本子，结果半天愣是没看到文具店？</p><p>  吃完早饭到正志厅准备听课。居然是wuhongxu?!然后一上来先水UOJ群，接着balabala讲起了折纸？！没错，就是折纸，计算机科学中的折纸。PPT全英文差评，看得好费劲，然后基本听不懂orz</p><p>  然后折纸讲完了，whx比较兴奋地说：“现在我们讲图论中一些有趣的算法”。然而。。。基本听不懂orz,看到APSP(All Pair Shortest Path)各种神仙算法复杂度，和其中一个证明过程，这…orz</p><p>  接着是秦岳讲课，泊松图像编辑和游戏中的AI，感觉挺有趣的，讲了一堆博弈算法orz</p><p>  下午终于比较正经，wuvin讲二分，弹幕好评，不过一下就来了什么暴力%之类奇奇怪怪的东西…终于有能听懂的东西了，感动</p><p>  然后是Kiana(这名字好熟悉啊，好像是哪年的noip还是noi题面中出现过)讲图的匹配…终于有能听懂的东西了，感动……然后讲到了三分图，我：？？？</p><p>  后面吃饭领密码条，好象和之前的一模一样</p><p>  今天也算开拓了视野，JXOI2018 T1 的Gobo sort不是空穴来风，原来真有个叫Bogo sort(猴子排序)的玩意，顺便知晓了后天是PKU的大佬讲课，还知道了那个背着NOI 34th书包的居然是BJ A类队长,而且才初三orz感觉明天要爆0滚粗了… </p><h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h3><p>  上午考试一开始去错了考场真尴尬，居然是在办公楼？！居然还是虚拟机？！然后CCF的工作人员告诉我们只准钦定Linux，用Windows属于作弊（<del>万一不小心按了win键呢</del>）</p><p>  然后在线看题，还是一样毛子的评测系统，中文翻译好评。T1目测毒瘤数据结构，可以暴力，“小明”是什么鬼？！T2 emmm又是圆，可以暴力 T3 目测图论，可以暴力。</p><p>  然后我真的只交了暴力，T1，T2第一个Substask，T3第一个$n&lt;=10$的Substask 爆搜 TLE？！最后只得交一个n&lt;=1000 无环的判定，自己想出了一个比较玄学的方法，不知道能不能行。</p><p>  正当我为我的机智沾沾自喜时，jyh说：不就一个DP.我：…woc好象真的是orz</p><p>  然后是讲题，T1线段树分治?!什么东西？！T2K-D树？！什么东西？！T3圆方树？！什么东西。</p><p>  猫锟：“87分的都是暴力没打好”  “我翻译的时候就觉得题目太水了，不都是套路嘛”</p><p>  我：orz</p><p>  铁牌钦定</p><h3 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h3><p>   上午以为8：30吃早饭，结果进入正志厅时老师已经讲课了。话说今天讲课的老师没听过，来的人也更少，是不是一些dalao都去THUPC了…话说我们学校连人都凑不齐…</p><p>   上午讲数论函数相关，欧拉函数emmm欸我会….杜教筛….有道理  洲阁筛….wtf!?  Min_25筛….wtf!?</p><p>   然后就坐车去八十中，真远啊。</p><p>   下午听后缀自动机…一下午属于离线状态……顺便打了一下平均边权最大的代码。蒟蒻的我字符串只会Hash(<del>蛤xi</del>)</p><p>   然后是吃饭，我以为所有窗口饭菜都是一个样…然后就点到最烂的菜…根本没胃口</p><p>   晚上等到了闭幕式，强行用笔记本为手机续命，一开始先是解释CTSC代码丢失的处理结果，不过对我这种辣鸡没能参加CTSC的选手没影响</p><p>   然后开始讲APIO，原来这就是APIO的正式考试啊（话说我是不是唯一一个现在才知道的），难怪我这个蒟蒻觉得这么难</p><p>   “感谢主办方提供实时评测，即时反馈”。。。全场响起了经久不绝的掌声</p><p>   然后颁奖，中间还有段舞蹈。无疑打铁走人，师大一个高一的拿了Ag，太强了orz</p><p>   总之第一次参加这样的活动，也学到不少东西，发现自己许多不足：模拟赛基本没打过，临考经验不足，该拿的部分分没拿到，还是要多多努力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JXOI2018游记</title>
      <link href="/2018/07/07/JXOI2018%E6%B8%B8%E8%AE%B0/"/>
      <url>/2018/07/07/JXOI2018%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>—Update5.2 成绩出了，见后文</p><p>听说省选VAN写游记是传统，本蒟蒻也来发一篇吧。</p><ul><li><p>DAY 0</p><p>本来以为省选不在JKFZ举行的结果又是在JKFZ，本校作战感觉终究会是好一些吧，和jyh一起向教父申请停了一天的课，没想到教父居然笑眯眯地答应了，有点出乎意料。</p><p>上午和jyh一起打了yjw学长Yali集训时的模拟赛，T1线段树，T2。。。 T3。。。然后愉快地打了线段树，结果。。。爆0。</p><p>中午吃完后dalao jyh讲了他T3思路，总之感觉很厉害。</p><p>下午dalao jyh写出T3果然是满分，orz。然后被教练拉去和yjw谈一谈赛前经验，然后莫名其妙就变成模拟赛题解讲解，原来T1爆0原因是因为&amp;和|运算不能简单地只是打个标记，我还是naive了。</p><p>晚上终于回家了，随便打了下模板，本来想开CSGO，结果偷偷玩了几把混乱大枪战后就睡了。</p></li><li><p>DAY 1</p><p>早上坐车来到JKFZ，打了几遍数论相关模板，连莫比乌斯这种不太会考的都打了一遍。</p><p>然而。。。</p><p>和jyh一起取考场的时候总是有些奇怪，但还算释然。上机试了下机子，除了键盘有些不适应之外还好没什么问题（一想到NOIP时机子打不开T盘就觉得好笑）。不久题目发了下来。</p><p>第一眼看到题面，九条可怜？woc又是吉如一出题。把全部PDF浏览后开始做T1，T1一开始看不懂在草稿纸上推了一遍后却觉得思路还挺容易。</p><p>T1大致题面：他先告诉你一个叫gobo sort的排序方法：对于一个成为n的序列a，随机生成另一个长为n序列p，然后构造一个长为n的序列b,使得$b_i$ $=$ $a_{p_i}$。假如这个b是有序的，则停止操作，排序完成，反之不断重复生成p序列的操作.</p><p>然后给你一个长为n的序列，和m,l,r。要求你在n长的序列后接上m个值域为[l,r]的数，使得gobo sort中随机生成序列的期望次数最多。</p><p>草稿纸上搞了一下发现你只要让每个数字出现的次数平均就好了。具体怎么算这里不再赘述，然而在考场上我发现有几个地方需要注意：</p><ol><li>离散化 2.可以用堆维护 3.由于有阶乘，除和取模操作，需要逆元.</li></ol><p>然而蛋疼的是我忘了逆元怎么打！！！在考场上手推好久，只得作罢，去做T2 T3</p><p>T2打了暴力，T3连暴力都不知道怎么打…</p><p>总之出了考场后很颓废，T1没打逆元，什么优化也没加，估计凉凉。</p><p>然后下午yjw学长搞来份solution，看了一下T1思路确时没错,T2用sigma推了一大堆结果时间复杂度只有O（r）?T3区间DP，好难根本想不到。</p><p>后面看了下逆元，发现原来这么容易求,考场上用费马小定理却没推出来…还是我太弱了。</p></li><li><p>DAY 懒得数了</p><p>五一节后成绩出来了，居然有50分，我想应该是T1 30+T2 20+T3 0瞄了一眼大多都是这个分段，然而我的NOIP只有120，前面都是200+或300+，我还是太蒻了,学长进了A类，不过有一个赣州中学高一省队爷，真的强…以及一位爆0 A队女选手。</p><p>然后在知乎上看到这个：</p><p><a href="https://www.zhihu.com/question/274885962?answer_deleted_redirect=true" target="_blank" rel="noopener">厚颜无耻的出题人</a>  %%%</p></li><li><p>后记</p><p>总之还是意料之中吧，也恰恰反映我的不足，以后还是要多刷题，坚持在NOIP前一月把算法竞赛进阶指南刷完，（现在看怕是没机会了）争取考400+<del>(这么弱怎么可能)</del>。</p><p>总之应用一句在其他dalao滚粗记中的话吧：</p><p> _一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程 。 ——长者_</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2018/07/07/HelloWorld/"/>
      <url>/2018/07/07/HelloWorld/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>   第一篇博客纪念</p><p>   $ \mathcal{Enjoy Reading Here} $</p>]]></content>
      
      
      
        <tags>
            
            <tag> Not Yet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>小伙伴们</title>
      <link href="/Friend-Links/index.html"/>
      <url>/Friend-Links/index.html</url>
      
        <content type="html"><![CDATA[<ul><li>旧博客: <a href="https://www.cnblogs.com/Rye-Catcher/" target="_blank" rel="noopener">https://www.cnblogs.com/Rye-Catcher/</a></li></ul><h3 id="吊打我的同学"><a href="#吊打我的同学" class="headerlink" title="吊打我的同学:"></a>吊打我的同学:</h3><ul><li><a href="https://www.cnblogs.com/xxzh/" target="_blank" rel="noopener">星星之火</a> in JX</li></ul><h3 id="有幸认识的大佬"><a href="#有幸认识的大佬" class="headerlink" title="有幸认识的大佬:"></a>有幸认识的大佬:</h3><ul><li><p><a href="http://cnblogs.com/huyufeifei/" target="_blank" rel="noopener">huyufeifei</a>  </p></li><li><p><a href="http://mayflyyh.com" target="_blank" rel="noopener">额冻豆腐</a></p></li><li><p><a href="http://www.cnblogs.com/ppprseter/" target="_blank" rel="noopener">威慑▲本人露迭月</a> in HB</p></li><li><p><a href="https://www.cnblogs.com/ouuan/" target="_blank" rel="noopener">yyfouuan</a> in HB</p></li><li><p><a href="http://www.wjyyy.top/" target="_blank" rel="noopener">wjyyy</a> in HB</p></li><li><p><a href="https://oi.logey.cn/" target="_blank" rel="noopener">Logey</a> in SD </p></li><li><p><a href="https://acfunction.github.io/" target="_blank" rel="noopener">AcFunction</a> in BJ</p></li><li><p><a href="http://bubbleioa.top/" target="_blank" rel="noopener">冒泡ioa</a> in JX</p></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板GuestBook</title>
      <link href="/guestbook/index.html"/>
      <url>/guestbook/index.html</url>
      
        <content type="html"><![CDATA[<p>想对我说点什么?</p><script type="math/tex; mode=display">\mathcal{Enjoy \ Your \ Reading}</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About Me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[ <center>一位很菜的退役OIer,曾经的文化课划水能手</center> <center>23rd SM2 Scholars,NUS预科在读,在坡城生活<center> <center>爱好读书,电影,弹吉他;玩过不少游戏;Principle of Mathematics研究中</center> <center>To be the world's toughest 17-year-old但依旧naive</center><center> 涉猎广泛，乐于瞎搞研究，但是太懒~</center><center> 欢迎各位交友,把这里看成留言板也无所谓</center><p><br></p><p><center>稍顷，叫乌鸦的少年把手轻轻放在我肩上。沙尘暴立即消失。而我仍闭目合眼</center></p><p><center>“这往下你必须成为世界上最坚强的十五岁少年，不管怎么样</center></p><p><center>因为除此之外这世界上没有你赖以存活之路</center></p><p><center>为此你自己一定要理解真正的顽强是怎么回事”</center></p><p align="right">村上春树,《海边的卡夫卡》,林少华译</p>                                                    </center></center>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>category</title>
      <link href="/category/index.html"/>
      <url>/category/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
